#0
Performance	_	_
analysis	_	_
of	_	_
quantization-based	_	_
approximation	_	_
algorithms	_	_
for	_	_
precomputing	_	_
the	_	_
supported	_	_
QoS	_	_
Abstract	_	_
Precomputation	_	_
of	_	_
the	_	_
supported	_	_
QoS	_	_
is	_	_
very	_	_
important	_	_
for	_	_
internet	_	_
routing	_	_
.	_	_

#1
By	_	_
constructing	_	_
routing	_	_
tables	_	_
before	_	_
a	_	_
request	_	_
arrives	_	_
,	_	_
a	_	_
packet	_	_
can	feasibility	_
be	_	_
forwarded	_	_
with	_	_
a	_	_
simple	_	_
table	_	_
lookup	_	_
.	_	_

#2
When	_	_
the	_	_
QoS	_	_
information	_	_
is	_	_
provided	_	_
,	_	_
a	_	_
node	_	_
can	capability	_
immediately	_	_
know	_	_
whether	_	_
a	_	_
certain	_	_
request	_	_
can	capability	_
be	_	_
supported	_	_
without	_	_
launching	_	_
the	_	_
path	_	_
finding	_	_
process	_	_
.	_	_

#3
Unfortunately	_	_
,	_	_
as	_	_
the	_	_
problem	_	_
of	_	_
finding	_	_
a	_	_
route	_	_
satisfying	_	_
two	_	_
additive	_	_
constraints	_	_
is	_	_
NP-complete	_	_
,	_	_
the	_	_
supported	_	_
QoS	_	_
information	_	_
can	capability-feasibility	_
only	_	_
be	_	_
approximated	_	_
using	_	_
a	_	_
polynomial	_	_
time	_	_
mechanism	_	_
.	_	_

#4
A	_	_
good	_	_
approximation	_	_
scheme	_	_
should	deontic	_
reduce	_	_
the	_	_
error	_	_
in	_	_
estimating	_	_
the	_	_
actual	_	_
supported	_	_
QoS	_	_
.	_	_

#5
Nevertheless	_	_
,	_	_
existing	_	_
approaches	_	_
which	_	_
determine	_	_
this	_	_
error	_	_
may	capability-speculation	negation
not	_	_
truly	_	_
reflect	_	_
the	_	_
performance	_	_
on	_	_
admission	_	_
control	_	_
,	_	_
meaning	_	_
whether	_	_
a	_	_
request	_	_
can	feasibility	_
be	_	_
correctly	_	_
classified	_	_
as	_	_
feasible	_	_
or	_	_
infeasible	_	_
.	_	_

#6
In	_	_
this	_	_
paper	_	_
,	_	_
we	_	_
propose	_	_
using	_	_
a	_	_
novel	_	_
metric	_	_
,	_	_
known	_	_
as	_	_
distortion	_	_
area	_	_
,	_	_
to	_	_
evaluate	_	_
the	_	_
performance	_	_
of	_	_
precomputing	_	_
the	_	_
supported	_	_
QoS	_	_
.	_	_

#7
We	_	_
then	_	_
analyze	_	_
the	_	_
performance	_	_
of	_	_
the	_	_
class	_	_
of	_	_
algorithms	_	_
that	_	_
approximate	_	_
the	_	_
supported	_	_
QoS	_	_
through	_	_
discretizing	_	_
link	_	_
metrics	_	_
.	_	_

#8
We	_	_
demonstrate	_	_
how	_	_
the	_	_
performance	_	_
of	_	_
these	_	_
schemes	_	_
can	feasibility	_
be	_	_
enhanced	_	_
without	_	_
increasing	_	_
complexity	_	_
.	_	_

#9
Our	_	_
results	_	_
serve	_	_
as	_	_
a	_	_
guideline	_	_
on	_	_
developing	_	_
discretization-based	_	_
approximation	_	_
algorithms	_	_
.	_	_

#10
Introduction	_	_
As	_	_
the	_	_
demand	_	_
for	_	_
deploying	_	_
real-time	_	_
and	_	_
multimedia	_	_
applications	_	_
over	_	_
the	_	_
internet	_	_
is	_	_
increasing	_	_
,	_	_
providing	_	_
guaranteed	_	_
quality-of-service	_	_
(	_	_
QoS	_	_
)	_	_
for	_	_
these	_	_
applications	_	_
becomes	_	_
more	_	_
and	_	_
more	_	_
important	_	_
.	_	_

#11
In	_	_
general	_	_
,	_	_
the	_	_
QoS	_	_
requirements	_	_
can	feasibility	_
be	_	_
divided	_	_
into	_	_
two	_	_
categories	_	_
:	_	_
bottleneck	_	_
metric	_	_
and	_	_
additive	_	_
metric	_	_
.	_	_

#12
The	_	_
additive	_	_
metric	_	_
of	_	_
a	_	_
path	_	_
is	_	_
the	_	_
sum	_	_
of	_	_
the	_	_
metrics	_	_
of	_	_
the	_	_
links	_	_
along	_	_
the	_	_
path	_	_
,	_	_
while	_	_
the	_	_
bottleneck	_	_
metric	_	_
of	_	_
a	_	_
path	_	_
is	_	_
the	_	_
minimum	_	_
value	_	_
of	_	_
the	_	_
metrics	_	_
of	_	_
the	_	_
links	_	_
along	_	_
the	_	_
path	_	_
.	_	_

#13
For	_	_
example	_	_
,	_	_
bandwidth	_	_
is	_	_
a	_	_
bottleneck	_	_
QoS	_	_
metric	_	_
,	_	_
while	_	_
delay	_	_
and	_	_
delay	_	_
jitter	_	_
are	_	_
additive	_	_
QoS	_	_
metrics	_	_
.	_	_

#14
In	_	_
this	_	_
work	_	_
,	_	_
we	_	_
consider	_	_
connection	_	_
requests	_	_
that	_	_
have	_	_
two	_	_
additive	_	_
QoS	_	_
requirements	_	_
or	_	_
constraints	_	_
,	_	_
such	_	_
as	_	_
in	_	_
delay	_	_
and	_	_
cost	_	_
.	_	_

#15
To	_	_
simplify	_	_
our	_	_
discussion	_	_
,	_	_
we	_	_
assume	_	_
that	_	_
delay	_	_
and	_	_
cost	_	_
are	_	_
the	_	_
two	_	_
additive	_	_
metrics	_	_
under	_	_
consideration	_	_
,	_	_
although	_	_
our	_	_
analysis	_	_
and	_	_
method	_	_
can	capability-feasibility	_
be	_	_
applied	_	_
to	_	_
any	_	_
additive	_	_
metrics	_	_
.	_	_

#16
Many	_	_
existing	_	_
works	_	_
study	_	_
how	_	_
to	_	_
identify	_	_
a	_	_
feasible	_	_
path	_	_
for	_	_
a	_	_
request	_	_
with	_	_
two	_	_
additive	_	_
constraints	_	_
,	_	_
which	_	_
is	_	_
an	_	_
NP-complete	_	_
problem	_	_
.	_	_

#17
These	_	_
works	_	_
usually	_	_
assume	_	_
either	_	_
the	_	_
cost	_	_
or	_	_
the	_	_
delay	_	_
requirement	_	_
which	_	_
is	_	_
known	_	_
.	_	_

#18
Nevertheless	_	_
,	_	_
such	_	_
reactive	_	_
routing	_	_
mechanism	_	_
,	_	_
which	_	_
finds	_	_
a	_	_
path	_	_
after	_	_
the	_	_
requirement	_	_
is	_	_
known	_	_
,	_	_
can	capability	negation
not	_	_
provide	_	_
enough	_	_
information	_	_
to	_	_
support	_	_
efficient	_	_
admission	_	_
control	_	_
.	_	_

#19
When	_	_
a	_	_
request	_	_
is	_	_
received	_	_
,	_	_
a	_	_
node	_	_
can	capability	negation
not	_	_
immediately	_	_
tell	_	_
whether	_	_
a	_	_
possible	_	_
feasible	_	_
path	_	_
exists	_	_
until	_	_
a	_	_
path	_	_
finding	_	_
process	_	_
is	_	_
launched	_	_
based	_	_
on	_	_
the	_	_
requested	_	_
cost/delay	_	_
.	_	_

#20
On	_	_
the	_	_
other	_	_
hand	_	_
,	_	_
by	_	_
precomputing	_	_
the	_	_
supported	_	_
QoS	_	_
information	_	_
,	_	_
a	_	_
source	_	_
can	capability	_
immediately	_	_
determine	_	_
whether	_	_
the	_	_
connection	_	_
request	_	_
can	capability	_
be	_	_
supported	_	_
by	_	_
the	_	_
network	_	_
.	_	_

#21
Moreover	_	_
,	_	_
accepting	_	_
a	_	_
new	_	_
connection	_	_
will	_	_
not	_	_
violate	_	_
the	_	_
service	_	_
guarantees	_	_
for	_	_
the	_	_
existing	_	_
traffics	_	_
,	_	_
and	_	_
also	_	_
the	_	_
transmission	_	_
route	_	_
satisfies	_	_
the	_	_
QoS	_	_
requirement	_	_
of	_	_
the	_	_
new	_	_
connection	_	_
.	_	_

#22
The	_	_
problem	_	_
of	_	_
computing	_	_
the	_	_
supported	_	_
QoS	_	_
between	_	_
two	_	_
nodes	_	_
is	_	_
more	_	_
complicated	_	_
than	_	_
the	_	_
extensively	_	_
studied	_	_
multi-constrained	_	_
path	_	_
(	_	_
MCP	_	_
)	_	_
problem	_	_
or	_	_
the	_	_
delay-constrained	_	_
least	_	_
cost	_	_
(	_	_
DCLC	_	_
)	_	_
path	_	_
problem	_	_
.	_	_

#23
The	_	_
DCLC	_	_
problem	_	_
is	_	_
also	_	_
called	_	_
the	_	_
restricted	_	_
shortest	_	_
path	_	_
(	_	_
RSP	_	_
)	_	_
problem	_	_
.	_	_

#24
The	_	_
RSP	_	_
problem	_	_
aims	_	_
at	_	_
finding	_	_
the	_	_
minimum	_	_
delay	_	_
path	_	_
among	_	_
the	_	_
paths	_	_
that	_	_
satisfy	_	_
a	_	_
certain	_	_
cost	_	_
constraint	_	_
.	_	_

#25
The	_	_
MCP	_	_
problem	_	_
studies	_	_
finding	_	_
a	_	_
path	_	_
satisfying	_	_
both	_	_
specified	_	_
cost	_	_
and	_	_
delay	_	_
constraints	_	_
.	_	_

#26
Both	_	_
problems	_	_
focus	_	_
on	_	_
finding	_	_
a	_	_
single	_	_
path	_	_
between	_	_
two	_	_
nodes	_	_
with	_	_
a	_	_
given	_	_
(	_	_
cost	_	_
)	_	_
constraint	_	_
.	_	_

#27
Our	_	_
problem	_	_
,	_	_
also	_	_
known	_	_
as	_	_
the	_	_
all-costs	_	_
optimal	_	_
path	_	_
(	_	_
ACOP	_	_
)	_	_
problem	_	_
(	_	_
Orda	_	_
and	_	_
Sprintson	_	_
,	_	_
2003	_	_
)	_	_
,	_	_
finds	_	_
,	_	_
for	_	_
each	_	_
cost	_	_
c	_	_
,	_	_
a	_	_
c-cost	_	_
constrained	_	_
path	_	_
from	_	_
a	_	_
source	_	_
to	_	_
a	_	_
destination	_	_
with	_	_
the	_	_
minimum	_	_
delay	_	_
.	_	_

#28
In	_	_
other	_	_
words	_	_
,	_	_
instead	_	_
of	_	_
finding	_	_
a	_	_
single	_	_
path	_	_
given	_	_
a	_	_
cost	_	_
constraint	_	_
,	_	_
the	_	_
ACOP	_	_
problem	_	_
aims	_	_
at	_	_
finding	_	_
a	_	_
set	_	_
of	_	_
paths	_	_
representing	_	_
the	_	_
supported	_	_
QoS	_	_
.	_	_

#29
Due	_	_
to	_	_
the	_	_
NP-complete	_	_
nature	_	_
of	_	_
the	_	_
problem	_	_
,	_	_
some	_	_
approximation	_	_
mechanisms	_	_
have	_	_
been	_	_
developed	_	_
(	_	_
Garroppo	_	_
et	_	_
al.	_	_
,	_	_
2010	_	_
)	_	_
.	_	_

#30
They	_	_
usually	_	_
identify	_	_
a	_	_
path	_	_
with	_	_
a	_	_
cost	_	_
(	_	_
or	_	_
delay	_	_
)	_	_
within	_	_
a	_	_
certain	_	_
deviation	_	_
from	_	_
the	_	_
optimal	_	_
one	_	_
.	_	_

#31
Denote	_	_
c	_	_
as	_	_
the	_	_
estimated	_	_
optimal	_	_
cost	_	_
of	_	_
all	_	_
the	_	_
paths	_	_
satisfying	_	_
a	_	_
given	_	_
delay	_	_
constraint	_	_
d0	_	_
,	_	_
which	_	_
is	_	_
computed	_	_
by	_	_
an	_	_
algorithm	_	_
,	_	_
and	_	_
copt	_	_
as	_	_
the	_	_
optimal	_	_
cost	_	_
of	_	_
all	_	_
the	_	_
paths	_	_
satisfying	_	_
the	_	_
delay	_	_
constraint	_	_
d0	_	_
in	_	_
the	_	_
network	_	_
.	_	_

#32
c-copt	_	_
is	_	_
thus	_	_
called	_	_
the	_	_
cost	_	_
deviation	_	_
at	_	_
the	_	_
delay	_	_
constraint	_	_
of	_	_
d0	_	_
.	_	_

#33
An	_	_
algorithm	_	_
is	_	_
"	_	_
better	_	_
"	_	_
if	_	_
the	_	_
deviation	_	_
is	_	_
smaller	_	_
.	_	_

#34
While	_	_
deviation	_	_
is	_	_
appropriate	_	_
for	_	_
measuring	_	_
the	_	_
performance	_	_
of	_	_
the	_	_
DCLC	_	_
solutions	_	_
,	_	_
we	_	_
believe	_	_
that	_	_
it	_	_
does	_	_
not	_	_
directly	_	_
reflect	_	_
the	_	_
performance	_	_
of	_	_
the	_	_
ACOP	_	_
solutions	_	_
in	_	_
supporting	_	_
admission	_	_
control	_	_
.	_	_

#35
A	_	_
good	_	_
pre-computation	_	_
mechanism	_	_
should	deontic	_
approximate	_	_
the	_	_
supported	_	_
QoS	_	_
as	_	_
precisely	_	_
as	_	_
possible	_	_
.	_	_

#36
In	_	_
other	_	_
words	_	_
,	_	_
the	_	_
error	_	_
in	_	_
estimation	_	_
should	deontic	_
be	_	_
minimized	_	_
.	_	_

#37
Since	_	_
any	_	_
possible	_	_
delay	_	_
constraint	_	_
is	_	_
considered	_	_
,	_	_
this	_	_
"	_	_
error	_	_
"	_	_
is	_	_
not	_	_
a	_	_
single	_	_
cost	_	_
deviation	_	_
,	_	_
but	_	_
an	_	_
area	_	_
on	_	_
the	_	_
Cartesian	_	_
plane	_	_
.	_	_

#38
To	_	_
illustrate	_	_
,	_	_
consider	_	_
that	_	_
there	_	_
are	_	_
three	_	_
paths	_	_
connecting	_	_
a	_	_
source	_	_
to	_	_
a	_	_
destination	_	_
.	_	_

#39
The	_	_
QoS	_	_
parameters	_	_
of	_	_
the	_	_
paths	_	_
are	_	_
(	_	_
1,10	_	_
)	_	_
,	_	_
(	_	_
2,2	_	_
)	_	_
,	_	_
and	_	_
(	_	_
10,1	_	_
)	_	_
,	_	_
where	_	_
the	_	_
first	_	_
element	_	_
in	_	_
the	_	_
tuple	_	_
reflects	_	_
the	_	_
cost	_	_
of	_	_
the	_	_
path	_	_
while	_	_
the	_	_
second	_	_
element	_	_
represents	_	_
the	_	_
path	_	_
delay	_	_
.	_	_

#40
In	_	_
this	_	_
paper	_	_
,	_	_
we	_	_
write	_	_
the	_	_
QoS	_	_
parameter	_	_
of	_	_
a	_	_
path	_	_
and	_	_
the	_	_
constraints	_	_
of	_	_
a	_	_
request	_	_
as	_	_
(	_	_
cost	_	_
,	_	_
delay	_	_
)	_	_
.	_	_

#41
Request	_	_
(	_	_
c	_	_
,	_	_
d	_	_
)	_	_
can	feasibility	_
be	_	_
supported	_	_
by	_	_
a	_	_
path	_	_
with	_	_
the	_	_
QoS	_	_
parameter	_	_
(	_	_
c′	_	_
,	_	_
d′	_	_
)	_	_
,	_	_
where	_	_
c′≤c	_	_
and	_	_
d′≤d	_	_
.	_	_

#42
Request	_	_
(	_	_
5,5	_	_
)	_	_
is	_	_
feasible	_	_
because	_	_
it	_	_
can	feasibility-options	_
be	_	_
supported	_	_
by	_	_
the	_	_
path	_	_
with	_	_
the	_	_
QoS	_	_
parameter	_	_
(	_	_
2,2	_	_
)	_	_
.	_	_

#43
Request	_	_
(	_	_
1,15	_	_
)	_	_
is	_	_
also	_	_
feasible	_	_
because	_	_
it	_	_
can	feasibility	_
be	_	_
supported	_	_
by	_	_
the	_	_
path	_	_
with	_	_
the	_	_
QoS	_	_
parameter	_	_
(	_	_
1,10	_	_
)	_	_
.	_	_

#44
However	_	_
,	_	_
Request	_	_
(	_	_
1,1	_	_
)	_	_
is	_	_
not	_	_
feasible	_	_
because	_	_
no	_	_
path	_	_
can	capability	negation
support	_	_
it	_	_
.	_	_

#45
If	_	_
we	_	_
plot	_	_
the	_	_
QoS	_	_
parameters	_	_
of	_	_
the	_	_
path	_	_
on	_	_
the	_	_
cost-delay	_	_
plane	_	_
,	_	_
any	_	_
request	_	_
that	_	_
can	feasibility	_
be	_	_
supported	_	_
by	_	_
any	_	_
of	_	_
the	_	_
paths	_	_
can	capability-feasibility	_
be	_	_
easily	_	_
identified	_	_
.	_	_

#46
Refer	_	_
to	_	_
Fig	_	_
.	_	_
1	_	_
(	_	_
a	_	_
)	_	_
,	_	_
the	_	_
shaded	_	_
area	_	_
is	_	_
the	_	_
optimal	_	_
supported	_	_
QoS	_	_
,	_	_
in	_	_
which	_	_
any	_	_
request	_	_
that	_	_
falls	_	_
in	_	_
the	_	_
region	_	_
is	_	_
feasible	_	_
.	_	_

#47
Thus	_	_
,	_	_
a	_	_
good	_	_
pre-computation	_	_
scheme	_	_
should	deontic	_
approximate	_	_
this	_	_
area	_	_
as	_	_
precisely	_	_
as	_	_
possible	_	_
.	_	_

#48
The	_	_
"	_	_
error	_	_
"	_	_
in	_	_
approximation	_	_
is	_	_
the	_	_
difference	_	_
in	_	_
terms	_	_
of	_	_
the	_	_
area	_	_
between	_	_
the	_	_
region	_	_
of	_	_
the	_	_
optimal	_	_
supported	_	_
QoS	_	_
and	_	_
that	_	_
of	_	_
the	_	_
approximated	_	_
supported	_	_
QoS	_	_
.	_	_

#49
While	_	_
cost	_	_
deviation	_	_
is	_	_
related	_	_
to	_	_
the	_	_
difference	_	_
in	_	_
area	_	_
,	_	_
it	_	_
is	_	_
not	_	_
sufficient	_	_
.	_	_

#50
For	_	_
example	_	_
,	_	_
the	_	_
shaded	_	_
areas	_	_
in	_	_
Fig	_	_
.	_	_
1	_	_
(	_	_
a	_	_
)	_	_
and	_	_
(	_	_
b	_	_
)	_	_
represent	_	_
the	_	_
optimal	_	_
and	_	_
approximate	_	_
supported	_	_
QoS	_	_
regions	_	_
,	_	_
respectively	_	_
.	_	_

#51
According	_	_
to	_	_
Fig	_	_
.	_	_
1	_	_
(	_	_
b	_	_
)	_	_
,	_	_
when	_	_
delay	_	_
is	_	_
two	_	_
,	_	_
the	_	_
approximate	_	_
best	_	_
cost	_	_
is	_	_
three	_	_
.	_	_

#52
The	_	_
cost	_	_
deviation	_	_
is	_	_
3-2=1	_	_
,	_	_
as	_	_
the	_	_
optimal	_	_
cost	_	_
is	_	_
two	_	_
.	_	_

#53
The	_	_
area	_	_
of	_	_
{	_	_
[	_	_
2,3	_	_
]	_	_
×	_	_
[	_	_
2,10	_	_
]	_	_
}	_	_
is	_	_
the	_	_
"	_	_
error	_	_
"	_	_
in	_	_
estimating	_	_
the	_	_
supported	_	_
QoS	_	_
.	_	_

#54
Any	_	_
request	_	_
with	_	_
the	_	_
QoS	_	_
requirements	_	_
falling	_	_
in	_	_
this	_	_
area	_	_
is	_	_
considered	_	_
as	_	_
infeasible	_	_
but	_	_
actually	_	_
they	_	_
are	_	_
supported	_	_
by	_	_
the	_	_
network	_	_
.	_	_

#55
For	_	_
example	_	_
,	_	_
Request	_	_
(	_	_
2,5	_	_
)	_	_
is	_	_
in	_	_
fact	_	_
feasible	_	_
but	_	_
can	feasibility-options	_
be	_	_
rejected	_	_
by	_	_
any	_	_
approximation	_	_
algorithms	_	_
based	_	_
on	_	_
the	_	_
approximate	_	_
QoS	_	_
in	_	_
Fig	_	_
.	_	_
1	_	_
(	_	_
b	_	_
)	_	_
.	_	_

#56
On	_	_
the	_	_
other	_	_
hand	_	_
,	_	_
in	_	_
Fig	_	_
.	_	_
1	_	_
(	_	_
d	_	_
)	_	_
,	_	_
the	_	_
cost	_	_
deviation	_	_
with	_	_
the	_	_
delay	_	_
constraint	_	_
of	_	_
two	_	_
is	_	_
also	_	_
one	_	_
.	_	_

#57
However	_	_
,	_	_
we	_	_
can	feasibility-rhetorical	_
observe	_	_
that	_	_
the	_	_
"	_	_
error	_	_
"	_	_
in	_	_
Fig	_	_
.	_	_
1	_	_
(	_	_
d	_	_
)	_	_
is	_	_
much	_	_
smaller	_	_
than	_	_
that	_	_
in	_	_
Fig	_	_
.	_	_
1	_	_
(	_	_
b	_	_
)	_	_
.	_	_

#58
Request	_	_
(	_	_
2,5	_	_
)	_	_
would	_	_
be	_	_
correctly	_	_
classified	_	_
as	_	_
feasible	_	_
.	_	_

#59
Thus	_	_
,	_	_
the	_	_
approximate	_	_
supported	_	_
QoS	_	_
in	_	_
Fig	_	_
.	_	_
1	_	_
(	_	_
d	_	_
)	_	_
provides	_	_
a	_	_
better	_	_
network	_	_
QoS	_	_
providence	_	_
than	_	_
that	_	_
in	_	_
Fig	_	_
.	_	_
1	_	_
(	_	_
b	_	_
)	_	_
.	_	_

#60
The	_	_
above	_	_
example	_	_
illustrates	_	_
that	_	_
cost	_	_
deviation	_	_
can	capability	negation
not	_	_
sufficiently	_	_
reflect	_	_
the	_	_
admission	_	_
control	_	_
ability	_	_
of	_	_
the	_	_
algorithm	_	_
,	_	_
while	_	_
the	_	_
"	_	_
area	_	_
"	_	_
does	_	_
.	_	_

#61
In	_	_
this	_	_
work	_	_
,	_	_
we	_	_
propose	_	_
a	_	_
new	_	_
metric	_	_
,	_	_
known	_	_
as	_	_
distortion	_	_
area	_	_
,	_	_
which	_	_
is	_	_
defined	_	_
as	_	_
the	_	_
difference	_	_
between	_	_
the	_	_
approximate	_	_
supported	_	_
QoS	_	_
region	_	_
and	_	_
the	_	_
optimal	_	_
supported	_	_
QoS	_	_
region	_	_
,	_	_
to	_	_
evaluate	_	_
the	_	_
accuracy	_	_
performance	_	_
of	_	_
the	_	_
algorithm	_	_
for	_	_
estimating	_	_
the	_	_
supported	_	_
QoS	_	_
.	_	_

#62
We	_	_
first	_	_
analyze	_	_
the	_	_
distortion	_	_
area	_	_
of	_	_
the	_	_
representative	_	_
algorithms	_	_
described	_	_
in	_	_
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
and	_	_
Xue	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2007	_	_
)	_	_
.	_	_

#63
Then	_	_
,	_	_
we	_	_
illustrate	_	_
how	_	_
to	_	_
improve	_	_
the	_	_
algorithm	_	_
to	_	_
reduce	_	_
the	_	_
error	_	_
.	_	_

#64
Related	_	_
work	_	_
The	_	_
MCP	_	_
problem	_	_
and	_	_
RSP	_	_
(	_	_
DCLC	_	_
)	_	_
problem	_	_
have	_	_
been	_	_
studied	_	_
extensively	_	_
(	_	_
Garroppo	_	_
et	_	_
al.	_	_
,	_	_
2010	_	_
)	_	_
.	_	_

#65
The	_	_
work	_	_
in	_	_
Hassin	_	_
(	_	_
1992	_	_
)	_	_
focuses	_	_
on	_	_
the	_	_
RSP	_	_
problem	_	_
and	_	_
presents	_	_
two	_	_
polynomial	_	_
algorithms	_	_
.	_	_

#66
The	_	_
author	_	_
first	_	_
presented	_	_
an	_	_
ε-approximation	_	_
algorithm	_	_
by	_	_
using	_	_
the	_	_
basic	_	_
technique	_	_
of	_	_
rounding	_	_
and	_	_
scaling	_	_
with	_	_
the	_	_
time	_	_
complexity	_	_
O	_	_
(	_	_
loglog	_	_
(	_	_
UBLB	_	_
)	_	_
(	_	_
|E|	_	_
(	_	_
n/ε	_	_
)	_	_
+loglog	_	_
(	_	_
UBLB	_	_
)	_	_
)	_	_
)	_	_
,	_	_
where	_	_
UB	_	_
and	_	_
LB	_	_
are	_	_
the	_	_
cost	_	_
metrics	_	_
of	_	_
the	_	_
minimum	_	_
delay	_	_
path	_	_
and	_	_
the	_	_
minimum	_	_
cost	_	_
path	_	_
,	_	_
respectively	_	_
,	_	_
|E|	_	_
is	_	_
the	_	_
number	_	_
of	_	_
links	_	_
,	_	_
and	_	_
n	_	_
is	_	_
the	_	_
number	_	_
of	_	_
nodes	_	_
.	_	_

#67
Then	_	_
,	_	_
the	_	_
author	_	_
applied	_	_
the	_	_
basic	_	_
technique	_	_
of	_	_
interval	_	_
partitioning	_	_
in	_	_
Sahni	_	_
(	_	_
1977	_	_
)	_	_
to	_	_
design	_	_
a	_	_
second	_	_
ε-approximation	_	_
algorithm	_	_
with	_	_
the	_	_
time	_	_
complexity	_	_
of	_	_
O	_	_
(	_	_
|E|	_	_
(	_	_
n2/ε	_	_
)	_	_
log	_	_
(	_	_
n/ε	_	_
)	_	_
)	_	_
.	_	_

#68
Since	_	_
the	_	_
time	_	_
complexity	_	_
of	_	_
the	_	_
first	_	_
algorithm	_	_
depends	_	_
on	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
delay	_	_
metric	_	_
of	_	_
each	_	_
link	_	_
,	_	_
this	_	_
algorithm	_	_
is	_	_
classified	_	_
in	_	_
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
as	_	_
a	_	_
pseudo-polynomial	_	_
algorithm	_	_
.	_	_

#69
To	_	_
the	_	_
best	_	_
of	_	_
our	_	_
knowledge	_	_
,	_	_
the	_	_
algorithm	_	_
in	_	_
Xue	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2007	_	_
)	_	_
is	_	_
currently	_	_
fastest	_	_
one	_	_
for	_	_
precomputing	_	_
the	_	_
supported	_	_
QoS	_	_
with	_	_
two	_	_
additive	_	_
constraints	_	_
,	_	_
which	_	_
has	_	_
the	_	_
complexity	_	_
of	_	_
O	_	_
(	_	_
|E|n	_	_
(	_	_
loglogn+1/ε	_	_
)	_	_
)	_	_
,	_	_
where	_	_
ε	_	_
is	_	_
the	_	_
small	_	_
positive	_	_
constant	_	_
.	_	_

#70
The	_	_
smaller	_	_
ε	_	_
,	_	_
the	_	_
higher	_	_
accuracy	_	_
but	_	_
the	_	_
higher	_	_
computational	_	_
overhead	_	_
.	_	_

#71
Chen	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2008	_	_
)	_	_
design	_	_
heuristic	_	_
techniques	_	_
to	_	_
improve	_	_
the	_	_
performance	_	_
computational	_	_
overhead	_	_
of	_	_
the	_	_
algorithm	_	_
in	_	_
Goel	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2001	_	_
)	_	_
.As	_	_
we	_	_
know	_	_
,	_	_
heuristic	_	_
algorithm	_	_
can	capability	negation
not	_	_
provide	_	_
performance	_	_
guarantees	_	_
and	_	_
the	_	_
introduced	_	_
approximation	_	_
error	_	_
is	_	_
difficult	_	_
to	_	_
be	_	_
bounded	_	_
.	_	_

#72
Xue	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2008	_	_
)	_	_
study	_	_
the	_	_
decision	_	_
version	_	_
of	_	_
the	_	_
problem	_	_
.	_	_

#73
Given	_	_
a	_	_
connection	_	_
request	_	_
with	_	_
two	_	_
additive	_	_
constraints	_	_
,	_	_
the	_	_
proposed	_	_
algorithm	_	_
either	_	_
finds	_	_
a	_	_
feasible	_	_
solution	_	_
or	_	_
confirms	_	_
that	_	_
there	_	_
does	_	_
not	_	_
exist	_	_
a	_	_
source-destination	_	_
path	_	_
whose	_	_
first	_	_
metric	_	_
is	_	_
bounded	_	_
by	_	_
the	_	_
first	_	_
constraint	_	_
and	_	_
whose	_	_
second	_	_
weight	_	_
is	_	_
bounded	_	_
by	_	_
(	_	_
1-ε	_	_
)	_	_
times	_	_
the	_	_
second	_	_
constraint	_	_
.	_	_

#74
Afterwards	_	_
,	_	_
Huang	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2012	_	_
)	_	_
enhance	_	_
the	_	_
algorithm	_	_
proposed	_	_
by	_	_
Xue	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2008	_	_
)	_	_
by	_	_
reducing	_	_
the	_	_
computational	_	_
complexity	_	_
.	_	_

#75
Li	_	_
and	_	_
Zhang	_	_
(	_	_
2010	_	_
)	_	_
study	_	_
MCP	_	_
problem	_	_
in	_	_
smart	_	_
grid	_	_
and	_	_
propose	_	_
a	_	_
simple	_	_
heuristic	_	_
algorithm	_	_
.	_	_

#76
Avallone	_	_
and	_	_
Ventre	_	_
(	_	_
2012	_	_
)	_	_
develop	_	_
a	_	_
routing	_	_
algorithm	_	_
which	_	_
searches	_	_
for	_	_
a	_	_
feasible	_	_
path	_	_
for	_	_
a	_	_
given	_	_
flow	_	_
request	_	_
with	_	_
multiple	_	_
additive	_	_
constraints	_	_
that	_	_
requires	_	_
the	_	_
least	_	_
number	_	_
of	_	_
nodes	_	_
and	_	_
links	_	_
to	_	_
be	_	_
turned	_	_
on	_	_
.	_	_

#77
Lu	_	_
and	_	_
Zhu	_	_
(	_	_
2013	_	_
)	_	_
present	_	_
a	_	_
genetic	_	_
algorithm	_	_
to	_	_
find	_	_
a	_	_
path	_	_
satisfying	_	_
a	_	_
connection	_	_
request	_	_
with	_	_
two	_	_
additive	_	_
constraints	_	_
.	_	_

#78
With	_	_
the	_	_
supported	_	_
QoS	_	_
region	_	_
,	_	_
the	_	_
decision	_	_
can	feasibility	_
be	_	_
made	_	_
immediately	_	_
based	_	_
on	_	_
the	_	_
QoS	_	_
requirements	_	_
.	_	_

#79
In	_	_
fact	_	_
,	_	_
the	_	_
common	_	_
technique	_	_
used	_	_
for	_	_
designing	_	_
approximation	_	_
algorithms	_	_
(	_	_
for	_	_
solving	_	_
both	_	_
RSP	_	_
and	_	_
MCP	_	_
)	_	_
is	_	_
to	_	_
map	_	_
the	_	_
cost	_	_
(	_	_
or	_	_
delay	_	_
)	_	_
value	_	_
of	_	_
each	_	_
link	_	_
to	_	_
an	_	_
integer	_	_
.	_	_

#80
Then	_	_
,	_	_
the	_	_
cost	_	_
(	_	_
or	_	_
delay	_	_
)	_	_
of	_	_
a	_	_
path	_	_
becomes	_	_
a	_	_
value	_	_
in	_	_
a	_	_
finite	_	_
set	_	_
of	_	_
integers	_	_
instead	_	_
of	_	_
the	_	_
continuous	_	_
real	_	_
number	_	_
line	_	_
.	_	_

#81
We	_	_
refer	_	_
this	_	_
technique	_	_
as	_	_
quantization	_	_
.	_	_

#82
For	_	_
example	_	_
,	_	_
in	_	_
the	_	_
uniform	_	_
scaling	_	_
quantization	_	_
method	_	_
,	_	_
a	_	_
link	_	_
cost	_	_
is	_	_
multiplied	_	_
by	_	_
a	_	_
constant	_	_
and	_	_
then	_	_
round	_	_
(	_	_
up	_	_
or	_	_
down	_	_
)	_	_
to	_	_
an	_	_
integer	_	_
.	_	_

#83
Moreover	_	_
,	_	_
there	_	_
is	_	_
another	_	_
quantization	_	_
method	_	_
called	_	_
logarithmic	_	_
scaling	_	_
(	_	_
Orda	_	_
and	_	_
Sprintson	_	_
,	_	_
2003	_	_
)	_	_
,	_	_
and	_	_
we	_	_
shall	_	_
describe	_	_
it	_	_
in	_	_
more	_	_
detail	_	_
later	_	_
.	_	_

#84
After	_	_
quantizing	_	_
the	_	_
link	_	_
costs	_	_
(	_	_
delays	_	_
)	_	_
,	_	_
we	_	_
can	feasibility	_
apply	_	_
the	_	_
approximation	_	_
algorithm	_	_
to	_	_
solve	_	_
RSP	_	_
for	_	_
each	_	_
possible	_	_
cost	_	_
(	_	_
or	_	_
delay	_	_
)	_	_
constraint	_	_
to	_	_
get	_	_
the	_	_
ACOP	_	_
solution	_	_
(	_	_
Orda	_	_
and	_	_
Sprintson	_	_
,	_	_
2003	_	_
)	_	_
.	_	_

#85
Unfortunately	_	_
,	_	_
the	_	_
complexity	_	_
will	_	_
be	_	_
very	_	_
high	_	_
,	_	_
and	_	_
thus	_	_
the	_	_
authors	_	_
in	_	_
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
developed	_	_
a	_	_
less	_	_
computationally	_	_
expensive	_	_
approximation	_	_
algorithm	_	_
.	_	_

#86
Nevertheless	_	_
,	_	_
the	_	_
performance	_	_
analysis	_	_
presented	_	_
in	_	_
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
is	_	_
based	_	_
on	_	_
cost	_	_
deviation	_	_
,	_	_
but	_	_
not	_	_
on	_	_
distortion	_	_
area	_	_
.	_	_

#87
In	_	_
this	_	_
paper	_	_
,	_	_
we	_	_
shall	_	_
analyze	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
distortion	_	_
area	_	_
produced	_	_
by	_	_
the	_	_
approximation	_	_
algorithm	_	_
in	_	_
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
.	_	_

#88
Nevertheless	_	_
,	_	_
the	_	_
analysis	_	_
can	feasibility	_
be	_	_
generalized	_	_
for	_	_
other	_	_
approximation	_	_
algorithms	_	_
based	_	_
on	_	_
link	_	_
metric	_	_
quantization	_	_
.	_	_

#89
Cui	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2003	_	_
,	_	_
2005	_	_
)	_	_
also	_	_
study	_	_
the	_	_
problem	_	_
of	_	_
precomputing	_	_
the	_	_
supported	_	_
QoS	_	_
.	_	_

#90
The	_	_
proposed	_	_
mechanisms	_	_
are	_	_
heuristic	_	_
and	_	_
there	_	_
is	_	_
no	_	_
performance	_	_
guarantee	_	_
.	_	_

#91
There	_	_
are	_	_
two	_	_
kinds	_	_
of	_	_
errors	_	_
for	_	_
admission	_	_
control	_	_
in	_	_
these	_	_
algorithms	_	_
.	_	_

#92
The	_	_
first	_	_
one	_	_
is	_	_
when	_	_
an	_	_
algorithm	_	_
rejects	_	_
a	_	_
feasible	_	_
connection	_	_
request	_	_
,	_	_
and	_	_
the	_	_
second	_	_
one	_	_
is	_	_
whenever	_	_
an	_	_
algorithm	_	_
accepts	_	_
an	_	_
infeasible	_	_
connection	_	_
request	_	_
.	_	_

#93
The	_	_
"	_	_
error	_	_
"	_	_
defined	_	_
in	_	_
Cui	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2003	_	_
,	_	_
2005	_	_
)	_	_
includes	_	_
both	_	_
kinds	_	_
of	_	_
errors	_	_
.	_	_

#94
Since	_	_
the	_	_
quantization-based	_	_
algorithms	_	_
presented	_	_
in	_	_
our	_	_
work	_	_
will	_	_
not	_	_
accept	_	_
an	_	_
infeasible	_	_
connection	_	_
request	_	_
,	_	_
they	_	_
will	_	_
not	_	_
introduce	_	_
the	_	_
second	_	_
kind	_	_
of	_	_
error	_	_
.	_	_

#95
Therefore	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
presented	_	_
by	_	_
our	_	_
work	_	_
is	_	_
suitable	_	_
to	_	_
reflect	_	_
the	_	_
admission	_	_
control	_	_
performance	_	_
of	_	_
the	_	_
algorithms	_	_
.	_	_

#96
Network	_	_
model	_	_
and	_	_
problem	_	_
formulation	_	_
We	_	_
model	_	_
a	_	_
computer	_	_
network	_	_
by	_	_
a	_	_
directed	_	_
graph	_	_
G=	_	_
(	_	_
V	_	_
,	_	_
E	_	_
)	_	_
,	_	_
where	_	_
V	_	_
is	_	_
the	_	_
set	_	_
of	_	_
n	_	_
vertices	_	_
,	_	_
and	_	_
E	_	_
is	_	_
the	_	_
set	_	_
of	_	_
m	_	_
edges	_	_
.	_	_

#97
Each	_	_
edge	_	_
l=	_	_
(	_	_
u	_	_
,	_	_
v	_	_
)	_	_
is	_	_
associated	_	_
with	_	_
two	_	_
additive	_	_
metrics	_	_
,	_	_
namely	_	_
,	_	_
cost	_	_
and	_	_
delay	_	_
.	_	_

#98
Let	_	_
(	_	_
cl	_	_
,	_	_
dl	_	_
)	_	_
be	_	_
the	_	_
QoS	_	_
parameter	_	_
of	_	_
Edge	_	_
l	_	_
,	_	_
where	_	_
cl	_	_
and	_	_
dl	_	_
are	_	_
the	_	_
cost	_	_
and	_	_
delay	_	_
of	_	_
l	_	_
,	_	_
respectively	_	_
.	_	_

#99
We	_	_
assume	_	_
that	_	_
all	_	_
parameters	_	_
(	_	_
cost	_	_
and	_	_
delay	_	_
)	_	_
are	_	_
positive	_	_
,	_	_
bounded	_	_
,	_	_
and	_	_
independent	_	_
.	_	_

#100
Let	_	_
A	_	_
(	_	_
v	_	_
)	_	_
be	_	_
the	_	_
node	_	_
neighbor	_	_
set	_	_
of	_	_
v.	_	_
We	_	_
define	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
of	_	_
Link	_	_
l	_	_
,	_	_
Dlopt	_	_
(	_	_
c	_	_
)	_	_
,	_	_
to	_	_
specify	_	_
the	_	_
minimum	_	_
delay	_	_
value	_	_
provided	_	_
by	_	_
link	_	_
l	_	_
at	_	_
the	_	_
cost	_	_
constraint	_	_
of	_	_
c.	_	_
Thus	_	_
,	_	_
Dlopt	_	_
(	_	_
c	_	_
)	_	_
is	_	_
equal	_	_
to	_	_
∞	_	_
if	_	_
c	_	_
<	_	_
cl	_	_
,	_	_
otherwise	_	_
,	_	_
it	_	_
is	_	_
equal	_	_
to	_	_
dl	_	_
if	_	_
c≥cl	_	_
.	_	_

#101
Given	_	_
a	_	_
path	_	_
P	_	_
from	_	_
s	_	_
to	_	_
g	_	_
,	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
of	_	_
Path	_	_
P	_	_
,	_	_
DPopt	_	_
(	_	_
c	_	_
)	_	_
,	_	_
is	_	_
the	_	_
minimum	_	_
delay	_	_
value	_	_
provided	_	_
by	_	_
this	_	_
path	_	_
with	_	_
a	_	_
cost	_	_
constraint	_	_
of	_	_
c.	_	_
Thus	_	_
,	_	_
DPopt	_	_
(	_	_
c	_	_
)	_	_
is	_	_
equal	_	_
to	_	_
∞	_	_
if	_	_
c	_	_
<	_	_
∑l∈Pcl	_	_
,	_	_
otherwise	_	_
,	_	_
it	_	_
is	_	_
equal	_	_
to	_	_
∑l∈Pdl	_	_
.	_	_

#102
Let	_	_
Ps→g	_	_
be	_	_
the	_	_
set	_	_
of	_	_
paths	_	_
from	_	_
s	_	_
to	_	_
g.	_	_
We	_	_
define	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
from	_	_
s	_	_
to	_	_
g	_	_
,	_	_
Ds	_	_
,	_	_
gopt	_	_
(	_	_
c	_	_
)	_	_
,	_	_
which	_	_
is	_	_
the	_	_
minimum	_	_
delay	_	_
value	_	_
provided	_	_
by	_	_
all	_	_
the	_	_
paths	_	_
from	_	_
s	_	_
to	_	_
g	_	_
with	_	_
the	_	_
cost	_	_
constraint	_	_
of	_	_
c	_	_
,	_	_
as	_	_
Ds	_	_
,	_	_
gopt	_	_
(	_	_
c	_	_
)	_	_
=minP∈Ps→g	_	_
{	_	_
DPopt	_	_
(	_	_
c	_	_
)	_	_
}	_	_
.	_	_

#103
Consider	_	_
a	_	_
simple	_	_
network	_	_
in	_	_
Fig	_	_
.	_	_
2	_	_
(	_	_
a	_	_
)	_	_
.	_	_

#104
PA→G	_	_
has	_	_
six	_	_
paths	_	_
:	_	_
Path	_	_
A→D→F→G	_	_
with	_	_
the	_	_
QoS	_	_
parameter	_	_
(	_	_
4,7	_	_
)	_	_
,	_	_
Path	_	_
A→C→F→G	_	_
with	_	_
the	_	_
QoS	_	_
parameter	_	_
(	_	_
5,6	_	_
)	_	_
,	_	_
Path	_	_
A→D→C→F→G	_	_
with	_	_
the	_	_
QoS	_	_
parameter	_	_
(	_	_
5,10	_	_
)	_	_
,	_	_
Path	_	_
A→C→E→G	_	_
with	_	_
the	_	_
QoS	_	_
parameter	_	_
(	_	_
7,5	_	_
)	_	_
,	_	_
Path	_	_
A→D→C→E→G	_	_
with	_	_
the	_	_
QoS	_	_
parameter	_	_
(	_	_
7,9	_	_
)	_	_
,	_	_
and	_	_
Path	_	_
A→B→E→G	_	_
with	_	_
the	_	_
QoS	_	_
parameter	_	_
(	_	_
8,4	_	_
)	_	_
.	_	_

#105
For	_	_
the	_	_
given	_	_
path	_	_
P1=A→B→E→G	_	_
,	_	_
the	_	_
corresponding	_	_
optimal	_	_
delay	_	_
function	_	_
is	_	_
DP1opt	_	_
(	_	_
c	_	_
)	_	_
=∞	_	_
(	_	_
ifc	_	_
<	_	_
8	_	_
)	_	_
or4	_	_
(	_	_
ifc≥8	_	_
)	_	_
.	_	_

#106
We	_	_
can	feasibility-rhetorical	_
compute	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
DA	_	_
,	_	_
Gopt	_	_
(	_	_
c	_	_
)	_	_
from	_	_
A	_	_
to	_	_
G	_	_
based	_	_
on	_	_
minP∈PA→G	_	_
{	_	_
DPopt	_	_
(	_	_
c	_	_
)	_	_
}	_	_
,	_	_
which	_	_
is	_	_
DA	_	_
,	_	_
Gopt	_	_
(	_	_
c	_	_
)	_	_
=	_	_
{	_	_
4ifc≥85if7≤c	_	_
<	_	_
86if5≤c	_	_
<	_	_
77if4≤c	_	_
<	_	_
5∞ifc	_	_
<	_	_
4	_	_
As	_	_
illustrated	_	_
in	_	_
Fig	_	_
.	_	_
2	_	_
(	_	_
b	_	_
)	_	_
,	_	_
DA	_	_
,	_	_
Gopt	_	_
(	_	_
c	_	_
)	_	_
is	_	_
a	_	_
staircase	_	_
on	_	_
the	_	_
cost-delay	_	_
plane	_	_
,	_	_
which	_	_
is	_	_
also	_	_
called	_	_
the	_	_
efficient	_	_
frontier	_	_
in	_	_
Bauer	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2000	_	_
)	_	_
.	_	_

#107
We	_	_
would	_	_
like	_	_
to	_	_
introduce	_	_
several	_	_
definitions.Definition	_	_
1	_	_
A	_	_
point	_	_
(	_	_
x	_	_
,	_	_
y	_	_
)	_	_
is	_	_
more	_	_
representative	_	_
than	_	_
another	_	_
point	_	_
(	_	_
x′	_	_
,	_	_
y′	_	_
)	_	_
,	_	_
denoted	_	_
by	_	_
(	_	_
x	_	_
,	_	_
y	_	_
)	_	_
≺	_	_
(	_	_
x′	_	_
,	_	_
y′	_	_
)	_	_
,	_	_
if	_	_
x≠x′	_	_
or	_	_
y≠y′	_	_
,	_	_
moreover	_	_
,	_	_
x≤x′	_	_
and	_	_
y≤y′	_	_
.	_	_

#108
Definition	_	_
2	_	_
Given	_	_
a	_	_
set	_	_
S	_	_
of	_	_
the	_	_
QoS	_	_
parameters	_	_
,	_	_
(	_	_
x	_	_
,	_	_
y	_	_
)	_	_
∈S	_	_
is	_	_
a	_	_
representative	_	_
point	_	_
of	_	_
S	_	_
if	_	_
there	_	_
does	_	_
not	_	_
exist	_	_
any	_	_
other	_	_
point	_	_
(	_	_
x′	_	_
,	_	_
y′	_	_
)	_	_
∈S	_	_
such	_	_
that	_	_
(	_	_
x′	_	_
,	_	_
y′	_	_
)	_	_
≺	_	_
(	_	_
x	_	_
,	_	_
y	_	_
)	_	_
.	_	_

#109
For	_	_
example	_	_
,	_	_
in	_	_
Fig	_	_
.	_	_
2	_	_
(	_	_
b	_	_
)	_	_
,	_	_
there	_	_
are	_	_
totally	_	_
six	_	_
QoS	_	_
parameters	_	_
,	_	_
but	_	_
four	_	_
of	_	_
them	_	_
,	_	_
namely	_	_
,	_	_
(	_	_
4,7	_	_
)	_	_
,	_	_
(	_	_
5,6	_	_
)	_	_
,	_	_
(	_	_
7,5	_	_
)	_	_
,	_	_
and	_	_
(	_	_
8,4	_	_
)	_	_
,	_	_
are	_	_
the	_	_
optimal	_	_
representative	_	_
points.11	_	_
The	_	_
set	_	_
of	_	_
the	_	_
representative	_	_
points	_	_
is	_	_
called	_	_
the	_	_
non-dominated	_	_
front	_	_
(	_	_
or	_	_
Pareto	_	_
front	_	_
)	_	_
.	_	_

#110
The	_	_
corresponding	_	_
paths	_	_
of	_	_
the	_	_
representative	_	_
points	_	_
are	_	_
called	_	_
the	_	_
non-dominated	_	_
paths	_	_
or	_	_
Pareto	_	_
optimal	_	_
paths	_	_
in	_	_
the	_	_
literature	_	_
.	_	_

#111
Denote	_	_
PFs	_	_
,	_	_
gopt	_	_
as	_	_
the	_	_
set	_	_
of	_	_
representative	_	_
points	_	_
on	_	_
the	_	_
efficient	_	_
frontier	_	_
from	_	_
s	_	_
to	_	_
g.	_	_
In	_	_
Fig	_	_
.	_	_
2	_	_
(	_	_
b	_	_
)	_	_
,	_	_
PFA	_	_
,	_	_
Gopt=	_	_
{	_	_
(	_	_
4,7	_	_
)	_	_
,	_	_
(	_	_
5,6	_	_
)	_	_
,	_	_
(	_	_
7,5	_	_
)	_	_
,	_	_
(	_	_
8,4	_	_
)	_	_
}	_	_
.	_	_

#112
Definition	_	_
3	_	_
Given	_	_
a	_	_
set	_	_
of	_	_
the	_	_
optimal	_	_
representative	_	_
points	_	_
PFopt	_	_
,	_	_
define	_	_
R=	_	_
{	_	_
(	_	_
c	_	_
,	_	_
d	_	_
)	_	_
|	_	_
(	_	_
c′	_	_
,	_	_
d′	_	_
)	_	_
≺	_	_
(	_	_
c	_	_
,	_	_
d	_	_
)	_	_
,	_	_
(	_	_
c′	_	_
,	_	_
d′	_	_
)	_	_
∈PFopt	_	_
}	_	_
.	_	_

#113
The	_	_
feasible	_	_
area	_	_
is	_	_
defined	_	_
as	_	_
Afeasibleopt=R∪PFopt	_	_
.	_	_

#114
Definition	_	_
3	_	_
was	_	_
also	_	_
described	_	_
in	_	_
Bauer	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2000	_	_
)	_	_
and	_	_
Cui	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2003	_	_
,	_	_
2005	_	_
)	_	_
.	_	_

#115
Any	_	_
request	_	_
that	_	_
falls	_	_
in	_	_
the	_	_
feasible	_	_
area	_	_
must	deontic	_
be	_	_
supported	_	_
by	_	_
at	_	_
least	_	_
one	_	_
path	_	_
.	_	_

#116
We	_	_
call	_	_
this	_	_
request	_	_
a	_	_
feasible	_	_
request	_	_
.	_	_

#117
The	_	_
problem	_	_
of	_	_
precomputing	_	_
the	_	_
supported	_	_
QoS	_	_
aims	_	_
at	_	_
finding	_	_
the	_	_
feasible	_	_
area	_	_
Afeasibleopt	_	_
so	_	_
that	_	_
a	_	_
routing	_	_
table	_	_
can	capability	_
tell	_	_
whether	_	_
a	_	_
request	_	_
is	_	_
feasible	_	_
upon	_	_
a	_	_
request	_	_
arrives	_	_
.	_	_

#118
This	_	_
problem	_	_
is	_	_
NP-complete	_	_
.	_	_

#119
The	_	_
feasible	_	_
area	_	_
can	feasibility	_
be	_	_
uniquely	_	_
defined	_	_
by	_	_
the	_	_
set	_	_
of	_	_
the	_	_
optimal	_	_
representative	_	_
points	_	_
PFopt	_	_
.	_	_

#120
In	_	_
Fig	_	_
.	_	_
2	_	_
(	_	_
b	_	_
)	_	_
,	_	_
the	_	_
shaded	_	_
area	_	_
is	_	_
the	_	_
feasible	_	_
area	_	_
which	_	_
is	_	_
on	_	_
the	_	_
upper	_	_
right	_	_
hand	_	_
side	_	_
of	_	_
the	_	_
efficient	_	_
frontier	_	_
.	_	_

#121
For	_	_
instance	_	_
,	_	_
Request	_	_
(	_	_
10,6	_	_
)	_	_
falls	_	_
in	_	_
the	_	_
shaded	_	_
area	_	_
.	_	_

#122
The	_	_
paths	_	_
(	_	_
8,4	_	_
)	_	_
and	_	_
(	_	_
7,5	_	_
)	_	_
can	capability	_
serve	_	_
this	_	_
request	_	_
.	_	_

#123
Thus	_	_
,	_	_
this	_	_
request	_	_
is	_	_
a	_	_
feasible	_	_
request	_	_
.	_	_

#124
Finding	_	_
the	_	_
optimal	_	_
feasible	_	_
area	_	_
is	_	_
NP-Complete	_	_
(	_	_
Orda	_	_
and	_	_
Sprintson	_	_
,	_	_
2003	_	_
)	_	_
.	_	_

#125
Some	_	_
existing	_	_
works	_	_
propose	_	_
the	_	_
approximation	_	_
algorithms	_	_
to	_	_
estimate	_	_
the	_	_
feasible	_	_
area	_	_
.	_	_

#126
However	_	_
,	_	_
no	_	_
work	_	_
analyzes	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
approximation	_	_
error	_	_
caused	_	_
by	_	_
the	_	_
existing	_	_
works	_	_
,	_	_
which	_	_
is	_	_
called	_	_
distortion	_	_
area	_	_
in	_	_
this	_	_
work	_	_
.	_	_

#127
In	_	_
this	_	_
work	_	_
,	_	_
we	_	_
first	_	_
analyze	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
approximation	_	_
error	_	_
produced	_	_
by	_	_
the	_	_
existing	_	_
quantized	_	_
algorithms	_	_
.	_	_

#128
We	_	_
then	_	_
propose	_	_
a	_	_
new	_	_
method	_	_
to	_	_
estimate	_	_
the	_	_
feasible	_	_
area	_	_
,	_	_
and	_	_
also	_	_
give	_	_
the	_	_
theoretical	_	_
comparison	_	_
between	_	_
the	_	_
existing	_	_
schemes	_	_
and	_	_
our	_	_
proposed	_	_
method	_	_
.	_	_

#129
Analyzing	_	_
the	_	_
distortion	_	_
area	_	_
of	_	_
the	_	_
existing	_	_
algorithms	_	_
In	_	_
this	_	_
section	_	_
,	_	_
we	_	_
first	_	_
present	_	_
an	_	_
exact	_	_
pseudo-polynomial	_	_
algorithm	_	_
for	_	_
computing	_	_
the	_	_
supported	_	_
QoS	_	_
with	_	_
an	_	_
integer	_	_
cost	_	_
metric	_	_
.	_	_

#130
In	_	_
fact	_	_
,	_	_
this	_	_
algorithm	_	_
was	_	_
mentioned	_	_
in	_	_
many	_	_
existing	_	_
literatures	_	_
(	_	_
Hassin	_	_
,	_	_
1992	_	_
;	_	_
Orda	_	_
and	_	_
Sprintson	_	_
,	_	_
2003	_	_
)	_	_
.	_	_

#131
We	_	_
then	_	_
present	_	_
the	_	_
existing	_	_
quantization-based	_	_
methods	_	_
applied	_	_
for	_	_
precomputing	_	_
the	_	_
supported	_	_
QoS	_	_
.	_	_

#132
Finally	_	_
,	_	_
we	_	_
analyze	_	_
the	_	_
performance	_	_
of	_	_
the	_	_
existing	_	_
quantization-based	_	_
algorithms	_	_
based	_	_
on	_	_
the	_	_
proposed	_	_
metric	_	_
,	_	_
distortion	_	_
area	_	_
.	_	_

#133
As	_	_
mentioned	_	_
in	_	_
Section	_	_
1	_	_
,	_	_
distortion	_	_
area	_	_
is	_	_
defined	_	_
as	_	_
the	_	_
difference	_	_
between	_	_
the	_	_
approximate	_	_
supported	_	_
QoS	_	_
region	_	_
calculated	_	_
by	_	_
an	_	_
approximation	_	_
algorithm	_	_
and	_	_
the	_	_
optimal	_	_
supported	_	_
QoS	_	_
region	_	_
.	_	_

#134
For	_	_
instance	_	_
,	_	_
the	_	_
shaded	_	_
area	_	_
in	_	_
Fig	_	_
.	_	_
3	_	_
shows	_	_
the	_	_
optimal	_	_
supported	_	_
QoS	_	_
region	_	_
while	_	_
Fig	_	_
.	_	_
4	_	_
(	_	_
a	_	_
)	_	_
shows	_	_
an	_	_
approximate	_	_
supported	_	_
QoS	_	_
region	_	_
.	_	_

#135
We	_	_
calculate	_	_
the	_	_
shaded	_	_
area	_	_
in	_	_
Fig	_	_
.	_	_
3	_	_
as	_	_
0.44	_	_
while	_	_
that	_	_
in	_	_
Fig	_	_
.	_	_
4	_	_
(	_	_
a	_	_
)	_	_
as	_	_
0.4	_	_
.	_	_

#136
The	_	_
distortion	_	_
area	_	_
caused	_	_
by	_	_
the	_	_
approximation	_	_
algorithm	_	_
is	_	_
0.04	_	_
.	_	_

#137
If	_	_
we	_	_
assume	_	_
that	_	_
the	_	_
requirements	_	_
of	_	_
the	_	_
connection	_	_
request	_	_
are	_	_
uniformly	_	_
distributed	_	_
in	_	_
the	_	_
supported	_	_
QoS	_	_
region	_	_
,	_	_
we	_	_
can	feasibility-rhetorical	_
consider	_	_
that	_	_
almost	_	_
10	_	_
%	_	_
of	_	_
all	_	_
the	_	_
requests	_	_
would	_	_
be	_	_
rejected	_	_
by	_	_
the	_	_
approximation	_	_
algorithm	_	_
,	_	_
while	_	_
these	_	_
requests	_	_
actually	_	_
can	capability	_
be	_	_
supported	_	_
by	_	_
the	_	_
network	_	_
.	_	_

#138
In	_	_
the	_	_
following	_	_
,	_	_
we	_	_
would	_	_
give	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
distortion	_	_
area	_	_
introduced	_	_
by	_	_
different	_	_
algorithms	_	_
.	_	_

#139
Suppose	_	_
that	_	_
we	_	_
arrange	_	_
the	_	_
points	_	_
in	_	_
PFs	_	_
,	_	_
gopt	_	_
in	_	_
cost-ascending	_	_
order	_	_
.	_	_

#140
The	_	_
first	_	_
representative	_	_
point	_	_
rc=	_	_
(	_	_
Lc	_	_
,	_	_
Ud	_	_
)	_	_
corresponds	_	_
to	_	_
the	_	_
minimum	_	_
cost	_	_
path	_	_
,	_	_
and	_	_
the	_	_
last	_	_
representative	_	_
point	_	_
rd=	_	_
(	_	_
Uc	_	_
,	_	_
Ld	_	_
)	_	_
corresponds	_	_
to	_	_
the	_	_
minimum	_	_
delay	_	_
path	_	_
.	_	_

#141
All	_	_
other	_	_
representative	_	_
points	_	_
must	deontic	_
have	_	_
a	_	_
cost	_	_
falling	_	_
between	_	_
Lc	_	_
and	_	_
Uc	_	_
,	_	_
and	_	_
a	_	_
delay	_	_
falling	_	_
between	_	_
Ld	_	_
and	_	_
Ud	_	_
(	_	_
Bauer	_	_
et	_	_
al.	_	_
,	_	_
2000	_	_
)	_	_
.	_	_

#142
If	_	_
we	_	_
obtain	_	_
all	_	_
the	_	_
representative	_	_
points	_	_
,	_	_
we	_	_
can	feasibility	_
derive	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
Ds	_	_
,	_	_
gopt	_	_
(	_	_
c	_	_
)	_	_
,	_	_
and	_	_
vice	_	_
versa	_	_
.	_	_

#143
For	_	_
example	_	_
,	_	_
in	_	_
Fig	_	_
.	_	_
2	_	_
(	_	_
b	_	_
)	_	_
,	_	_
the	_	_
QoS	_	_
parameter	_	_
of	_	_
the	_	_
minimum	_	_
cost	_	_
path	_	_
is	_	_
(	_	_
4,7	_	_
)	_	_
,	_	_
and	_	_
the	_	_
QoS	_	_
parameter	_	_
of	_	_
the	_	_
minimum	_	_
delay	_	_
path	_	_
is	_	_
(	_	_
8,4	_	_
)	_	_
.	_	_

#144
In	_	_
order	_	_
to	_	_
compute	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
DA	_	_
,	_	_
Gopt	_	_
(	_	_
c	_	_
)	_	_
,	_	_
we	_	_
just	_	_
need	_	_
to	_	_
find	_	_
the	_	_
representative	_	_
points	_	_
(	_	_
5,6	_	_
)	_	_
and	_	_
(	_	_
7,5	_	_
)	_	_
,	_	_
which	_	_
have	_	_
the	_	_
costs	_	_
falling	_	_
between	_	_
4	_	_
and	_	_
8	_	_
.	_	_

#145
To	_	_
make	_	_
the	_	_
problem	_	_
tractable	_	_
,	_	_
we	_	_
first	_	_
consider	_	_
that	_	_
the	_	_
cost	_	_
metric	_	_
associated	_	_
with	_	_
each	_	_
link	_	_
is	_	_
integer	_	_
.	_	_

#146
For	_	_
the	_	_
ease	_	_
of	_	_
the	_	_
subsequent	_	_
discussion	_	_
,	_	_
we	_	_
assume	_	_
that	_	_
Uc	_	_
and	_	_
Ud	_	_
are	_	_
the	_	_
same	_	_
,	_	_
denoted	_	_
by	_	_
UB	_	_
,	_	_
and	_	_
Lc	_	_
and	_	_
Ld	_	_
are	_	_
the	_	_
same	_	_
,	_	_
denoted	_	_
by	_	_
LB=1	_	_
.	_	_

#147
Exact	_	_
algorithm	_	_
Similar	_	_
to	_	_
Hassin	_	_
(	_	_
1992	_	_
)	_	_
and	_	_
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
,	_	_
we	_	_
assume	_	_
that	_	_
,	_	_
for	_	_
simplicity	_	_
,	_	_
network	_	_
can	capability-feasibility	_
be	_	_
represented	_	_
by	_	_
a	_	_
directed	_	_
acyclic	_	_
graph	_	_
(	_	_
DAG	_	_
)	_	_
.	_	_

#148
The	_	_
extension	_	_
of	_	_
the	_	_
algorithm	_	_
for	_	_
a	_	_
general	_	_
graph	_	_
is	_	_
straightforward	_	_
.	_	_

#149
In	_	_
DAG	_	_
,	_	_
the	_	_
network	_	_
nodes	_	_
are	_	_
numbered	_	_
in	_	_
a	_	_
way	_	_
such	_	_
that	_	_
(	_	_
i	_	_
,	_	_
j	_	_
)	_	_
∈E	_	_
implies	_	_
i	_	_
<	_	_
j	_	_
.	_	_

#150
If	_	_
the	_	_
cost	_	_
metric	_	_
of	_	_
each	_	_
link	_	_
is	_	_
an	_	_
integer	_	_
,	_	_
we	_	_
can	feasibility	_
develop	_	_
a	_	_
pseudo-polynomial	_	_
algorithm	_	_
for	_	_
computing	_	_
the	_	_
supported	_	_
QoS	_	_
as	_	_
follows	_	_
:	_	_
(	_	_
1	_	_
)	_	_
Dg	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
←0	_	_
,	_	_
c≥0	_	_
;	_	_
Di	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
←∞	_	_
,	_	_
c≥0	_	_
,	_	_
i∈Vâ§¹	_	_
{	_	_
g	_	_
}	_	_
;	_	_
Di	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
=mink∈A	_	_
(	_	_
i	_	_
)	_	_
{	_	_
Dk	_	_
,	_	_
g	_	_
(	_	_
c-c	_	_
(	_	_
i	_	_
,	_	_
k	_	_
)	_	_
)	_	_
+d	_	_
(	_	_
i	_	_
,	_	_
k	_	_
)	_	_
,	_	_
Di	_	_
,	_	_
g	_	_
(	_	_
c-1	_	_
)	_	_
}	_	_
c=0,1,2,3	_	_
,	_	_
…	_	_
,	_	_
UB	_	_
,	_	_
i∈V	_	_
.	_	_

#151
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
and	_	_
Hassin	_	_
(	_	_
1992	_	_
)	_	_
give	_	_
the	_	_
pseudo-polynomial	_	_
algorithm	_	_
description	_	_
as	_	_
the	_	_
same	_	_
as	_	_
(	_	_
1	_	_
)	_	_
.	_	_

#152
To	_	_
compute	_	_
{	_	_
Di	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
,	_	_
c≥0	_	_
}	_	_
for	_	_
all	_	_
i∈V	_	_
,	_	_
we	_	_
keep	_	_
a	_	_
table	_	_
of	_	_
|V|	_	_
rows	_	_
and	_	_
UB	_	_
columns	_	_
,	_	_
where	_	_
one	_	_
row	_	_
for	_	_
each	_	_
node	_	_
and	_	_
one	_	_
column	_	_
for	_	_
each	_	_
integer	_	_
cost	_	_
value	_	_
.	_	_

#153
To	_	_
ease	_	_
our	_	_
discussion	_	_
,	_	_
we	_	_
label	_	_
the	_	_
nodes	_	_
as	_	_
1,2	_	_
,	_	_
…	_	_
,	_	_
|V|	_	_
.	_	_

#154
The	_	_
entry	_	_
on	_	_
Row	_	_
i	_	_
and	_	_
Column	_	_
j	_	_
represents	_	_
the	_	_
estimated	_	_
delay	_	_
from	_	_
Node	_	_
i	_	_
to	_	_
Node	_	_
g	_	_
at	_	_
Cost	_	_
j.	_	_
Initially	_	_
,	_	_
Dg	_	_
,	_	_
g	_	_
(	_	_
j	_	_
)	_	_
,	_	_
for	_	_
all	_	_
j=0,1	_	_
,	_	_
…	_	_
,	_	_
UB	_	_
,	_	_
are	_	_
all	_	_
set	_	_
to	_	_
be	_	_
zero	_	_
while	_	_
Di	_	_
,	_	_
g	_	_
(	_	_
j	_	_
)	_	_
,	_	_
for	_	_
all	_	_
i≠g	_	_
and	_	_
j=0,1	_	_
,	_	_
…	_	_
,	_	_
UB	_	_
,	_	_
are	_	_
all	_	_
set	_	_
to	_	_
be	_	_
infinity	_	_
.	_	_

#155
In	_	_
the	_	_
first	_	_
step	_	_
,	_	_
each	_	_
neighbor	_	_
u	_	_
of	_	_
g	_	_
sets	_	_
Du	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
to	_	_
be	_	_
du	_	_
,	_	_
g	_	_
,	_	_
where	_	_
c=cu	_	_
,	_	_
g	_	_
,	_	_
cu	_	_
,	_	_
g+1	_	_
,	_	_
…	_	_
,	_	_
UB	_	_
.	_	_

#156
In	_	_
step	_	_
k	_	_
,	_	_
we	_	_
update	_	_
{	_	_
Di	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
,	_	_
c≥0	_	_
}	_	_
for	_	_
those	_	_
nodes	_	_
i	_	_
that	_	_
can	options	_
be	_	_
k	_	_
hops	_	_
away	_	_
from	_	_
g.	_	_
After	_	_
|V|-1	_	_
steps	_	_
,	_	_
the	_	_
algorithm	_	_
terminates	_	_
since	_	_
no	_	_
path	_	_
can	capability	negation
have	_	_
more	_	_
than	_	_
(	_	_
|V|-1	_	_
)	_	_
hops	_	_
.	_	_

#157
As	_	_
referred	_	_
to	_	_
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
,	_	_
the	_	_
computational	_	_
complexity	_	_
of	_	_
this	_	_
pseudo-polynomial	_	_
algorithm	_	_
is	_	_
O	_	_
(	_	_
|E|UB	_	_
)	_	_
.	_	_

#158
Existing	_	_
quantization-based	_	_
algorithms	_	_
In	_	_
general	_	_
,	_	_
cost	_	_
values	_	_
are	_	_
not	_	_
necessarily	_	_
integers	_	_
.	_	_

#159
The	_	_
cost	_	_
value	_	_
of	_	_
each	_	_
link	_	_
is	_	_
quantized	_	_
such	_	_
that	_	_
it	_	_
is	_	_
selected	_	_
from	_	_
a	_	_
set	_	_
of	_	_
possible	_	_
values	_	_
,	_	_
instead	_	_
of	_	_
the	_	_
continuous	_	_
real	_	_
number	_	_
line	_	_
.	_	_

#160
Given	_	_
the	_	_
lower	_	_
bound	_	_
and	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
cost	_	_
values	_	_
Lc	_	_
and	_	_
Uc	_	_
,	_	_
we	_	_
obtain	_	_
a	_	_
set	_	_
of	_	_
possible	_	_
quantized	_	_
cost	_	_
values	_	_
,	_	_
denoted	_	_
by	_	_
{	_	_
s1	_	_
,	_	_
s2	_	_
,	_	_
…	_	_
,	_	_
sn	_	_
}	_	_
.	_	_

#161
We	_	_
then	_	_
assume	_	_
that	_	_
each	_	_
link	_	_
or	_	_
path	_	_
cost	_	_
is	_	_
one	_	_
of	_	_
the	_	_
quantized	_	_
values	_	_
.	_	_

#162
For	_	_
instance	_	_
,	_	_
if	_	_
the	_	_
cost	_	_
value	_	_
of	_	_
a	_	_
link	_	_
cl	_	_
falls	_	_
between	_	_
sj	_	_
and	_	_
sj+1	_	_
,	_	_
where	_	_
j=1	_	_
,	_	_
…	_	_
,	_	_
n-1	_	_
,	_	_
we	_	_
assume	_	_
cl≈sj+1	_	_
.	_	_

#163
Hence	_	_
,	_	_
we	_	_
can	feasibility-rhetorical	_
use	_	_
(	_	_
1	_	_
)	_	_
to	_	_
compute	_	_
the	_	_
delay	_	_
function	_	_
at	_	_
the	_	_
samples	_	_
.	_	_

#164
We	_	_
thus	_	_
can	feasibility-rhetorical	_
obtain	_	_
the	_	_
approximated	_	_
representative	_	_
points	_	_
based	_	_
on	_	_
the	_	_
quantized	_	_
cost	_	_
values	_	_
.	_	_

#165
We	_	_
call	_	_
this	_	_
method	_	_
the	_	_
quantization-based	_	_
approximation	_	_
method	_	_
.	_	_

#166
As	_	_
mentioned	_	_
in	_	_
Section	_	_
2	_	_
,	_	_
the	_	_
existing	_	_
approximation	_	_
algorithms	_	_
generally	_	_
apply	_	_
this	_	_
quantization	_	_
method	_	_
to	_	_
solve	_	_
the	_	_
NP-complete	_	_
problem	_	_
.	_	_

#167
Different	_	_
algorithms	_	_
can	options	_
indeed	_	_
apply	_	_
different	_	_
quantization	_	_
methods	_	_
(	_	_
Orda	_	_
and	_	_
Sprintson	_	_
,	_	_
2003	_	_
;	_	_
Hassin	_	_
,	_	_
1992	_	_
;	_	_
Lorenz	_	_
and	_	_
Raz	_	_
,	_	_
2001	_	_
;	_	_
Goel	_	_
et	_	_
al.	_	_
,	_	_
2001	_	_
;	_	_
Chen	_	_
et	_	_
al.	_	_
,	_	_
2008	_	_
;	_	_
Sahni	_	_
,	_	_
1977	_	_
;	_	_
Xue	_	_
et	_	_
al.	_	_
,	_	_
2007	_	_
)	_	_
.	_	_

#168
Most	_	_
of	_	_
them	_	_
apply	_	_
uniform	_	_
scaling	_	_
,	_	_
and	_	_
the	_	_
work	_	_
in	_	_
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
applies	_	_
logarithmic	_	_
scaling	_	_
.	_	_

#169
Generally	_	_
speaking	_	_
,	_	_
when	_	_
applying	_	_
uniform	_	_
scaling	_	_
,	_	_
the	_	_
set	_	_
of	_	_
possible	_	_
cost	_	_
values	_	_
is	_	_
denoted	_	_
by	_	_
{	_	_
1	_	_
,	_	_
xδ	_	_
,	_	_
(	_	_
x+1	_	_
)	_	_
δ	_	_
,	_	_
…	_	_
,	_	_
(	_	_
x+m	_	_
)	_	_
δ	_	_
,	_	_
UB	_	_
}	_	_
,	_	_
where	_	_
x=min	_	_
{	_	_
k|	_	_
(	_	_
kδ	_	_
>	_	_
1	_	_
)	_	_
(	_	_
k∈Z+	_	_
)	_	_
}	_	_
,	_	_
and	_	_
m=max	_	_
{	_	_
t|	_	_
(	_	_
(	_	_
x+t	_	_
)	_	_
δ	_	_
<	_	_
UB	_	_
)	_	_
(	_	_
t∈Z+	_	_
)	_	_
}	_	_
.	_	_

#170
δ	_	_
is	_	_
the	_	_
scaling	_	_
parameter	_	_
.	_	_

#171
Different	_	_
methods	_	_
may	options	_
select	_	_
different	_	_
values	_	_
for	_	_
δ.	_	_
We	_	_
shall	_	_
discuss	_	_
how	_	_
to	_	_
calculate	_	_
the	_	_
distortion	_	_
area	_	_
produced	_	_
by	_	_
uniform	_	_
scaling	_	_
with	_	_
the	_	_
given	_	_
scaling	_	_
parameter	_	_
δ.	_	_
In	_	_
logarithmic	_	_
scaling	_	_
,	_	_
the	_	_
cost	_	_
metric	_	_
of	_	_
each	_	_
path	_	_
is	_	_
selected	_	_
from	_	_
{	_	_
1	_	_
,	_	_
(	_	_
1+δ	_	_
)	_	_
,	_	_
(	_	_
1+δ	_	_
)	_	_
2	_	_
,	_	_
…	_	_
,	_	_
(	_	_
1+δ	_	_
)	_	_
n	_	_
,	_	_
UB	_	_
}	_	_
,	_	_
where	_	_
n=max	_	_
{	_	_
j|	_	_
(	_	_
(	_	_
1+δ	_	_
)	_	_
j	_	_
<	_	_
UB	_	_
)	_	_
(	_	_
j∈Z+	_	_
)	_	_
}	_	_
.	_	_

#172
Consider	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
Ds	_	_
,	_	_
gopt	_	_
(	_	_
c	_	_
)	_	_
as	_	_
depicted	_	_
in	_	_
Fig	_	_
.	_	_
3	_	_
.	_	_

#173
Let	_	_
UB=2	_	_
and	_	_
δ=0.2	_	_
.	_	_

#174
By	_	_
using	_	_
logarithmic	_	_
scaling	_	_
,	_	_
there	_	_
are	_	_
three	_	_
samples	_	_
for	_	_
cost	_	_
,	_	_
namely	_	_
,	_	_
1.2	_	_
,	_	_
1.44	_	_
,	_	_
and	_	_
1.728	_	_
.	_	_

#175
From	_	_
Fig	_	_
.	_	_
3	_	_
,	_	_
the	_	_
minimum	_	_
delays	_	_
at	_	_
these	_	_
cost	_	_
values	_	_
are	_	_
2.2	_	_
,	_	_
1.8	_	_
,	_	_
and	_	_
1.3	_	_
.	_	_

#176
We	_	_
thus	_	_
obtain	_	_
the	_	_
resulting	_	_
approximated	_	_
delay	_	_
function	_	_
as	_	_
exhibited	_	_
in	_	_
Fig	_	_
.	_	_
5	_	_
(	_	_
a	_	_
)	_	_
.	_	_

#177
On	_	_
the	_	_
other	_	_
hand	_	_
,	_	_
when	_	_
uniform	_	_
scaling	_	_
is	_	_
used	_	_
,	_	_
there	_	_
are	_	_
four	_	_
samples	_	_
between	_	_
1	_	_
and	_	_
2	_	_
,	_	_
which	_	_
are	_	_
1.2	_	_
,	_	_
1.4	_	_
,	_	_
1.6	_	_
,	_	_
and	_	_
1.8	_	_
.	_	_

#178
The	_	_
resulting	_	_
approximated	_	_
delay	_	_
function	_	_
is	_	_
exhibited	_	_
in	_	_
Fig	_	_
.	_	_
4	_	_
(	_	_
a	_	_
)	_	_
.	_	_

#179
It	_	_
can	feasibility-rhetorical	_
be	_	_
observed	_	_
that	_	_
different	_	_
scaling	_	_
schemes	_	_
lead	_	_
to	_	_
different	_	_
approximated	_	_
delay	_	_
functions	_	_
.	_	_

#180
Define	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
(	_	_
without	_	_
the	_	_
opt	_	_
superscript	_	_
)	_	_
as	_	_
the	_	_
approximated	_	_
delay	_	_
function	_	_
.	_	_

#181
Without	_	_
loss	_	_
of	_	_
generality	_	_
,	_	_
assume	_	_
that	_	_
the	_	_
set	_	_
of	_	_
the	_	_
possible	_	_
cost	_	_
values	_	_
is	_	_
K=	_	_
{	_	_
1	_	_
,	_	_
k1	_	_
,	_	_
k2	_	_
,	_	_
…	_	_
,	_	_
km	_	_
,	_	_
UB	_	_
}	_	_
,	_	_
which	_	_
is	_	_
generated	_	_
by	_	_
either	_	_
uniform	_	_
scaling	_	_
or	_	_
logarithmic	_	_
scaling	_	_
or	_	_
any	_	_
other	_	_
quantization	_	_
method	_	_
.	_	_

#182
Let	_	_
k0=1	_	_
and	_	_
km+1=UB	_	_
,	_	_
and	_	_
we	_	_
compute	_	_
the	_	_
value	_	_
of	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
at	_	_
the	_	_
quantized	_	_
values	_	_
within	_	_
[	_	_
1	_	_
,	_	_
UB	_	_
]	_	_
as	_	_
follows	_	_
:	_	_
(	_	_
2	_	_
)	_	_
Dg	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
=0	_	_
,	_	_
c≥0	_	_
;	_	_
Di	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
←∞	_	_
,	_	_
c≥0	_	_
,	_	_
i∈Vâ§¹	_	_
{	_	_
g	_	_
}	_	_
;	_	_
Di	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
=mink∈A	_	_
(	_	_
i	_	_
)	_	_
{	_	_
Dk	_	_
,	_	_
g	_	_
(	_	_
c-c	_	_
(	_	_
i	_	_
,	_	_
k	_	_
)	_	_
)	_	_
+d	_	_
(	_	_
i	_	_
,	_	_
k	_	_
)	_	_
,	_	_
Di	_	_
,	_	_
g	_	_
(	_	_
c′	_	_
)	_	_
}	_	_
c=kj	_	_
,	_	_
c′=kj-1forj=0	_	_
,	_	_
…	_	_
,	_	_
m+1.If	_	_
c=k0	_	_
,	_	_
then	_	_
c′=0	_	_
.	_	_

#183
Eq	_	_
.	_	_
(	_	_
2	_	_
)	_	_
is	_	_
similar	_	_
to	_	_
(	_	_
1	_	_
)	_	_
,	_	_
except	_	_
that	_	_
the	_	_
set	_	_
of	_	_
the	_	_
cost	_	_
values	_	_
is	_	_
different	_	_
.	_	_

#184
In	_	_
(	_	_
1	_	_
)	_	_
,	_	_
the	_	_
QoS	_	_
metric	_	_
of	_	_
each	_	_
link	_	_
is	_	_
an	_	_
integer	_	_
.	_	_

#185
We	_	_
just	_	_
compute	_	_
the	_	_
minimum	_	_
delay	_	_
value	_	_
at	_	_
the	_	_
integer	_	_
cost	_	_
value	_	_
.	_	_

#186
On	_	_
the	_	_
other	_	_
hand	_	_
,	_	_
in	_	_
(	_	_
2	_	_
)	_	_
,	_	_
the	_	_
cost	_	_
value	_	_
is	_	_
selected	_	_
from	_	_
a	_	_
set	_	_
of	_	_
real	_	_
numbers	_	_
.	_	_

#187
We	_	_
compute	_	_
the	_	_
minimum	_	_
delay	_	_
values	_	_
at	_	_
the	_	_
discrete	_	_
cost	_	_
values	_	_
,	_	_
which	_	_
may	deontic-options	negation
not	_	_
necessarily	_	_
be	_	_
integers	_	_
.	_	_

#188
By	_	_
applying	_	_
the	_	_
quantization	_	_
method	_	_
,	_	_
the	_	_
representative	_	_
points	_	_
in	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
must	deontic	_
be	_	_
at	_	_
the	_	_
selected	_	_
cost	_	_
values	_	_
.	_	_

#189
The	_	_
pseudo-code	_	_
of	_	_
the	_	_
approximation	_	_
algorithm	_	_
can	feasibility-rhetorical	_
be	_	_
referred	_	_
to	_	_
http	_	_
:	_	_
//www.eee.hku.hk/research/technical_reports.htm	_	_
.	_	_

#190
As	_	_
we	_	_
only	_	_
consider	_	_
a	_	_
limited	_	_
number	_	_
of	_	_
the	_	_
cost	_	_
values	_	_
,	_	_
some	_	_
representative	_	_
points	_	_
may	options	_
be	_	_
missed	_	_
out	_	_
under	_	_
the	_	_
estimation	_	_
.	_	_

#191
A	_	_
drop	_	_
in	_	_
the	_	_
minimum	_	_
delay	_	_
may	options	_
happen	_	_
at	_	_
a	_	_
later	_	_
quantized	_	_
cost	_	_
value	_	_
.	_	_

#192
For	_	_
example	_	_
,	_	_
the	_	_
representative	_	_
point	_	_
(	_	_
1.5,1.6	_	_
)	_	_
appears	_	_
in	_	_
Fig	_	_
.	_	_
3	_	_
but	_	_
not	_	_
in	_	_
Fig	_	_
.	_	_
5	_	_
(	_	_
a	_	_
)	_	_
.	_	_

#193
Besides	_	_
,	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
in	_	_
Fig	_	_
.	_	_
3	_	_
drops	_	_
to	_	_
1.3	_	_
at	_	_
cost	_	_
1.7	_	_
but	_	_
the	_	_
drop	_	_
occurs	_	_
at	_	_
1.8	_	_
in	_	_
Fig	_	_
.	_	_
4	_	_
(	_	_
a	_	_
)	_	_
.	_	_

#194
In	_	_
other	_	_
words	_	_
,	_	_
the	_	_
scaling	_	_
method	_	_
can	capability-options	_
overestimate	_	_
the	_	_
delay	_	_
at	_	_
some	_	_
costs	_	_
.	_	_

#195
The	_	_
following	_	_
lemma	_	_
describes	_	_
this	_	_
phenomena.Lemma	_	_
1	_	_
For	_	_
any	_	_
c	_	_
>	_	_
0	_	_
,	_	_
if	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
<	_	_
∞	_	_
,	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
≥Ds	_	_
,	_	_
gopt	_	_
(	_	_
c	_	_
)	_	_
.	_	_

#196
Proof	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
is	_	_
initially	_	_
set	_	_
to	_	_
infinity	_	_
.	_	_

#197
According	_	_
to	_	_
(	_	_
2	_	_
)	_	_
,	_	_
if	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
<	_	_
∞	_	_
,	_	_
there	_	_
exists	_	_
a	_	_
physical	_	_
path	_	_
satisfying	_	_
Request	_	_
(	_	_
c	_	_
,	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
)	_	_
.	_	_

#198
If	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
<	_	_
Ds	_	_
,	_	_
gopt	_	_
(	_	_
c	_	_
)	_	_
,	_	_
the	_	_
optimal	_	_
minimum	_	_
delay	_	_
from	_	_
s	_	_
to	_	_
g	_	_
with	_	_
the	_	_
cost	_	_
constraint	_	_
of	_	_
c	_	_
becomes	_	_
Ds	_	_
,	_	_
g	_	_
(	_	_
c	_	_
)	_	_
,	_	_
which	_	_
is	_	_
less	_	_
than	_	_
Ds	_	_
,	_	_
gopt	_	_
(	_	_
c	_	_
)	_	_
.	_	_

#199
In	_	_
this	_	_
case	_	_
,	_	_
Ds	_	_
,	_	_
gopt	_	_
(	_	_
c	_	_
)	_	_
is	_	_
no	_	_
more	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
,	_	_
which	_	_
contradicts	_	_
our	_	_
assumption.□	_	_
For	_	_
ease	_	_
of	_	_
discussion	_	_
,	_	_
we	_	_
drop	_	_
the	_	_
subscripts	_	_
s	_	_
and	_	_
g	_	_
in	_	_
the	_	_
delay	_	_
functions	_	_
and	_	_
simply	_	_
use	_	_
D	_	_
(	_	_
c	_	_
)	_	_
and	_	_
Dopt	_	_
(	_	_
c	_	_
)	_	_
instead	_	_
when	_	_
the	_	_
context	_	_
is	_	_
clear	_	_
.	_	_

#200
Distortion	_	_
area	_	_
analysis	_	_
Let	_	_
PF	_	_
be	_	_
the	_	_
approximated	_	_
representative	_	_
points	_	_
found	_	_
by	_	_
the	_	_
algorithm	_	_
.	_	_

#201
For	_	_
instance	_	_
,	_	_
in	_	_
Fig	_	_
.	_	_
4	_	_
(	_	_
a	_	_
)	_	_
,	_	_
PF	_	_
has	_	_
(	_	_
1,2.2	_	_
)	_	_
,	_	_
(	_	_
1.4,1.8	_	_
)	_	_
,	_	_
(	_	_
1.6,1.5	_	_
)	_	_
,	_	_
(	_	_
1.8,1.3	_	_
)	_	_
,	_	_
and	_	_
(	_	_
2,1	_	_
)	_	_
.	_	_

#202
PFopt	_	_
has	_	_
(	_	_
1,2.2	_	_
)	_	_
,	_	_
(	_	_
1.4,1.8	_	_
)	_	_
,	_	_
(	_	_
1.5,1.6	_	_
)	_	_
,	_	_
(	_	_
1.6,1.5	_	_
)	_	_
,	_	_
(	_	_
1.7,1.3	_	_
)	_	_
,	_	_
and	_	_
(	_	_
2,1	_	_
)	_	_
,	_	_
as	_	_
illustrated	_	_
in	_	_
Fig	_	_
.	_	_
3	_	_
.	_	_

#203
For	_	_
each	_	_
point	_	_
x	_	_
on	_	_
the	_	_
cost-delay	_	_
plane	_	_
,	_	_
denote	_	_
x·c	_	_
and	_	_
x·d	_	_
as	_	_
the	_	_
cost	_	_
metric	_	_
and	_	_
delay	_	_
metric	_	_
of	_	_
this	_	_
point	_	_
,	_	_
respectively	_	_
.	_	_

#204
For	_	_
each	_	_
representative	_	_
point	_	_
r′∈PF	_	_
,	_	_
we	_	_
have	_	_
r′·d=D	_	_
(	_	_
r′·c	_	_
)	_	_
.	_	_

#205
By	_	_
Lemma	_	_
1	_	_
,	_	_
Dopt	_	_
(	_	_
r′·c	_	_
)	_	_
≤D	_	_
(	_	_
r′·c	_	_
)	_	_
=r′·d	_	_
.	_	_

#206
This	_	_
implies	_	_
that	_	_
there	_	_
exists	_	_
a	_	_
representative	_	_
point	_	_
r∈PFopt	_	_
such	_	_
that	_	_
r≺r′	_	_
or	_	_
r=r′	_	_
.	_	_

#207
Let	_	_
Afeasible	_	_
be	_	_
the	_	_
feasible	_	_
area	_	_
estimated	_	_
by	_	_
an	_	_
algorithm	_	_
,	_	_
which	_	_
is	_	_
defined	_	_
by	_	_
PF	_	_
.	_	_

#208
We	_	_
thus	_	_
have	_	_
Afeasible⊆Afeasibleopt	_	_
.	_	_

#209
As	_	_
mentioned	_	_
in	_	_
Section	_	_
1	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
is	_	_
defined	_	_
as	_	_
Aerror=Afeasibleoptâ§¹Afeasible	_	_
.	_	_

#210
Although	_	_
Afeasibleopt	_	_
and	_	_
Afeasible	_	_
are	_	_
both	_	_
infinite	_	_
,	_	_
Aerror	_	_
must	deontic	_
be	_	_
finite	_	_
since	_	_
both	_	_
Afeasibleopt	_	_
and	_	_
Afeasible	_	_
contain	_	_
the	_	_
bounded	_	_
minimum	_	_
cost	_	_
and	_	_
minimum	_	_
delay	_	_
representative	_	_
points	_	_
.	_	_

#211
As	_	_
discussed	_	_
in	_	_
Section	_	_
1	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
reflects	_	_
the	_	_
admission	_	_
control	_	_
performance	_	_
of	_	_
the	_	_
network	_	_
.	_	_

#212
We	_	_
apply	_	_
the	_	_
distortion	_	_
area	_	_
as	_	_
the	_	_
metric	_	_
to	_	_
evaluate	_	_
the	_	_
performance	_	_
of	_	_
the	_	_
quantization-based	_	_
algorithms	_	_
for	_	_
estimating	_	_
the	_	_
supported	_	_
QoS	_	_
.	_	_

#213
Lemma	_	_
1	_	_
implies	_	_
that	_	_
if	_	_
D	_	_
(	_	_
c	_	_
)	_	_
=Dopt	_	_
(	_	_
c′	_	_
)	_	_
,	_	_
c≥c′	_	_
.	_	_

#214
For	_	_
example	_	_
,	_	_
in	_	_
Figs	_	_
.	_	_
3	_	_
and	_	_
5	_	_
(	_	_
a	_	_
)	_	_
,	_	_
the	_	_
corresponding	_	_
costs	_	_
for	_	_
delay=2	_	_
are	_	_
1.4	_	_
and	_	_
1.44	_	_
,	_	_
respectively	_	_
,	_	_
where	_	_
the	_	_
one	_	_
on	_	_
the	_	_
approximation	_	_
function	_	_
is	_	_
larger	_	_
.	_	_

#215
The	_	_
cost	_	_
deviation	_	_
captures	_	_
the	_	_
difference	_	_
in	_	_
the	_	_
cost	_	_
values	_	_
of	_	_
the	_	_
optimal	_	_
and	_	_
approximated	_	_
delay	_	_
functions	_	_
,	_	_
as	_	_
referred	_	_
to	_	_
Definition	_	_
4.Definition	_	_
4	_	_
If	_	_
c0	_	_
is	_	_
the	_	_
cost	_	_
value	_	_
of	_	_
a	_	_
representative	_	_
point	_	_
,	_	_
we	_	_
call	_	_
c0	_	_
a	_	_
representative	_	_
cost	_	_
.	_	_

#216
The	_	_
cost	_	_
deviation	_	_
at	_	_
the	_	_
representative	_	_
cost	_	_
c0	_	_
on	_	_
Dopt	_	_
(	_	_
c	_	_
)	_	_
,	_	_
denoted	_	_
as	_	_
CD	_	_
(	_	_
c0	_	_
)	_	_
,	_	_
is	_	_
min	_	_
{	_	_
c|D	_	_
(	_	_
c	_	_
)	_	_
≤Dopt	_	_
(	_	_
c0	_	_
)	_	_
}	_	_
-c0	_	_
.	_	_

#217
The	_	_
existing	_	_
algorithms	_	_
also	_	_
give	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
cost	_	_
deviation	_	_
by	_	_
using	_	_
different	_	_
quantization	_	_
methods	_	_
.	_	_

#218
For	_	_
instance	_	_
,	_	_
it	_	_
has	_	_
been	_	_
shown	_	_
(	_	_
Hassin	_	_
,	_	_
1992	_	_
)	_	_
that	_	_
the	_	_
cost-deviation	_	_
at	_	_
any	_	_
cost	_	_
value	_	_
is	_	_
no	_	_
more	_	_
than	_	_
Hδ	_	_
if	_	_
we	_	_
apply	_	_
the	_	_
scaling	_	_
set	_	_
K=	_	_
{	_	_
1	_	_
,	_	_
δ,2δ	_	_
,	_	_
…	_	_
,	_	_
mδ	_	_
,	_	_
UB	_	_
}	_	_
,	_	_
where	_	_
H	_	_
is	_	_
the	_	_
maximum	_	_
number	_	_
of	_	_
hops	_	_
in	_	_
the	_	_
network	_	_
.	_	_

#219
The	_	_
work	_	_
in	_	_
Orda	_	_
and	_	_
Sprintson	_	_
(	_	_
2003	_	_
)	_	_
also	_	_
shows	_	_
that	_	_
the	_	_
cost-deviation	_	_
at	_	_
cost	_	_
value	_	_
c0	_	_
is	_	_
no	_	_
more	_	_
than	_	_
(	_	_
(	_	_
1+δ	_	_
)	_	_
H-1	_	_
)	_	_
c0	_	_
by	_	_
using	_	_
logarithmic	_	_
scaling	_	_
.	_	_

#220
Since	_	_
Afeasible⊆Afeasibleopt	_	_
,	_	_
the	_	_
cost	_	_
deviation	_	_
at	_	_
any	_	_
cost	_	_
value	_	_
can	capability	negation
not	_	_
be	_	_
negative	_	_
by	_	_
using	_	_
any	_	_
kind	_	_
of	_	_
quantization	_	_
method	_	_
.	_	_

#221
Generally	_	_
,	_	_
denote	_	_
Cmax	_	_
as	_	_
the	_	_
maximum	_	_
cost-deviation	_	_
at	_	_
all	_	_
the	_	_
cost	_	_
values	_	_
.	_	_

#222
It	_	_
is	_	_
the	_	_
time	_	_
to	_	_
discuss	_	_
how	_	_
to	_	_
calculate	_	_
the	_	_
distortion	_	_
area	_	_
based	_	_
on	_	_
PFopt=	_	_
{	_	_
r0	_	_
,	_	_
r1	_	_
,	_	_
…	_	_
,	_	_
rn-1	_	_
,	_	_
rn	_	_
}	_	_
and	_	_
PF=	_	_
{	_	_
r0′	_	_
,	_	_
r1′	_	_
,	_	_
…	_	_
,	_	_
rm′	_	_
}	_	_
,	_	_
where	_	_
r0=r0′=rc	_	_
,	_	_
rn=rm′=rd	_	_
.	_	_

#223
Suppose	_	_
that	_	_
the	_	_
points	_	_
in	_	_
PFopt	_	_
and	_	_
PF	_	_
are	_	_
sorted	_	_
in	_	_
cost-ascending	_	_
order	_	_
.	_	_

#224
Note	_	_
that	_	_
the	_	_
first	_	_
and	_	_
the	_	_
last	_	_
representative	_	_
points	_	_
of	_	_
PFopt	_	_
and	_	_
PF	_	_
are	_	_
the	_	_
same	_	_
because	_	_
these	_	_
two	_	_
points	_	_
are	_	_
the	_	_
minimum	_	_
cost	_	_
and	_	_
minimum	_	_
delay	_	_
representative	_	_
points	_	_
,	_	_
respectively	_	_
.	_	_

#225
They	_	_
can	feasibility	_
be	_	_
easily	_	_
found	_	_
out	_	_
by	_	_
Dijkstra	_	_
's	_	_
algorithm	_	_
.	_	_

#226
We	_	_
first	_	_
study	_	_
how	_	_
to	_	_
calculate	_	_
the	_	_
distortion	_	_
area	_	_
between	_	_
the	_	_
delay	_	_
values	_	_
of	_	_
two	_	_
consecutive	_	_
representative	_	_
points	_	_
ri	_	_
and	_	_
ri-1	_	_
in	_	_
PFopt	_	_
.	_	_

#227
By	_	_
Definition	_	_
4	_	_
,	_	_
the	_	_
point	_	_
(	_	_
ri.c+CD	_	_
(	_	_
ri.c	_	_
)	_	_
,	_	_
ri.d	_	_
)	_	_
is	_	_
on	_	_
the	_	_
efficient	_	_
frontier	_	_
defined	_	_
by	_	_
{	_	_
D	_	_
(	_	_
c	_	_
)	_	_
,	_	_
c≥0	_	_
}	_	_
.	_	_

#228
If	_	_
there	_	_
is	_	_
no	_	_
representative	_	_
point	_	_
in	_	_
PF	_	_
located	_	_
in	_	_
the	_	_
area	_	_
[	_	_
0	_	_
,	_	_
UB	_	_
]	_	_
×	_	_
[	_	_
ri·d	_	_
,	_	_
ri-1·d	_	_
]	_	_
,	_	_
the	_	_
area	_	_
[	_	_
ri·c	_	_
,	_	_
ri·c+CD	_	_
(	_	_
ri·c	_	_
)	_	_
]	_	_
×	_	_
[	_	_
ri·d	_	_
,	_	_
ri-1·d	_	_
]	_	_
is	_	_
NOT	_	_
included	_	_
in	_	_
the	_	_
feasible	_	_
area	_	_
found	_	_
by	_	_
the	_	_
scaling	_	_
mechanism	_	_
.	_	_

#229
The	_	_
distortion	_	_
area	_	_
between	_	_
the	_	_
delay	_	_
values	_	_
of	_	_
r1·d	_	_
and	_	_
r2·d	_	_
is	_	_
(	_	_
r1·d-r2·d	_	_
)	_	_
·CD	_	_
(	_	_
r2·c	_	_
)	_	_
,	_	_
where	_	_
CD	_	_
(	_	_
r2·c	_	_
)	_	_
=r3′·c-r2.c	_	_
.	_	_

#230
If	_	_
some	_	_
representative	_	_
points	_	_
in	_	_
PF	_	_
,	_	_
denoted	_	_
by	_	_
{	_	_
rk′	_	_
,	_	_
…	_	_
,	_	_
rk+j′	_	_
}	_	_
,	_	_
are	_	_
located	_	_
in	_	_
the	_	_
region	_	_
spanned	_	_
by	_	_
[	_	_
0	_	_
,	_	_
UB	_	_
]	_	_
×	_	_
(	_	_
ri·d	_	_
,	_	_
ri-1·d	_	_
]	_	_
,	_	_
rk+l′·d	_	_
>	_	_
ri.d	_	_
,	_	_
rk+l′·c	_	_
<	_	_
ri·c+CD	_	_
(	_	_
ri·c	_	_
)	_	_
for	_	_
all	_	_
l=0	_	_
,	_	_
…	_	_
,	_	_
j	_	_
.	_	_

#231
This	_	_
means	_	_
that	_	_
all	_	_
these	_	_
representative	_	_
points	_	_
are	_	_
located	_	_
in	_	_
the	_	_
area	_	_
[	_	_
ri·c	_	_
,	_	_
ri·c+CD	_	_
(	_	_
ri·c	_	_
)	_	_
]	_	_
×	_	_
(	_	_
ri·d	_	_
,	_	_
ri-1·d	_	_
]	_	_
.	_	_

#232
By	_	_
Definition	_	_
4	_	_
,	_	_
we	_	_
have	_	_
CD	_	_
(	_	_
r1·c	_	_
)	_	_
=r3′·c	_	_
,	_	_
and	_	_
we	_	_
can	feasibility-rhetorical	_
observe	_	_
that	_	_
both	_	_
points	_	_
r1′	_	_
and	_	_
r2′	_	_
are	_	_
located	_	_
in	_	_
the	_	_
area	_	_
(	_	_
r1·d	_	_
,	_	_
rc·d	_	_
]	_	_
×	_	_
[	_	_
r1·c	_	_
,	_	_
r1·c+CD	_	_
(	_	_
r1·c	_	_
)	_	_
]	_	_
.	_	_

#233
Therefore	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
between	_	_
the	_	_
delay	_	_
values	_	_
of	_	_
ri·d	_	_
and	_	_
ri-1·d	_	_
is	_	_
no	_	_
more	_	_
than	_	_
(	_	_
ri-1·d-ri·d	_	_
)	_	_
·CD	_	_
(	_	_
ri·c	_	_
)	_	_
.	_	_

#234
The	_	_
total	_	_
distortion	_	_
area	_	_
is	_	_
calculated	_	_
by	_	_
adding	_	_
the	_	_
distortion	_	_
areas	_	_
between	_	_
the	_	_
delay	_	_
values	_	_
of	_	_
two	_	_
consecutive	_	_
optimal	_	_
representative	_	_
points	_	_
as	_	_
follows	_	_
:	_	_
(	_	_
3	_	_
)	_	_
Aerror=∑i=1nCD	_	_
(	_	_
ri·c	_	_
)	_	_
·	_	_
(	_	_
ri-1·d-ri·d	_	_
)	_	_
≤Cmax·	_	_
(	_	_
∑i=1n	_	_
(	_	_
ri-1·d-ri·d	_	_
)	_	_
)	_	_
≤Cmax·UB	_	_
For	_	_
uniform	_	_
scaling	_	_
,	_	_
we	_	_
have	_	_
(	_	_
4	_	_
)	_	_
Aerroruni≤H·δ·UB=εUB	_	_
,	_	_
since	_	_
Cmax≤Hδ	_	_
and	_	_
δ=ε/H	_	_
.	_	_

#235
Similarly	_	_
,	_	_
for	_	_
logarithmic	_	_
scaling	_	_
,	_	_
we	_	_
have	_	_
(	_	_
5	_	_
)	_	_
Aerrorlog≤	_	_
(	_	_
(	_	_
1+δ	_	_
)	_	_
H-1	_	_
)	_	_
UB·UB	_	_
<	_	_
εUB2	_	_
(	_	_
δ=ε2H	_	_
)	_	_
,	_	_
since	_	_
Cmax≤	_	_
(	_	_
(	_	_
1+δ	_	_
)	_	_
H-1	_	_
)	_	_
UB	_	_
and	_	_
δ=ε/2H	_	_
.	_	_

#236
Further	_	_
reducing	_	_
the	_	_
error	_	_
In	_	_
this	_	_
section	_	_
,	_	_
we	_	_
propose	_	_
a	_	_
strategy	_	_
to	_	_
further	_	_
reduce	_	_
the	_	_
distortion	_	_
area	_	_
,	_	_
which	_	_
is	_	_
called	_	_
two-dimensional	_	_
scaling	_	_
.	_	_

#237
Two-dimensional	_	_
scaling	_	_
works	_	_
with	_	_
any	_	_
quantization	_	_
method	_	_
,	_	_
such	_	_
as	_	_
uniform	_	_
scaling	_	_
or	_	_
logarithmic	_	_
scaling	_	_
.	_	_

#238
We	_	_
then	_	_
calculate	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
distortion	_	_
area	_	_
produced	_	_
by	_	_
two-dimensional	_	_
scaling	_	_
.	_	_

#239
Finally	_	_
,	_	_
we	_	_
consider	_	_
both	_	_
quantization	_	_
schemes	_	_
,	_	_
namely	_	_
,	_	_
uniform	_	_
scaling	_	_
and	_	_
logarithmic	_	_
scaling	_	_
,	_	_
and	_	_
compare	_	_
the	_	_
error	_	_
of	_	_
two-dimensional	_	_
scaling	_	_
with	_	_
that	_	_
of	_	_
the	_	_
existing	_	_
quantization-based	_	_
algorithms	_	_
.	_	_

#240
Two-dimensional	_	_
scaling	_	_
In	_	_
the	_	_
existing	_	_
approximation	_	_
algorithms	_	_
,	_	_
the	_	_
cost	_	_
metric	_	_
is	_	_
quantized	_	_
,	_	_
so	_	_
that	_	_
we	_	_
can	feasibility	_
get	_	_
the	_	_
approximate	_	_
delay	_	_
function	_	_
D	_	_
(	_	_
c	_	_
)	_	_
.	_	_

#241
If	_	_
we	_	_
indeed	_	_
quantize	_	_
the	_	_
delay	_	_
metric	_	_
by	_	_
using	_	_
the	_	_
same	_	_
scaling	_	_
mechanism	_	_
(	_	_
logarithmic	_	_
scaling	_	_
or	_	_
uniform	_	_
scaling	_	_
)	_	_
,	_	_
we	_	_
would	_	_
get	_	_
a	_	_
different	_	_
approximate	_	_
cost	_	_
function	_	_
,	_	_
denoted	_	_
by	_	_
C	_	_
(	_	_
d	_	_
)	_	_
.	_	_

#242
D	_	_
(	_	_
c	_	_
)	_	_
and	_	_
C	_	_
(	_	_
d	_	_
)	_	_
may	capability-options	_
represent	_	_
the	_	_
different	_	_
approximate	_	_
supported	_	_
QoS	_	_
regions	_	_
.	_	_

#243
If	_	_
we	_	_
combine	_	_
the	_	_
two	_	_
supported	_	_
QoS	_	_
regions	_	_
represented	_	_
by	_	_
D	_	_
(	_	_
c	_	_
)	_	_
and	_	_
C	_	_
(	_	_
d	_	_
)	_	_
,	_	_
we	_	_
can	feasibility	_
get	_	_
a	_	_
more	_	_
accurate	_	_
supported	_	_
QoS	_	_
region	_	_
than	_	_
the	_	_
one	_	_
denoted	_	_
by	_	_
either	_	_
one	_	_
.	_	_

#244
For	_	_
example	_	_
,	_	_
consider	_	_
the	_	_
optimal	_	_
delay	_	_
function	_	_
depicted	_	_
in	_	_
Fig	_	_
.	_	_
3	_	_
.	_	_

#245
If	_	_
we	_	_
use	_	_
the	_	_
logarithmic	_	_
scaling	_	_
method	_	_
on	_	_
cost	_	_
,	_	_
we	_	_
get	_	_
the	_	_
approximated	_	_
function	_	_
in	_	_
Fig	_	_
.	_	_
5	_	_
(	_	_
a	_	_
)	_	_
.	_	_

#246
On	_	_
the	_	_
other	_	_
hand	_	_
,	_	_
if	_	_
we	_	_
quantize	_	_
on	_	_
delay	_	_
,	_	_
the	_	_
function	_	_
becomes	_	_
the	_	_
one	_	_
shown	_	_
in	_	_
Fig	_	_
.	_	_
5	_	_
(	_	_
b	_	_
)	_	_
.	_	_

#247
The	_	_
sets	_	_
of	_	_
the	_	_
approximate	_	_
representative	_	_
points	_	_
defined	_	_
by	_	_
the	_	_
two	_	_
functions	_	_
are	_	_
different	_	_
.	_	_

#248
If	_	_
we	_	_
combine	_	_
both	_	_
sets	_	_
,	_	_
another	_	_
set	_	_
of	_	_
seven	_	_
representative	_	_
points	_	_
,	_	_
i.e	_	_
.	_	_
{	_	_
(	_	_
1,2.2	_	_
)	_	_
,	_	_
(	_	_
1.4,2.0736	_	_
)	_	_
,	_	_
(	_	_
1.44,1.8	_	_
)	_	_
,	_	_
(	_	_
1.5,1.728	_	_
)	_	_
,	_	_
(	_	_
1.7,1.44	_	_
)	_	_
,	_	_
(	_	_
1.728,1.3	_	_
)	_	_
,	_	_
(	_	_
2,1	_	_
)	_	_
}	_	_
is	_	_
obtained	_	_
,	_	_
as	_	_
shown	_	_
in	_	_
Fig	_	_
.	_	_
6	_	_
(	_	_
b	_	_
)	_	_
.	_	_

#249
The	_	_
supported	_	_
QoS	_	_
region	_	_
of	_	_
Fig	_	_
.	_	_
6	_	_
(	_	_
b	_	_
)	_	_
is	_	_
larger	_	_
than	_	_
that	_	_
of	_	_
Fig	_	_
.	_	_
5	_	_
(	_	_
a	_	_
)	_	_
or	_	_
(	_	_
b	_	_
)	_	_
.	_	_

#250
Our	_	_
approximation	_	_
algorithm	_	_
is	_	_
as	_	_
follows	_	_
.	_	_

#251
Each	_	_
node	_	_
keeps	_	_
two	_	_
sets	_	_
of	_	_
the	_	_
approximate	_	_
representative	_	_
points	_	_
,	_	_
PFu	_	_
,	_	_
gd	_	_
and	_	_
PFu	_	_
,	_	_
gc	_	_
.	_	_

#252
PFu	_	_
,	_	_
gd	_	_
is	_	_
obtained	_	_
by	_	_
computing	_	_
the	_	_
minimum	_	_
delay	_	_
with	_	_
all	_	_
possible	_	_
quantized	_	_
cost	_	_
values	_	_
,	_	_
while	_	_
PFu	_	_
,	_	_
gc	_	_
is	_	_
obtained	_	_
by	_	_
computing	_	_
the	_	_
minimum	_	_
cost	_	_
with	_	_
all	_	_
possible	_	_
quantized	_	_
delay	_	_
values	_	_
.	_	_

#253
Both	_	_
PFu	_	_
,	_	_
gd	_	_
and	_	_
PFu	_	_
,	_	_
gc	_	_
may	capability-options	_
define	_	_
different	_	_
supported	_	_
QoS	_	_
regions	_	_
.	_	_

#254
We	_	_
combine	_	_
both	_	_
sets	_	_
to	_	_
define	_	_
the	_	_
supported	_	_
QoS	_	_
region	_	_
from	_	_
u	_	_
to	_	_
g.	_	_
The	_	_
pseudo-code	_	_
of	_	_
our	_	_
algorithm	_	_
is	_	_
referred	_	_
to	_	_
http	_	_
:	_	_
//www.eee.hku.hk/research/technical_reports.htm	_	_
.	_	_

#255
The	_	_
computational	_	_
complexity	_	_
of	_	_
the	_	_
quantization-based	_	_
approximation	_	_
algorithm	_	_
depends	_	_
on	_	_
the	_	_
number	_	_
of	_	_
quantized	_	_
values	_	_
(	_	_
Orda	_	_
and	_	_
Sprintson	_	_
,	_	_
2003	_	_
)	_	_
.	_	_

#256
The	_	_
computational	_	_
overhead	_	_
of	_	_
our	_	_
algorithm	_	_
is	_	_
twice	_	_
that	_	_
of	_	_
the	_	_
existing	_	_
quantization-based	_	_
algorithm	_	_
,	_	_
since	_	_
our	_	_
algorithm	_	_
conducts	_	_
the	_	_
quantization	_	_
twice	_	_
while	_	_
the	_	_
existing	_	_
algorithm	_	_
does	_	_
once	_	_
.	_	_

#257
For	_	_
clarity	_	_
,	_	_
the	_	_
existing	_	_
quantization-based	_	_
algorithms	_	_
use	_	_
cost-scaling	_	_
,	_	_
while	_	_
our	_	_
approach	_	_
employs	_	_
two-dimensional	_	_
scaling	_	_
.	_	_

#258
Either	_	_
kind	_	_
of	_	_
quantization	_	_
schemes	_	_
,	_	_
such	_	_
as	_	_
uniform	_	_
scaling	_	_
or	_	_
logarithmic	_	_
scaling	_	_
,	_	_
can	capability-feasibility	_
be	_	_
applied	_	_
through	_	_
cost-scaling	_	_
or	_	_
two-dimensional	_	_
scaling	_	_
.	_	_

#259
Note	_	_
that	_	_
intuitively	_	_
,	_	_
two-dimensional	_	_
scaling	_	_
produces	_	_
the	_	_
smaller	_	_
distortion	_	_
area	_	_
but	_	_
the	_	_
larger	_	_
computational	_	_
overhead	_	_
if	_	_
it	_	_
uses	_	_
the	_	_
same	_	_
scaling	_	_
parameter	_	_
as	_	_
cost-scaling	_	_
.	_	_

#260
In	_	_
the	_	_
following	_	_
,	_	_
we	_	_
will	_	_
show	_	_
that	_	_
with	_	_
the	_	_
condition	_	_
that	_	_
both	_	_
cost-scaling	_	_
and	_	_
two-dimensional	_	_
scaling	_	_
produce	_	_
the	_	_
same	_	_
computational	_	_
overhead	_	_
,	_	_
two-dimensional	_	_
scaling	_	_
yields	_	_
the	_	_
smaller	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
distortion	_	_
area	_	_
.	_	_

#261
Distortion	_	_
area	_	_
of	_	_
two-dimensional	_	_
scaling	_	_
In	_	_
this	_	_
subsection	_	_
,	_	_
we	_	_
describe	_	_
how	_	_
to	_	_
calculate	_	_
the	_	_
distortion	_	_
area	_	_
produced	_	_
by	_	_
our	_	_
mechanism	_	_
.	_	_

#262
Let	_	_
PFopt=	_	_
{	_	_
r0	_	_
,	_	_
r1	_	_
,	_	_
…	_	_
,	_	_
rn	_	_
}	_	_
,	_	_
where	_	_
r0=rc	_	_
,	_	_
rn=rd	_	_
,	_	_
and	_	_
ri·c	_	_
<	_	_
ri+1·c	_	_
for	_	_
all	_	_
i=0	_	_
,	_	_
…	_	_
,	_	_
n-1	_	_
.	_	_

#263
With	_	_
the	_	_
similar	_	_
method	_	_
described	_	_
in	_	_
Section	_	_
4.3	_	_
,	_	_
we	_	_
first	_	_
calculate	_	_
the	_	_
distortion	_	_
area	_	_
between	_	_
two	_	_
consecutive	_	_
delay	_	_
values	_	_
ri·d	_	_
and	_	_
ri-1·d	_	_
,	_	_
where	_	_
i=1	_	_
,	_	_
…	_	_
,	_	_
n-1	_	_
.	_	_

#264
In	_	_
two-dimensional	_	_
scaling	_	_
,	_	_
the	_	_
delay	_	_
metric	_	_
is	_	_
also	_	_
quantized	_	_
.	_	_

#265
Let	_	_
Copt	_	_
(	_	_
d	_	_
)	_	_
and	_	_
C	_	_
(	_	_
d	_	_
)	_	_
be	_	_
the	_	_
optimal	_	_
cost	_	_
function	_	_
and	_	_
the	_	_
approximated	_	_
cost	_	_
function	_	_
,	_	_
respectively	_	_
.	_	_

#266
Similar	_	_
to	_	_
Definition	_	_
4	_	_
,	_	_
we	_	_
define	_	_
delay	_	_
deviation	_	_
as	_	_
follows.Definition	_	_
5	_	_
The	_	_
delay	_	_
deviation	_	_
at	_	_
the	_	_
representative	_	_
delay	_	_
d0	_	_
on	_	_
Copt	_	_
(	_	_
d	_	_
)	_	_
,	_	_
denoted	_	_
as	_	_
DD	_	_
(	_	_
d0	_	_
)	_	_
,	_	_
is	_	_
min	_	_
{	_	_
d|C	_	_
(	_	_
d	_	_
)	_	_
≤Copt	_	_
(	_	_
d0	_	_
)	_	_
}	_	_
-d0	_	_
.	_	_

#267
In	_	_
two-dimensional	_	_
scaling	_	_
,	_	_
the	_	_
cost	_	_
metric	_	_
and	_	_
delay	_	_
metric	_	_
are	_	_
quantized	_	_
by	_	_
the	_	_
same	_	_
method	_	_
.	_	_

#268
Thus	_	_
,	_	_
the	_	_
calculation	_	_
of	_	_
the	_	_
delay	_	_
deviation	_	_
at	_	_
a	_	_
certain	_	_
delay	_	_
value	_	_
is	_	_
similar	_	_
to	_	_
that	_	_
of	_	_
the	_	_
cost	_	_
deviation	_	_
.	_	_

#269
In	_	_
other	_	_
words	_	_
,	_	_
by	_	_
using	_	_
uniform	_	_
scaling	_	_
,	_	_
the	_	_
delay	_	_
deviation	_	_
at	_	_
a	_	_
certain	_	_
delay	_	_
value	_	_
d0	_	_
is	_	_
no	_	_
more	_	_
than	_	_
Hδ	_	_
,	_	_
and	_	_
by	_	_
using	_	_
logarithmic	_	_
scaling	_	_
,	_	_
the	_	_
delay	_	_
deviation	_	_
is	_	_
no	_	_
more	_	_
than	_	_
(	_	_
(	_	_
1+δ	_	_
)	_	_
H-1	_	_
)	_	_
d0	_	_
.	_	_

#270
By	_	_
setting	_	_
the	_	_
same	_	_
upper	_	_
bound	_	_
for	_	_
both	_	_
cost	_	_
metric	_	_
and	_	_
delay	_	_
metric	_	_
as	_	_
UB	_	_
,	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
delay	_	_
deviation	_	_
with	_	_
logarithmic	_	_
scaling	_	_
is	_	_
the	_	_
same	_	_
as	_	_
that	_	_
of	_	_
cost	_	_
deviation	_	_
.	_	_

#271
Thus	_	_
,	_	_
Cmax	_	_
denotes	_	_
the	_	_
maximum	_	_
cost	_	_
deviation	_	_
at	_	_
any	_	_
cost	_	_
value	_	_
as	_	_
well	_	_
as	_	_
the	_	_
maximum	_	_
delay	_	_
deviation	_	_
at	_	_
any	_	_
delay	_	_
value	_	_
produced	_	_
by	_	_
two-dimensional	_	_
scaling	_	_
.	_	_

#272
By	_	_
Definitions	_	_
4	_	_
and	_	_
5	_	_
,	_	_
the	_	_
points	_	_
(	_	_
ri·c+CD	_	_
(	_	_
ri·c	_	_
)	_	_
,	_	_
ri·d	_	_
)	_	_
and	_	_
(	_	_
ri·c	_	_
,	_	_
ri·d+DD	_	_
(	_	_
ri·d	_	_
)	_	_
)	_	_
are	_	_
in	_	_
the	_	_
feasible	_	_
area	_	_
found	_	_
by	_	_
our	_	_
mechanism	_	_
.	_	_

#273
This	_	_
implies	_	_
that	_	_
the	_	_
distortion	_	_
area	_	_
must	deontic-inference	_
be	_	_
no	_	_
more	_	_
than	_	_
CD	_	_
(	_	_
ri·c	_	_
)	_	_
·DD	_	_
(	_	_
ri·d	_	_
)	_	_
.	_	_

#274
The	_	_
total	_	_
distortion	_	_
area	_	_
produced	_	_
by	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
no	_	_
more	_	_
than	_	_
∑i=1n-1CD	_	_
(	_	_
ri·c	_	_
)	_	_
·DD	_	_
(	_	_
ri·d	_	_
)	_	_
.	_	_

#275
We	_	_
can	feasibility-rhetorical	_
see	_	_
that	_	_
the	_	_
total	_	_
distortion	_	_
area	_	_
of	_	_
two-dimensional	_	_
scaling	_	_
depends	_	_
on	_	_
the	_	_
number	_	_
of	_	_
the	_	_
optimal	_	_
representative	_	_
points	_	_
n.	_	_
To	_	_
gain	_	_
the	_	_
insight	_	_
into	_	_
n	_	_
,	_	_
we	_	_
assume	_	_
that	_	_
the	_	_
QoS	_	_
metrics	_	_
of	_	_
all	_	_
paths	_	_
are	_	_
independent	_	_
and	_	_
identically	_	_
distributed	_	_
(	_	_
i.i.d	_	_
.	_	_
)	_	_

#276
random	_	_
variables	_	_
(	_	_
Van	_	_
Mieghem	_	_
and	_	_
Kuipers	_	_
,	_	_
2003	_	_
)	_	_
.	_	_

#277
The	_	_
following	_	_
lemma	_	_
is	_	_
established	_	_
in	_	_
Van	_	_
Mieghem	_	_
and	_	_
Kuipers	_	_
(	_	_
2003	_	_
)	_	_
.Lemma	_	_
2	_	_
The	_	_
expected	_	_
number	_	_
of	_	_
the	_	_
representative	_	_
points	_	_
among	_	_
a	_	_
set	_	_
of	_	_
T	_	_
i.i.d	_	_
.	_	_

#278
points	_	_
in	_	_
K-dimensional	_	_
space	_	_
is	_	_
bounded	_	_
above	_	_
by	_	_
(	_	_
lnT	_	_
)	_	_
K-1	_	_
.	_	_

#279
Given	_	_
a	_	_
source	_	_
s	_	_
,	_	_
a	_	_
destination	_	_
g	_	_
,	_	_
and	_	_
other	_	_
h-1	_	_
nodes	_	_
in	_	_
the	_	_
network	_	_
,	_	_
there	_	_
are	_	_
at	_	_
most	_	_
(	_	_
h-1	_	_
)	_	_
!	_	_

#280
different	_	_
h-hop	_	_
paths	_	_
from	_	_
s	_	_
to	_	_
g.	_	_
Therefore	_	_
,	_	_
there	_	_
are	_	_
at	_	_
most	_	_
(	_	_
h-1	_	_
)	_	_
!	_	_
|V-2|h-1	_	_
h-hop	_	_
paths	_	_
but	_	_
|V-2|h-1	_	_
different	_	_
QoS	_	_
parameters	_	_
for	_	_
all	_	_
h-hop	_	_
paths	_	_
from	_	_
s	_	_
to	_	_
g.	_	_
Therefore	_	_
,	_	_
the	_	_
maximum	_	_
number	_	_
of	_	_
the	_	_
QoS	_	_
parameters	_	_
of	_	_
the	_	_
paths	_	_
from	_	_
s	_	_
to	_	_
g	_	_
is	_	_
∑j=0|V|-2|V-2|h-1=2|V|-2	_	_
.	_	_

#281
For	_	_
the	_	_
two-dimensional	_	_
case	_	_
,	_	_
it	_	_
holds	_	_
that	_	_
(	_	_
lnT	_	_
)	_	_
K-1≤ln2|V|-2≤|V|-2	_	_
.	_	_

#282
We	_	_
thus	_	_
have	_	_
n≤|V|-2	_	_
.	_	_

#283
Therefore	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
introduced	_	_
due	_	_
to	_	_
two-dimensional	_	_
scaling	_	_
can	feasibility	_
be	_	_
calculated	_	_
as	_	_
(	_	_
6	_	_
)	_	_
Aerror2-D=∑i=1n-1CD	_	_
(	_	_
ri·c	_	_
)	_	_
·DD	_	_
(	_	_
ri.d	_	_
)	_	_
≤	_	_
(	_	_
|V|-2	_	_
)	_	_
·Cmax2	_	_
If	_	_
two-dimensional	_	_
uniform	_	_
scaling	_	_
is	_	_
applied	_	_
,	_	_
we	_	_
have	_	_
DD	_	_
(	_	_
ri·d	_	_
)	_	_
≤	_	_
(	_	_
|V|-1	_	_
)	_	_
δ	_	_
and	_	_
CD	_	_
(	_	_
ri·d	_	_
)	_	_
≤	_	_
(	_	_
|V|-1	_	_
)	_	_
δ.	_	_
Therefore	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
is	_	_
(	_	_
7	_	_
)	_	_
Aerror2-D	_	_
,	_	_
uni≤	_	_
(	_	_
|V|-2	_	_
)	_	_
·	_	_
(	_	_
(	_	_
|V|-1	_	_
)	_	_
δ	_	_
)	_	_
2=	_	_
(	_	_
|V|-2	_	_
)	_	_
ε2where	_	_
δ=ε/	_	_
(	_	_
|V|-1	_	_
)	_	_
.	_	_

#284
Similarly	_	_
,	_	_
if	_	_
two-dimensional	_	_
logarithmic	_	_
scaling	_	_
is	_	_
employed	_	_
,	_	_
we	_	_
have	_	_
DD	_	_
(	_	_
ri·d	_	_
)	_	_
≤	_	_
(	_	_
(	_	_
1+δ	_	_
)	_	_
|V|-1-1	_	_
)	_	_
·ri·d	_	_
and	_	_
CD	_	_
(	_	_
ri·c	_	_
)	_	_
≤	_	_
(	_	_
(	_	_
1+δ	_	_
)	_	_
|V|-1-1	_	_
)	_	_
·ri·c	_	_
.	_	_

#285
Therefore	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
is	_	_
(	_	_
8	_	_
)	_	_
Aerror2-D	_	_
,	_	_
log≤	_	_
(	_	_
|V|-2	_	_
)	_	_
·	_	_
(	_	_
(	_	_
1+δ	_	_
)	_	_
|V|-1-1	_	_
)	_	_
2rc·d·rd·c	_	_
<	_	_
(	_	_
|V|-2	_	_
)	_	_
(	_	_
(	_	_
1+δ	_	_
)	_	_
|V|-1-1	_	_
)	_	_
2UB2≤	_	_
(	_	_
|V|-2	_	_
)	_	_
ε2UB2where	_	_
δ=ε/2	_	_
(	_	_
|V|-1	_	_
)	_	_
.	_	_

#286
Performance	_	_
comparison	_	_
According	_	_
to	_	_
the	_	_
discussion	_	_
in	_	_
Sections	_	_
4.3	_	_
and	_	_
5.2	_	_
,	_	_
we	_	_
know	_	_
that	_	_
the	_	_
computational	_	_
overhead	_	_
of	_	_
a	_	_
quantization-based	_	_
algorithm	_	_
depends	_	_
on	_	_
the	_	_
quantization	_	_
scheme	_	_
employed	_	_
.	_	_

#287
In	_	_
this	_	_
section	_	_
,	_	_
we	_	_
consider	_	_
both	_	_
quantization	_	_
schemes	_	_
,	_	_
namely	_	_
,	_	_
uniform	_	_
scaling	_	_
and	_	_
logarithmic	_	_
scaling	_	_
,	_	_
and	_	_
compare	_	_
the	_	_
error	_	_
produced	_	_
by	_	_
our	_	_
approach	_	_
and	_	_
cost-scaling	_	_
under	_	_
the	_	_
condition	_	_
that	_	_
they	_	_
produce	_	_
almost	_	_
the	_	_
same	_	_
computational	_	_
overhead	_	_
.	_	_

#288
If	_	_
the	_	_
same	_	_
scaling	_	_
parameter	_	_
δ	_	_
is	_	_
used	_	_
,	_	_
it	_	_
is	_	_
obvious	_	_
that	_	_
two-dimensional	_	_
scaling	_	_
generally	_	_
outperforms	_	_
cost-scaling	_	_
by	_	_
producing	_	_
a	_	_
smaller	_	_
distortion	_	_
area	_	_
.	_	_

#289
For	_	_
two-dimensional	_	_
scaling	_	_
,	_	_
the	_	_
supported	_	_
QoS	_	_
region	_	_
is	_	_
defined	_	_
by	_	_
both	_	_
PFd	_	_
and	_	_
PFc	_	_
.	_	_

#290
However	_	_
,	_	_
for	_	_
cost-scaling	_	_
,	_	_
the	_	_
supported	_	_
QoS	_	_
region	_	_
is	_	_
defined	_	_
by	_	_
PFd	_	_
.	_	_

#291
On	_	_
the	_	_
other	_	_
hand	_	_
,	_	_
two-dimensional	_	_
scaling	_	_
yields	_	_
a	_	_
larger	_	_
computational	_	_
overhead	_	_
if	_	_
both	_	_
techniques	_	_
apply	_	_
the	_	_
same	_	_
scaling	_	_
parameter	_	_
.	_	_

#292
According	_	_
to	_	_
Section	_	_
4	_	_
,	_	_
we	_	_
know	_	_
that	_	_
the	_	_
computational	_	_
overheads	_	_
of	_	_
both	_	_
our	_	_
proposed	_	_
approach	_	_
and	_	_
cost-scaling	_	_
heavily	_	_
depend	_	_
on	_	_
the	_	_
number	_	_
of	_	_
possible	_	_
cost	_	_
values	_	_
(	_	_
and	_	_
delay	_	_
values	_	_
for	_	_
our	_	_
approach	_	_
)	_	_
caused	_	_
by	_	_
the	_	_
quantization	_	_
scheme	_	_
.	_	_

#293
We	_	_
believe	_	_
that	_	_
if	_	_
both	_	_
approaches	_	_
produce	_	_
the	_	_
same	_	_
number	_	_
of	_	_
the	_	_
possible	_	_
quantized	_	_
cost	_	_
values	_	_
(	_	_
and	_	_
delay	_	_
values	_	_
for	_	_
our	_	_
approach	_	_
)	_	_
,	_	_
they	_	_
produce	_	_
almost	_	_
the	_	_
same	_	_
computational	_	_
overhead	_	_
.	_	_

#294
Thus	_	_
,	_	_
we	_	_
are	_	_
going	_	_
to	_	_
discuss	_	_
how	_	_
to	_	_
set	_	_
the	_	_
scaling	_	_
parameter	_	_
,	_	_
such	_	_
that	_	_
the	_	_
total	_	_
number	_	_
of	_	_
the	_	_
possible	_	_
quantized	_	_
values	_	_
is	_	_
the	_	_
same	_	_
.	_	_

#295
Given	_	_
a	_	_
scaling	_	_
parameter	_	_
δ	_	_
,	_	_
the	_	_
number	_	_
of	_	_
possible	_	_
cost	_	_
values	_	_
by	_	_
uniform	_	_
scaling	_	_
is	_	_
UB/δ	_	_
,	_	_
and	_	_
that	_	_
by	_	_
logarithmic	_	_
scaling	_	_
is	_	_
log1+δUB	_	_
,	_	_
as	_	_
referred	_	_
to	_	_
Section	_	_
4.2	_	_
.	_	_

#296
For	_	_
ease	_	_
of	_	_
discussion	_	_
,	_	_
denote	_	_
δt	_	_
and	_	_
δs	_	_
as	_	_
the	_	_
scaling	_	_
parameters	_	_
adopted	_	_
in	_	_
two-dimensional	_	_
scaling	_	_
and	_	_
cost-scaling	_	_
,	_	_
respectively	_	_
.	_	_

#297
If	_	_
we	_	_
use	_	_
uniform	_	_
scaling	_	_
,	_	_
by	_	_
setting	_	_
δt=2δs	_	_
,	_	_
we	_	_
can	feasibility-rhetorical	_
consider	_	_
that	_	_
the	_	_
total	_	_
number	_	_
of	_	_
quantized	_	_
cost	_	_
and	_	_
delay	_	_
values	_	_
for	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
the	_	_
same	_	_
as	_	_
that	_	_
for	_	_
cost-scaling	_	_
.	_	_

#298
We	_	_
thus	_	_
consider	_	_
both	_	_
algorithms	_	_
incur	_	_
a	_	_
comparable	_	_
computational	_	_
overhead	_	_
.	_	_

#299
If	_	_
we	_	_
use	_	_
logarithmic	_	_
scaling	_	_
,	_	_
by	_	_
setting	_	_
δt=2δs	_	_
,	_	_
the	_	_
total	_	_
number	_	_
of	_	_
possible	_	_
cost	_	_
values	_	_
and	_	_
delay	_	_
values	_	_
by	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
2log1+2δsUB	_	_
,	_	_
and	_	_
the	_	_
number	_	_
of	_	_
cost	_	_
values	_	_
by	_	_
cost-scaling	_	_
is	_	_
log1+δsUB	_	_
.	_	_

#300
When	_	_
δs	_	_
is	_	_
very	_	_
small	_	_
,	_	_
say	_	_
δs≤0.1	_	_
,	_	_
we	_	_
have	_	_
1+2δs≃	_	_
(	_	_
1+δs	_	_
)	_	_
2	_	_
.	_	_

#301
This	_	_
means	_	_
that	_	_
2log1+2δsUB≃log1+δsUB	_	_
.	_	_

#302
Therefore	_	_
,	_	_
if	_	_
we	_	_
set	_	_
δt=2δs	_	_
,	_	_
we	_	_
can	feasibility-rhetorical	_
consider	_	_
that	_	_
the	_	_
computational	_	_
overheads	_	_
produced	_	_
by	_	_
two-dimensional	_	_
scaling	_	_
and	_	_
cost-scaling	_	_
are	_	_
comparable	_	_
.	_	_

#303
Denote	_	_
δ	_	_
as	_	_
the	_	_
scaling	_	_
parameter	_	_
used	_	_
in	_	_
cost-scaling	_	_
.	_	_

#304
For	_	_
two-dimensional	_	_
scaling	_	_
,	_	_
the	_	_
scaling	_	_
parameter	_	_
of	_	_
2δ	_	_
is	_	_
used	_	_
.	_	_

#305
If	_	_
we	_	_
apply	_	_
uniform	_	_
scaling	_	_
,	_	_
δ=ε/|V|-1	_	_
.	_	_

#306
By	_	_
(	_	_
4	_	_
)	_	_
and	_	_
(	_	_
7	_	_
)	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
for	_	_
cost-scaling	_	_
and	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
upper	_	_
bounded	_	_
by	_	_
ε·UB	_	_
and	_	_
4	_	_
(	_	_
|V|-2	_	_
)	_	_
ε2	_	_
,	_	_
respectively	_	_
.	_	_

#307
For	_	_
logarithmic	_	_
scaling	_	_
,	_	_
δ=ε/2	_	_
(	_	_
|V|-1	_	_
)	_	_
.	_	_

#308
By	_	_
(	_	_
5	_	_
)	_	_
and	_	_
(	_	_
8	_	_
)	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
for	_	_
cost-scaling	_	_
and	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
upper	_	_
bounded	_	_
by	_	_
ε·UB2	_	_
and	_	_
4	_	_
(	_	_
|V|-2	_	_
)	_	_
·ε2·UB2	_	_
,	_	_
respectively	_	_
.	_	_

#309
Since	_	_
UB	_	_
is	_	_
the	_	_
maximum	_	_
cost	_	_
value	_	_
for	_	_
a	_	_
path	_	_
in	_	_
the	_	_
network	_	_
,	_	_
it	_	_
is	_	_
upper	_	_
bounded	_	_
by	_	_
(	_	_
|V|-1	_	_
)	_	_
W	_	_
,	_	_
where	_	_
W	_	_
is	_	_
the	_	_
maximum	_	_
cost	_	_
value	_	_
of	_	_
each	_	_
link	_	_
.	_	_

#310
For	_	_
uniform	_	_
scaling	_	_
with	_	_
ε	_	_
<	_	_
W/4	_	_
,	_	_
two-dimensional	_	_
scaling	_	_
yields	_	_
a	_	_
smaller	_	_
upper	_	_
bound	_	_
on	_	_
the	_	_
distortion	_	_
area	_	_
than	_	_
cost-scaling	_	_
.	_	_

#311
For	_	_
logarithmic	_	_
scaling	_	_
with	_	_
4	_	_
(	_	_
|V|-2	_	_
)	_	_
ε	_	_
<	_	_
1	_	_
,	_	_
two-dimensional	_	_
scaling	_	_
provides	_	_
a	_	_
better	_	_
error	_	_
guarantee	_	_
.	_	_

#312
For	_	_
the	_	_
worst	_	_
case	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
incurred	_	_
equals	_	_
to	_	_
its	_	_
upper	_	_
bound	_	_
.	_	_

#313
This	_	_
means	_	_
that	_	_
the	_	_
distortion	_	_
area	_	_
for	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
smaller	_	_
than	_	_
that	_	_
for	_	_
cost-scaling	_	_
in	_	_
the	_	_
worst	_	_
case	_	_
analysis	_	_
.	_	_

#314
We	_	_
notice	_	_
that	_	_
the	_	_
distortion	_	_
area	_	_
for	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
proportional	_	_
to	_	_
the	_	_
square	_	_
of	_	_
ε	_	_
,	_	_
while	_	_
that	_	_
for	_	_
cost-scaling	_	_
is	_	_
proportional	_	_
to	_	_
ε.	_	_
Generally	_	_
speaking	_	_
,	_	_
ε	_	_
<	_	_
1	_	_
.	_	_

#315
As	_	_
εincreases	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
of	_	_
two-dimensional	_	_
scaling	_	_
grows	_	_
much	_	_
slower	_	_
than	_	_
that	_	_
of	_	_
cost-scaling	_	_
.	_	_

#316
On	_	_
the	_	_
other	_	_
hand	_	_
,	_	_
the	_	_
total	_	_
number	_	_
of	_	_
the	_	_
cost	_	_
and	_	_
delay	_	_
values	_	_
taken	_	_
by	_	_
two-dimensional	_	_
scaling	_	_
reduces	_	_
with	_	_
the	_	_
same	_	_
rate	_	_
as	_	_
that	_	_
of	_	_
cost-scaling	_	_
.	_	_

#317
This	_	_
implies	_	_
that	_	_
two-dimensional	_	_
scaling	_	_
can	capability	_
effectively	_	_
reduce	_	_
the	_	_
computational	_	_
overhead	_	_
with	_	_
a	_	_
smaller	_	_
increase	_	_
in	_	_
the	_	_
distortion	_	_
area	_	_
when	_	_
compared	_	_
with	_	_
cost-scaling	_	_
.	_	_

#318
As	_	_
the	_	_
actual	_	_
improvement	_	_
depends	_	_
on	_	_
the	_	_
network	_	_
topology	_	_
,	_	_
we	_	_
have	_	_
conducted	_	_
extensive	_	_
simulations	_	_
to	_	_
study	_	_
the	_	_
performance	_	_
,	_	_
which	_	_
will	_	_
be	_	_
discussed	_	_
in	_	_
Section	_	_
6	_	_
.	_	_

#319
We	_	_
also	_	_
notice	_	_
that	_	_
by	_	_
setting	_	_
the	_	_
same	_	_
scaling	_	_
parameter	_	_
δ	_	_
,	_	_
uniform	_	_
scaling	_	_
yields	_	_
a	_	_
smaller	_	_
approximation	_	_
error	_	_
but	_	_
a	_	_
larger	_	_
computational	_	_
overhead	_	_
than	_	_
logarithmic	_	_
scaling	_	_
.	_	_

#320
Performance	_	_
evaluation	_	_
In	_	_
this	_	_
section	_	_
,	_	_
we	_	_
present	_	_
our	_	_
simulation	_	_
results	_	_
.	_	_

#321
We	_	_
compare	_	_
our	_	_
proposed	_	_
method	_	_
,	_	_
two-dimensional	_	_
scaling	_	_
,	_	_
with	_	_
cost-scaling	_	_
.	_	_

#322
We	_	_
evaluate	_	_
the	_	_
performance	_	_
of	_	_
the	_	_
algorithms	_	_
from	_	_
the	_	_
perspectives	_	_
of	_	_
the	_	_
approximation	_	_
error	_	_
and	_	_
the	_	_
computational	_	_
overhead	_	_
.	_	_

#323
As	_	_
discussed	_	_
in	_	_
Section	_	_
1	_	_
,	_	_
we	_	_
use	_	_
the	_	_
distortion	_	_
area	_	_
as	_	_
the	_	_
evaluation	_	_
metric	_	_
for	_	_
the	_	_
accuracy	_	_
performance	_	_
of	_	_
the	_	_
quantization-based	_	_
approximation	_	_
algorithms	_	_
.	_	_

#324
We	_	_
use	_	_
the	_	_
exhaustive	_	_
method	_	_
to	_	_
compute	_	_
the	_	_
optimal	_	_
feasible	_	_
area	_	_
Aopt	_	_
.	_	_

#325
Denote	_	_
A	_	_
as	_	_
the	_	_
estimated	_	_
feasible	_	_
area	_	_
computed	_	_
by	_	_
an	_	_
algorithm	_	_
.	_	_

#326
The	_	_
distortion	_	_
area	_	_
is	_	_
thus	_	_
Aopt-A·	_	_
(	_	_
Aopt-A	_	_
)	_	_
/Aopt	_	_
is	_	_
called	_	_
the	_	_
region-deviation	_	_
ratio	_	_
which	_	_
is	_	_
proportional	_	_
to	_	_
the	_	_
distortion	_	_
area	_	_
.	_	_

#327
We	_	_
compare	_	_
the	_	_
region-deviation	_	_
ratio	_	_
for	_	_
different	_	_
quantization-based	_	_
approximation	_	_
algorithms	_	_
.	_	_

#328
It	_	_
is	_	_
obvious	_	_
that	_	_
the	_	_
region-deviation	_	_
ratio	_	_
depends	_	_
on	_	_
the	_	_
scaling	_	_
parameter	_	_
δ.	_	_
A	_	_
smaller	_	_
δ	_	_
gives	_	_
a	_	_
smaller	_	_
region-deviation	_	_
ratio	_	_
,	_	_
but	_	_
a	_	_
larger	_	_
computational	_	_
overhead	_	_
.	_	_

#329
In	_	_
our	_	_
simulation	_	_
experiments	_	_
,	_	_
we	_	_
use	_	_
the	_	_
running	_	_
time	_	_
of	_	_
an	_	_
algorithm	_	_
as	_	_
the	_	_
metric	_	_
for	_	_
evaluating	_	_
the	_	_
efficiency	_	_
performance	_	_
.	_	_

#330
In	_	_
order	_	_
to	_	_
fairly	_	_
test	_	_
the	_	_
computational	_	_
overheads	_	_
of	_	_
the	_	_
different	_	_
algorithms	_	_
,	_	_
all	_	_
the	_	_
algorithms	_	_
run	_	_
in	_	_
turn	_	_
under	_	_
the	_	_
same	_	_
machine	_	_
configuration	_	_
and	_	_
the	_	_
same	_	_
operation	_	_
system	_	_
(	_	_
Fedora	_	_
10	_	_
)	_	_
.	_	_

#331
Moreover	_	_
,	_	_
during	_	_
the	_	_
running	_	_
of	_	_
each	_	_
algorithm	_	_
,	_	_
the	_	_
machine	_	_
did	_	_
not	_	_
perform	_	_
any	_	_
other	_	_
task	_	_
.	_	_

#332
We	_	_
use	_	_
the	_	_
function	_	_
"	_	_
gettimeofday	_	_
"	_	_
provided	_	_
by	_	_
the	_	_
system	_	_
to	_	_
obtain	_	_
the	_	_
exact	_	_
starting	_	_
time	_	_
and	_	_
the	_	_
end	_	_
time	_	_
,	_	_
in	_	_
order	_	_
to	_	_
calculate	_	_
the	_	_
running	_	_
time	_	_
delivered	_	_
by	_	_
different	_	_
algorithms	_	_
.	_	_

#333
Similar	_	_
to	_	_
Xue	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2007	_	_
)	_	_
,	_	_
we	_	_
used	_	_
BRITE	_	_
(	_	_
Huang	_	_
et	_	_
al.	_	_
,	_	_
2010	_	_
)	_	_
,	_	_
a	_	_
well-known	_	_
Internet	_	_
topology	_	_
generator	_	_
,	_	_
to	_	_
generate	_	_
network	_	_
topologies	_	_
using	_	_
the	_	_
Waxman	_	_
model	_	_
.	_	_

#334
We	_	_
apply	_	_
the	_	_
default	_	_
parameters	_	_
provided	_	_
in	_	_
BRITE	_	_
.	_	_

#335
The	_	_
details	_	_
can	feasibility-rhetorical	_
be	_	_
referred	_	_
to	_	_
Xue	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2007	_	_
)	_	_
and	_	_
Huang	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2010	_	_
)	_	_
.	_	_

#336
The	_	_
physical	_	_
links	_	_
in	_	_
the	_	_
networks	_	_
are	_	_
asymmetric	_	_
,	_	_
and	_	_
the	_	_
link	_	_
metrics	_	_
of	_	_
both	_	_
directions	_	_
are	_	_
independently	_	_
generated	_	_
.	_	_

#337
Cost	_	_
metrics	_	_
are	_	_
selected	_	_
uniformly	_	_
from	_	_
[	_	_
1,100	_	_
]	_	_
,	_	_
while	_	_
the	_	_
delay	_	_
values	_	_
are	_	_
selected	_	_
uniformly	_	_
from	_	_
[	_	_
1,300	_	_
]	_	_
.	_	_

#338
We	_	_
consider	_	_
five	_	_
different	_	_
network	_	_
sizes	_	_
with	_	_
100	_	_
,	_	_
200	_	_
,	_	_
300	_	_
,	_	_
400	_	_
,	_	_
and	_	_
500	_	_
nodes	_	_
.	_	_

#339
We	_	_
generate	_	_
ten	_	_
different	_	_
instances	_	_
for	_	_
each	_	_
network	_	_
size	_	_
.	_	_

#340
In	_	_
each	_	_
instance	_	_
,	_	_
we	_	_
randomly	_	_
select	_	_
four	_	_
nodes	_	_
and	_	_
compute	_	_
the	_	_
supported	_	_
QoS	_	_
regions	_	_
from	_	_
each	_	_
selected	_	_
node	_	_
to	_	_
all	_	_
the	_	_
other	_	_
nodes	_	_
in	_	_
the	_	_
network	_	_
.	_	_

#341
There	_	_
are	_	_
totally	_	_
99·4	_	_
different	_	_
supported	_	_
QoSes	_	_
between	_	_
two	_	_
nodes	_	_
in	_	_
a	_	_
network	_	_
instance	_	_
.	_	_

#342
For	_	_
each	_	_
network	_	_
size	_	_
,	_	_
the	_	_
average	_	_
region-deviation	_	_
ratio	_	_
is	_	_
thus	_	_
an	_	_
average	_	_
value	_	_
of	_	_
the	_	_
region-deviation	_	_
ratios	_	_
among	_	_
these	_	_
99·4·10	_	_
configurations	_	_
.	_	_

#343
Significance	_	_
of	_	_
distortion	_	_
area	_	_
In	_	_
Section	_	_
1	_	_
,	_	_
we	_	_
mention	_	_
that	_	_
the	_	_
distortion	_	_
area	_	_
reflects	_	_
the	_	_
admission	_	_
control	_	_
performance	_	_
of	_	_
the	_	_
network	_	_
.	_	_

#344
In	_	_
this	_	_
section	_	_
,	_	_
we	_	_
have	_	_
conducted	_	_
the	_	_
simulation	_	_
experiments	_	_
to	_	_
demonstrate	_	_
the	_	_
relationship	_	_
between	_	_
the	_	_
admission	_	_
control	_	_
performance	_	_
and	_	_
the	_	_
size	_	_
of	_	_
the	_	_
distortion	_	_
area	_	_
.	_	_

#345
After	_	_
a	_	_
source	_	_
receives	_	_
a	_	_
connection	_	_
request	_	_
,	_	_
it	_	_
first	_	_
determines	_	_
whether	_	_
there	_	_
is	_	_
a	_	_
path	_	_
satisfying	_	_
the	_	_
QoS	_	_
requirement	_	_
of	_	_
a	_	_
request	_	_
.	_	_

#346
The	_	_
network	_	_
will	_	_
accept	_	_
the	_	_
request	_	_
if	_	_
it	_	_
is	_	_
feasible	_	_
or	_	_
reject	_	_
it	_	_
if	_	_
the	_	_
source	_	_
can	capability	negation
not	_	_
find	_	_
a	_	_
feasible	_	_
path	_	_
according	_	_
to	_	_
its	_	_
precomputed	_	_
supported	_	_
QoS	_	_
region	_	_
.	_	_

#347
We	_	_
define	_	_
the	_	_
ratio	_	_
of	_	_
the	_	_
number	_	_
of	_	_
the	_	_
requests	_	_
accepted	_	_
to	_	_
the	_	_
total	_	_
number	_	_
of	_	_
the	_	_
incoming	_	_
requests	_	_
as	_	_
the	_	_
acceptance	_	_
ratio	_	_
.	_	_

#348
Denote	_	_
Sopt	_	_
as	_	_
the	_	_
acceptance	_	_
ratio	_	_
corresponding	_	_
to	_	_
the	_	_
optimal	_	_
feasible	_	_
area	_	_
Aopt	_	_
and	_	_
S	_	_
as	_	_
the	_	_
acceptance	_	_
ratio	_	_
for	_	_
an	_	_
approximation	_	_
algorithm	_	_
with	_	_
the	_	_
approximate	_	_
feasible	_	_
area	_	_
A.	_	_
Similar	_	_
to	_	_
Korkmaz	_	_
and	_	_
Krunz	_	_
(	_	_
2001	_	_
)	_	_
,	_	_
we	_	_
define	_	_
S/Sopt	_	_
as	_	_
the	_	_
relative	_	_
acceptance	_	_
ratio	_	_
which	_	_
implies	_	_
how	_	_
well	_	_
an	_	_
algorithm	_	_
works	_	_
for	_	_
the	_	_
provision	_	_
of	_	_
the	_	_
QoS	_	_
guarantees	_	_
.	_	_

#349
S/Sopt	_	_
thus	_	_
reflects	_	_
the	_	_
admission	_	_
control	_	_
performance	_	_
of	_	_
the	_	_
network	_	_
.	_	_

#350
A	_	_
larger	_	_
S/Sopt	_	_
implies	_	_
a	_	_
better	_	_
network	_	_
performance	_	_
.	_	_

#351
We	_	_
generate	_	_
the	_	_
connection	_	_
requests	_	_
as	_	_
follows	_	_
.	_	_

#352
Given	_	_
a	_	_
source	_	_
and	_	_
a	_	_
destination	_	_
,	_	_
let	_	_
p1	_	_
and	_	_
p2	_	_
be	_	_
the	_	_
minimum	_	_
cost	_	_
and	_	_
minimum	_	_
delay	_	_
paths	_	_
,	_	_
respectively	_	_
.	_	_

#353
Denote	_	_
the	_	_
QoS	_	_
parameters	_	_
of	_	_
p1	_	_
and	_	_
p2	_	_
as	_	_
(	_	_
cmin	_	_
,	_	_
dmax	_	_
)	_	_
and	_	_
(	_	_
cmax	_	_
,	_	_
dmax	_	_
)	_	_
,	_	_
respectively	_	_
.	_	_

#354
We	_	_
generated	_	_
1000	_	_
requests	_	_
from	_	_
each	_	_
node	_	_
pair	_	_
.	_	_

#355
Each	_	_
request	_	_
has	_	_
the	_	_
cost	_	_
requirement	_	_
creq	_	_
and	_	_
the	_	_
delay	_	_
requirement	_	_
dreq	_	_
.	_	_

#356
As	_	_
similar	_	_
to	_	_
Korkmaz	_	_
and	_	_
Krunz	_	_
(	_	_
2001	_	_
)	_	_
,	_	_
we	_	_
take	_	_
creq~uniform	_	_
[	_	_
fl·cmin	_	_
,	_	_
fu·cmax	_	_
]	_	_
and	_	_
dreq~uniform	_	_
[	_	_
fl·dmin	_	_
,	_	_
fu·dmax	_	_
]	_	_
,	_	_
where	_	_
fl=1	_	_
.	_	_

#357
In	_	_
our	_	_
simulation	_	_
experiments	_	_
,	_	_
the	_	_
value	_	_
of	_	_
the	_	_
scaling	_	_
parameter	_	_
for	_	_
our	_	_
proposed	_	_
approach	_	_
is	_	_
twice	_	_
of	_	_
that	_	_
for	_	_
cost-scaling	_	_
.	_	_

#358
Figure	_	_
7	_	_
(	_	_
a	_	_
)	_	_
and	_	_
(	_	_
b	_	_
)	_	_
shows	_	_
the	_	_
relative	_	_
acceptance	_	_
ratio	_	_
against	_	_
the	_	_
scaling	_	_
parameter	_	_
for	_	_
cost-scaling	_	_
when	_	_
fu=1	_	_
and	_	_
fu=0.9	_	_
,	_	_
respectively	_	_
.	_	_

#359
For	_	_
example	_	_
,	_	_
when	_	_
δ=0.05	_	_
,	_	_
the	_	_
scaling	_	_
parameter	_	_
for	_	_
two-dimensional	_	_
scaling	_	_
becomes	_	_
2δ=0.1	_	_
.	_	_

#360
The	_	_
simulation	_	_
results	_	_
show	_	_
that	_	_
the	_	_
relative	_	_
acceptance	_	_
ratio	_	_
decreases	_	_
as	_	_
the	_	_
scaling	_	_
parameter	_	_
increases	_	_
.	_	_

#361
Since	_	_
the	_	_
distortion	_	_
area	_	_
becomes	_	_
larger	_	_
as	_	_
the	_	_
scaling	_	_
parameter	_	_
increases	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
varies	_	_
with	_	_
the	_	_
relative	_	_
acceptance	_	_
ratio	_	_
.	_	_

#362
That	_	_
is	_	_
,	_	_
the	_	_
distortion	_	_
area	_	_
reflects	_	_
the	_	_
admission	_	_
control	_	_
performance	_	_
of	_	_
the	_	_
network	_	_
.	_	_

#363
We	_	_
also	_	_
observe	_	_
that	_	_
the	_	_
relative	_	_
acceptance	_	_
ratio	_	_
for	_	_
our	_	_
approach	_	_
is	_	_
higher	_	_
than	_	_
that	_	_
for	_	_
cost-scaling	_	_
.	_	_

#364
In	_	_
the	_	_
following	_	_
,	_	_
we	_	_
are	_	_
going	_	_
to	_	_
show	_	_
that	_	_
the	_	_
computational	_	_
overheads	_	_
of	_	_
our	_	_
approach	_	_
and	_	_
cost-scaling	_	_
are	_	_
almost	_	_
the	_	_
same	_	_
.	_	_

#365
Therefore	_	_
,	_	_
our	_	_
approach	_	_
can	capability	_
provide	_	_
a	_	_
better	_	_
admission	_	_
control	_	_
service	_	_
than	_	_
cost-scaling	_	_
without	_	_
inducing	_	_
additional	_	_
overhead	_	_
.	_	_

#366
Comparing	_	_
Fig	_	_
.	_	_
7	_	_
(	_	_
a	_	_
)	_	_
and	_	_
(	_	_
b	_	_
)	_	_
,	_	_
we	_	_
observe	_	_
that	_	_
the	_	_
relative	_	_
acceptance	_	_
ratio	_	_
with	_	_
fu=0.9	_	_
is	_	_
less	_	_
than	_	_
that	_	_
with	_	_
fu=1	_	_
.	_	_

#367
The	_	_
larger	_	_
fu	_	_
implies	_	_
that	_	_
more	_	_
requests	_	_
fall	_	_
in	_	_
the	_	_
feasible	_	_
region	_	_
,	_	_
and	_	_
so	_	_
,	_	_
the	_	_
relative	_	_
acceptance	_	_
ratio	_	_
with	_	_
larger	_	_
fu	_	_
is	_	_
greater	_	_
.	_	_

#368
Two-dimensional	_	_
scaling	_	_
against	_	_
cost-scaling	_	_
The	_	_
relative	_	_
acceptance	_	_
ratio	_	_
does	_	_
not	_	_
only	_	_
depend	_	_
on	_	_
the	_	_
distortion	_	_
area	_	_
,	_	_
but	_	_
also	_	_
it	_	_
relates	_	_
to	_	_
the	_	_
specific	_	_
QoS	_	_
requirements	_	_
of	_	_
the	_	_
connection	_	_
requests	_	_
.	_	_

#369
We	_	_
would	_	_
like	_	_
to	_	_
use	_	_
the	_	_
region-deviation	_	_
ratio	_	_
as	_	_
the	_	_
metric	_	_
to	_	_
evaluate	_	_
the	_	_
accuracy	_	_
performance	_	_
of	_	_
an	_	_
approximation	_	_
algorithm	_	_
.	_	_

#370
Figure	_	_
8	_	_
shows	_	_
the	_	_
simulation	_	_
results	_	_
with	_	_
uniform	_	_
scaling	_	_
.	_	_

#371
Figure	_	_
8	_	_
(	_	_
a	_	_
)	_	_
exhibits	_	_
the	_	_
relationship	_	_
between	_	_
the	_	_
region-deviation	_	_
ratios	_	_
and	_	_
the	_	_
scaling	_	_
parameter	_	_
δ.	_	_
We	_	_
can	feasibility-rhetorical	_
see	_	_
that	_	_
the	_	_
region-deviation	_	_
ratio	_	_
for	_	_
cost-scaling	_	_
is	_	_
the	_	_
higher	_	_
than	_	_
that	_	_
for	_	_
two-dimensional	_	_
scaling	_	_
.	_	_

#372
For	_	_
each	_	_
running	_	_
time	_	_
,	_	_
there	_	_
is	_	_
a	_	_
corresponding	_	_
region-deviation	_	_
ratio	_	_
produced	_	_
by	_	_
algorithm	_	_
.	_	_

#373
With	_	_
the	_	_
same	_	_
running	_	_
time	_	_
,	_	_
the	_	_
lower	_	_
the	_	_
region-deviation	_	_
ratio	_	_
,	_	_
the	_	_
better	_	_
the	_	_
algorithm	_	_
.	_	_

#374
Figure	_	_
8	_	_
(	_	_
c	_	_
)	_	_
shows	_	_
the	_	_
region-deviation	_	_
ratio	_	_
of	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
lower	_	_
than	_	_
that	_	_
of	_	_
cost-scaling	_	_
,	_	_
and	_	_
so	_	_
the	_	_
proposed	_	_
method	_	_
outperforms	_	_
cost-scaling	_	_
.	_	_

#375
We	_	_
then	_	_
test	_	_
the	_	_
performance	_	_
of	_	_
the	_	_
algorithms	_	_
applying	_	_
logarithmic	_	_
scaling	_	_
.	_	_

#376
Figure	_	_
9	_	_
shows	_	_
the	_	_
simulation	_	_
results	_	_
.	_	_

#377
In	_	_
Fig	_	_
.	_	_
9	_	_
(	_	_
b	_	_
)	_	_
,	_	_
the	_	_
scaling	_	_
parameter	_	_
for	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
twice	_	_
of	_	_
that	_	_
for	_	_
cost-scaling	_	_
.	_	_

#378
The	_	_
computational	_	_
overheads	_	_
for	_	_
both	_	_
algorithms	_	_
are	_	_
comparable	_	_
.	_	_

#379
This	_	_
accords	_	_
with	_	_
our	_	_
theoretical	_	_
analysis	_	_
in	_	_
Section	_	_
5.3	_	_
.	_	_

#380
That	_	_
is	_	_
,	_	_
when	_	_
the	_	_
scaling	_	_
parameter	_	_
is	_	_
small	_	_
enough	_	_
,	_	_
(	_	_
1+2δ	_	_
)	_	_
is	_	_
approximately	_	_
the	_	_
same	_	_
as	_	_
(	_	_
1+δ	_	_
)	_	_
2	_	_
.	_	_

#381
Figure	_	_
9	_	_
(	_	_
c	_	_
)	_	_
shows	_	_
the	_	_
region-deviation	_	_
ratio	_	_
of	_	_
the	_	_
algorithms	_	_
against	_	_
the	_	_
running	_	_
time	_	_
.	_	_

#382
We	_	_
observe	_	_
that	_	_
the	_	_
performance	_	_
improvement	_	_
for	_	_
two-dimensional	_	_
scaling	_	_
over	_	_
cost-scaling	_	_
becomes	_	_
greater	_	_
with	_	_
a	_	_
smaller	_	_
scaling	_	_
parameter	_	_
,	_	_
which	_	_
leads	_	_
to	_	_
a	_	_
larger	_	_
running	_	_
time	_	_
.	_	_

#383
Finally	_	_
,	_	_
we	_	_
would	_	_
like	_	_
to	_	_
evaluate	_	_
the	_	_
performance	_	_
of	_	_
the	_	_
algorithms	_	_
with	_	_
different	_	_
network	_	_
sizes	_	_
.	_	_

#384
When	_	_
applying	_	_
uniform	_	_
scaling	_	_
,	_	_
we	_	_
set	_	_
the	_	_
scaling	_	_
parameters	_	_
as	_	_
0.1	_	_
and	_	_
0.2	_	_
for	_	_
cost-scaling	_	_
and	_	_
two-dimensional	_	_
scaling	_	_
,	_	_
respectively	_	_
.	_	_

#385
When	_	_
applying	_	_
logarithmic	_	_
scaling	_	_
,	_	_
the	_	_
scaling	_	_
parameters	_	_
for	_	_
cost-scaling	_	_
and	_	_
two-dimensional	_	_
scaling	_	_
are	_	_
0.05	_	_
and	_	_
0.1	_	_
,	_	_
respectively	_	_
.	_	_

#386
The	_	_
simulation	_	_
results	_	_
in	_	_
Figs	_	_
.	_	_
10	_	_
(	_	_
b	_	_
)	_	_
and	_	_
11	_	_
(	_	_
b	_	_
)	_	_
show	_	_
that	_	_
the	_	_
computational	_	_
overheads	_	_
incurred	_	_
by	_	_
the	_	_
algorithms	_	_
are	_	_
comparable	_	_
.	_	_

#387
Figures	_	_
10	_	_
(	_	_
a	_	_
)	_	_
and	_	_
11	_	_
(	_	_
a	_	_
)	_	_
show	_	_
that	_	_
the	_	_
region-deviation	_	_
ratio	_	_
for	_	_
two-dimensional	_	_
scaling	_	_
is	_	_
less	_	_
than	_	_
half	_	_
of	_	_
that	_	_
for	_	_
cost-scaling	_	_
.	_	_

#388
These	_	_
results	_	_
show	_	_
that	_	_
our	_	_
approach	_	_
outperforms	_	_
over	_	_
cost-scaling	_	_
in	_	_
the	_	_
general	_	_
network	_	_
topology	_	_
.	_	_

#389
Conclusion	_	_
In	_	_
this	_	_
paper	_	_
,	_	_
we	_	_
investigated	_	_
the	_	_
problem	_	_
of	_	_
precomputing	_	_
the	_	_
supported	_	_
QoS	_	_
with	_	_
two	_	_
additive	_	_
constraints	_	_
,	_	_
which	_	_
is	_	_
NP-complete	_	_
.	_	_

#390
We	_	_
proposed	_	_
a	_	_
new	_	_
metric	_	_
,	_	_
distortion	_	_
area	_	_
,	_	_
to	_	_
evaluate	_	_
the	_	_
performance	_	_
of	_	_
the	_	_
approximation	_	_
algorithms	_	_
for	_	_
estimating	_	_
the	_	_
supported	_	_
QoS	_	_
.	_	_

#391
We	_	_
gave	_	_
the	_	_
theoretical	_	_
analysis	_	_
for	_	_
the	_	_
upper	_	_
bound	_	_
of	_	_
the	_	_
distortion	_	_
area	_	_
produced	_	_
by	_	_
the	_	_
existing	_	_
quantization-based	_	_
approximation	_	_
algorithms	_	_
,	_	_
and	_	_
then	_	_
we	_	_
presented	_	_
a	_	_
new	_	_
method	_	_
to	_	_
further	_	_
improve	_	_
the	_	_
accuracy	_	_
performance	_	_
,	_	_
which	_	_
is	_	_
called	_	_
two-dimensional	_	_
scaling	_	_
.	_	_

#392
We	_	_
also	_	_
formally	_	_
show	_	_
that	_	_
two-dimensional	_	_
scaling	_	_
produces	_	_
the	_	_
smaller	_	_
approximation	_	_
error	_	_
than	_	_
the	_	_
existing	_	_
methods	_	_
.	_	_

#393
Finally	_	_
,	_	_
we	_	_
demonstrated	_	_
the	_	_
performance	_	_
of	_	_
our	_	_
method	_	_
and	_	_
compared	_	_
it	_	_
with	_	_
the	_	_
existing	_	_
methods	_	_
by	_	_
conducting	_	_
the	_	_
extensive	_	_
simulation	_	_
experiments	_	_
.	_	_

#394
Our	_	_
method	_	_
can	feasibility	_
be	_	_
extended	_	_
for	_	_
the	_	_
case	_	_
of	_	_
routing	_	_
with	_	_
multiple	_	_
additive	_	_
constraints	_	_
.	_	_

#395
Acknowledgments	_	_
This	_	_
work	_	_
was	_	_
supported	_	_
in	_	_
part	_	_
by	_	_
the	_	_
Cisco	_	_
Research	_	_
Initiative	_	_
Award	_	_
,	_	_
the	_	_
National	_	_
Natural	_	_
Science	_	_
Foundation	_	_
of	_	_
China	_	_
(	_	_
Grant	_	_
nos	_	_
.	_	_

#396
61101143	_	_
and	_	_
61231008	_	_
)	_	_
,	_	_
the	_	_
University	_	_
of	_	_
Hong	_	_
Kong	_	_
Small	_	_
Project	_	_
Fundings	_	_
,	_	_
the	_	_
Fundamental	_	_
Research	_	_
Funds	_	_
for	_	_
the	_	_
Central	_	_
Universities	_	_
K50511010006	_	_
,	_	_
and	_	_
the	_	_
111	_	_
Project	_	_
under	_	_
Grant	_	_
B08038	_	_
.	_	_