#0
SpiNNaker	_	_
:	_	_
Fault	_	_
tolerance	_	_
in	_	_
a	_	_
power-	_	_
and	_	_
area-	_	_
constrained	_	_
large-scale	_	_
neuromimetic	_	_
architecture	_	_
Highlights	_	_
•	_	_
Discussion	_	_
of	_	_
chip-level	_	_
fault	_	_
tolerance	_	_
of	_	_
SpiNNaker	_	_
's	_	_
design	_	_
.	_	_

#1
•	_	_
The	_	_
implemented	_	_
software	_	_
improves	_	_
fault	_	_
tolerance	_	_
by	_	_
providing	_	_
diagnostics	_	_
and	_	_
reconfiguration	_	_
.	_	_

#2
•	_	_
Exploration	_	_
of	_	_
communication-level	_	_
fault	_	_
tolerance	_	_
and	_	_
its	_	_
effects	_	_
on	_	_
system	_	_
scalability	_	_
.	_	_

#3
•	_	_
Wide	_	_
range	_	_
of	_	_
experiments	_	_
showing	_	_
that	_	_
SpiNNaker	_	_
is	_	_
highly	_	_
resilient	_	_
to	_	_
failures	_	_
.	_	_

#4
Abstract	_	_
SpiNNaker	_	_
is	_	_
a	_	_
biologically-inspired	_	_
massively-parallel	_	_
computer	_	_
designed	_	_
to	_	_
model	_	_
up	_	_
to	_	_
a	_	_
billion	_	_
spiking	_	_
neurons	_	_
in	_	_
real-time	_	_
.	_	_

#5
A	_	_
full-fledged	_	_
implementation	_	_
of	_	_
a	_	_
SpiNNaker	_	_
system	_	_
will	_	_
comprise	_	_
more	_	_
than	_	_
105	_	_
integrated	_	_
circuits	_	_
(	_	_
half	_	_
of	_	_
which	_	_
are	_	_
SDRAMs	_	_
and	_	_
half	_	_
multi-core	_	_
systems-on-chip	_	_
)	_	_
.	_	_

#6
Given	_	_
this	_	_
scale	_	_
,	_	_
it	_	_
is	_	_
unavoidable	_	_
that	_	_
some	_	_
components	_	_
fail	_	_
and	_	_
,	_	_
in	_	_
consequence	_	_
,	_	_
fault-tolerance	_	_
is	_	_
a	_	_
foundation	_	_
of	_	_
the	_	_
system	_	_
design	_	_
.	_	_

#7
Although	_	_
the	_	_
target	_	_
application	_	_
can	capability	_
tolerate	_	_
a	_	_
certain	_	_
,	_	_
low	_	_
level	_	_
of	_	_
failures	_	_
,	_	_
important	_	_
efforts	_	_
have	_	_
been	_	_
devoted	_	_
to	_	_
incorporate	_	_
different	_	_
techniques	_	_
for	_	_
fault	_	_
tolerance	_	_
.	_	_

#8
This	_	_
paper	_	_
is	_	_
devoted	_	_
to	_	_
discussing	_	_
how	_	_
hardware	_	_
and	_	_
software	_	_
mechanisms	_	_
collaborate	_	_
to	_	_
make	_	_
SpiNNaker	_	_
operate	_	_
properly	_	_
even	_	_
in	_	_
the	_	_
very	_	_
likely	_	_
scenario	_	_
of	_	_
component	_	_
failures	_	_
and	_	_
how	_	_
it	_	_
can	capability	_
tolerate	_	_
system-degradation	_	_
levels	_	_
well	_	_
above	_	_
those	_	_
expected	_	_
.	_	_

#9
Introduction	_	_
SpiNNaker	_	_
is	_	_
an	_	_
application	_	_
specific	_	_
design	_	_
intended	_	_
to	_	_
model	_	_
large	_	_
biological	_	_
neural	_	_
networks	_	_
-	_	_
the	_	_
name	_	_
"	_	_
SpiNNaker	_	_
"	_	_
being	_	_
derived	_	_
from	_	_
'Spiking	_	_
Neural	_	_
Network	_	_
architecture	_	_
'	_	_
.	_	_

#10
It	_	_
consists	_	_
of	_	_
a	_	_
toroidal	_	_
arrangement	_	_
of	_	_
processing	_	_
nodes	_	_
,	_	_
each	_	_
incorporating	_	_
a	_	_
purpose-built	_	_
,	_	_
multi-core	_	_
System-on-Chip	_	_
(	_	_
SoC	_	_
)	_	_
and	_	_
an	_	_
SDRAM	_	_
memory	_	_
(	_	_
Fig	_	_
.	_	_
1	_	_
)	_	_
.	_	_

#11
Neurons	_	_
are	_	_
modelled	_	_
in	_	_
software	_	_
running	_	_
on	_	_
embedded	_	_
ARM968	_	_
processors	_	_
;	_	_
each	_	_
core	_	_
is	_	_
intended	_	_
to	_	_
model	_	_
a	_	_
nominal	_	_
1000	_	_
neurons	_	_
.	_	_

#12
Small-scale	_	_
SpiNNaker	_	_
systems	_	_
have	_	_
successfully	_	_
been	_	_
used	_	_
as	_	_
control	_	_
systems	_	_
in	_	_
embedded	_	_
applications	_	_
[	_	_
1	_	_
]	_	_
,	_	_
providing	_	_
robots	_	_
with	_	_
real-time	_	_
stimulus-response	_	_
behaviour	_	_
as	_	_
described	_	_
in	_	_
[	_	_
2	_	_
]	_	_
.	_	_

#13
However	_	_
the	_	_
ultimate	_	_
aiming	_	_
of	_	_
the	_	_
project	_	_
is	_	_
to	_	_
construct	_	_
a	_	_
machine	_	_
able	_	_
to	_	_
simulate	_	_
up	_	_
to	_	_
109	_	_
neurons	_	_
in	_	_
real	_	_
time	_	_
.	_	_

#14
To	_	_
put	_	_
this	_	_
number	_	_
in	_	_
context	_	_
some	_	_
small	_	_
primates	_	_
have	_	_
brains	_	_
with	_	_
slightly	_	_
lower	_	_
neuron	_	_
counts	_	_
whereas	_	_
the	_	_
human	_	_
brain	_	_
has	_	_
roughly	_	_
86	_	_
times	_	_
this	_	_
number	_	_
[	_	_
3	_	_
]	_	_
.	_	_

#15
To	_	_
reach	_	_
this	_	_
number	_	_
of	_	_
neurons	_	_
more	_	_
than	_	_
one	_	_
hundred	_	_
thousand	_	_
integrated	_	_
circuits	_	_
will	_	_
be	_	_
needed	_	_
(	_	_
half	_	_
of	_	_
which	_	_
are	_	_
SpiNNaker	_	_
chips	_	_
and	_	_
the	_	_
other	_	_
half	_	_
SDRAMs	_	_
)	_	_
.	_	_

#16
A	_	_
system	_	_
of	_	_
this	_	_
scale	_	_
may	feasibility-speculation	_
be	_	_
expected	_	_
to	_	_
suffer	_	_
component	_	_
failures	_	_
and	_	_
many	_	_
features	_	_
of	_	_
its	_	_
design	_	_
are	_	_
included	_	_
to	_	_
provide	_	_
a	_	_
certain	_	_
degree	_	_
of	_	_
fault	_	_
tolerance	_	_
.	_	_

#17
These	_	_
features	_	_
can	feasibility	_
sometimes	_	_
be	_	_
justified	_	_
on	_	_
cost	_	_
alone	_	_
:	_	_
the	_	_
overall	_	_
yield	_	_
for	_	_
the	_	_
100mm2	_	_
SpiNNaker	_	_
SoC	_	_
was	_	_
estimated	_	_
,	_	_
using	_	_
public	_	_
domain	_	_
yield	_	_
statistics	_	_
on	_	_
a	_	_
20-core	_	_
,	_	_
at	_	_
50	_	_
%	_	_
fault-free	_	_
chips	_	_
,	_	_
25	_	_
%	_	_
single-fault	_	_
chips	_	_
,	_	_
10	_	_
%	_	_
two-fault	_	_
chips	_	_
and	_	_
the	_	_
remaining	_	_
15	_	_
%	_	_
will	_	_
be	_	_
unusable	_	_
due	_	_
to	_	_
critical	_	_
failures	_	_
.	_	_

#18
Early	_	_
test	_	_
on	_	_
the	_	_
production	_	_
chip	_	_
(	_	_
in	_	_
Fig	_	_
.	_	_
2	_	_
)	_	_
show	_	_
similar	_	_
,	_	_
if	_	_
rather	_	_
better	_	_
,	_	_
yield	_	_
characteristics	_	_
(	_	_
see	_	_
Section	_	_
4	_	_
)	_	_
.	_	_

#19
The	_	_
35	_	_
%	_	_
of	_	_
chips	_	_
having	_	_
one	_	_
or	_	_
two	_	_
faults	_	_
would	_	_
not	_	_
be	_	_
usable	_	_
without	_	_
fault	_	_
tolerance	_	_
features	_	_
.	_	_

#20
Fault	_	_
tolerance	_	_
is	_	_
addressed	_	_
at	_	_
a	_	_
number	_	_
of	_	_
levels	_	_
,	_	_
not	_	_
least	_	_
the	_	_
application	_	_
itself	_	_
,	_	_
which	_	_
is	_	_
intrinsically	_	_
fault-tolerant	_	_
.	_	_

#21
SpiNNaker	_	_
incorporates	_	_
measures	_	_
to	_	_
enable	_	_
continued	_	_
function	_	_
in	_	_
the	_	_
presence	_	_
of	_	_
faults	_	_
;	_	_
in	_	_
fact	_	_
it	_	_
has	_	_
been	_	_
designed	_	_
as	_	_
a	_	_
power-	_	_
and	_	_
cost-effective	_	_
fault-tolerant	_	_
platform	_	_
.	_	_

#22
The	_	_
major	_	_
defence	_	_
against	_	_
faults	_	_
in	_	_
such	_	_
a	_	_
system	_	_
is	_	_
the	_	_
massive	_	_
processing	_	_
resource	_	_
.	_	_

#23
Processors	_	_
are	_	_
almost	_	_
free	_	_
and	_	_
dedicating	_	_
a	_	_
small	_	_
proportion	_	_
of	_	_
the	_	_
processing	_	_
power	_	_
for	_	_
system	_	_
management	_	_
and	_	_
reconfiguration	_	_
yields	_	_
significant	_	_
distributed	_	_
'intelligence	_	_
'	_	_
without	_	_
much	_	_
impact	_	_
on	_	_
the	_	_
application	_	_
.	_	_

#24
From	_	_
the	_	_
outset	_	_
the	_	_
intention	_	_
has	_	_
been	_	_
to	_	_
allocate	_	_
one	_	_
core	_	_
on	_	_
each	_	_
SoC	_	_
entirely	_	_
to	_	_
system	_	_
management	_	_
;	_	_
if	_	_
this	_	_
eventually	_	_
proves	_	_
insufficient	_	_
it	_	_
is	_	_
simple	_	_
to	_	_
delegate	_	_
a	_	_
second	_	_
core	_	_
to	_	_
this	_	_
task	_	_
.	_	_

#25
Cores	_	_
devoted	_	_
to	_	_
system	_	_
management	_	_
can	capability	_
identify	_	_
and	_	_
map	_	_
around	_	_
failed	_	_
devices	_	_
at	_	_
run	_	_
time	_	_
.	_	_

#26
Particular	_	_
attention	_	_
has	_	_
been	_	_
paid	_	_
to	_	_
inter-chip	_	_
communications	_	_
where	_	_
link	_	_
failures	_	_
or	_	_
transient	_	_
congestion	_	_
may	feasibility-options	_
be	_	_
routed	_	_
around	_	_
rapidly	_	_
without	_	_
software	_	_
intervention	_	_
.	_	_

#27
Finally	_	_
some	_	_
more	_	_
conventional	_	_
techniques	_	_
-	_	_
such	_	_
as	_	_
automatic	_	_
CRC	_	_
generation	_	_
and	_	_
checking	_	_
and	_	_
watchdog	_	_
timers	_	_
-	_	_
are	_	_
employed	_	_
in	_	_
each	_	_
processing	_	_
node	_	_
.	_	_

#28
As	_	_
a	_	_
large-scale	_	_
system	_	_
has	_	_
not	_	_
yet	_	_
been	_	_
built	_	_
the	_	_
full	_	_
possibilities	_	_
of	_	_
software	_	_
reconfiguration	_	_
have	_	_
yet	_	_
to	_	_
be	_	_
explored	_	_
.	_	_

#29
However	_	_
statistical	_	_
models	_	_
of	_	_
the	_	_
architecture	_	_
have	_	_
been	_	_
developed	_	_
and	_	_
used	_	_
to	_	_
verify	_	_
the	_	_
principles	_	_
,	_	_
and	_	_
the	_	_
hardware	_	_
mechanisms	_	_
themselves	_	_
have	_	_
been	_	_
tested	_	_
in	_	_
silicon	_	_
in	_	_
small-scale	_	_
(	_	_
4	_	_
chip	_	_
)	_	_
systems	_	_
.	_	_

#30
The	_	_
construction	_	_
of	_	_
a	_	_
larger	_	_
machine	_	_
is	_	_
in	_	_
progress	_	_
.	_	_

#31
Background	_	_
This	_	_
section	_	_
reviews	_	_
common	_	_
terminology	_	_
on	_	_
fault-tolerance	_	_
and	_	_
microelectronics	_	_
,	_	_
introducing	_	_
several	_	_
important	_	_
concepts	_	_
related	_	_
to	_	_
SpiNNaker	_	_
and	_	_
putting	_	_
in	_	_
context	_	_
how	_	_
fault	_	_
tolerance	_	_
is	_	_
addressed	_	_
.	_	_

#32
Throughout	_	_
this	_	_
paper	_	_
,	_	_
we	_	_
differentiate	_	_
between	_	_
soft	_	_
and	_	_
hard	_	_
errors	_	_
.	_	_

#33
Soft	_	_
errors	_	_
are	_	_
transient	_	_
errors	_	_
-	_	_
usually	_	_
produced	_	_
by	_	_
electromagnetic	_	_
noise	_	_
-	_	_
that	_	_
affect	_	_
the	_	_
state	_	_
of	_	_
a	_	_
bit	_	_
to	_	_
an	_	_
extent	_	_
that	_	_
it	_	_
swaps	_	_
its	_	_
value	_	_
(	_	_
from	_	_
0	_	_
to	_	_
1	_	_
,	_	_
or	_	_
vice	_	_
versa	_	_
)	_	_
.	_	_

#34
Cosmic	_	_
rays	_	_
are	_	_
nowadays	_	_
the	_	_
main	_	_
cause	_	_
of	_	_
soft	_	_
errors	_	_
[	_	_
4	_	_
]	_	_
.	_	_

#35
In	_	_
contrast	_	_
,	_	_
hard	_	_
errors	_	_
are	_	_
permanent	_	_
errors	_	_
due	_	_
to	_	_
physical	_	_
defects	_	_
,	_	_
usually	_	_
introduced	_	_
during	_	_
fabrication	_	_
.	_	_

#36
Some	_	_
authors	_	_
consider	_	_
a	_	_
third	_	_
type	_	_
of	_	_
error	_	_
,	_	_
intermittent	_	_
failures	_	_
in	_	_
which	_	_
a	_	_
component	_	_
is	_	_
barely	_	_
stable	_	_
and	_	_
behaves	_	_
irregularly	_	_
as	_	_
correct	_	_
or	_	_
as	_	_
erroneous	_	_
,	_	_
the	_	_
main	_	_
triggers	_	_
for	_	_
one	_	_
behaviour	_	_
or	_	_
the	_	_
other	_	_
being	_	_
environmental	_	_
factors	_	_
(	_	_
such	_	_
as	_	_
temperature	_	_
,	_	_
or	_	_
voltage	_	_
)	_	_
[	_	_
5	_	_
]	_	_
.	_	_

#37
We	_	_
consider	_	_
intermittent	_	_
failures	_	_
as	_	_
hard	_	_
failures	_	_
and	_	_
deactivate	_	_
components	_	_
that	_	_
exhibit	_	_
this	_	_
behaviour	_	_
.	_	_

#38
All	_	_
units	_	_
within	_	_
a	_	_
SpiNNaker	_	_
chip	_	_
are	_	_
provided	_	_
with	_	_
two	_	_
levels	_	_
of	_	_
reset	_	_
.	_	_

#39
A	_	_
'soft	_	_
'	_	_
reset	_	_
is	_	_
a	_	_
signal	_	_
to	_	_
the	_	_
state	_	_
machines	_	_
to	_	_
abandon	_	_
their	_	_
operation	_	_
at	_	_
the	_	_
next	_	_
convenient	_	_
opportunity	_	_
,	_	_
thus	_	_
allowing	_	_
any	_	_
handshakes	_	_
to	_	_
complete	_	_
first	_	_
.	_	_

#40
The	_	_
'hard	_	_
'	_	_
reset	_	_
involves	_	_
switching	_	_
off	_	_
a	_	_
component	_	_
and	_	_
restarting	_	_
it	_	_
in	_	_
order	_	_
to	_	_
reach	_	_
its	_	_
initial	_	_
state	_	_
.	_	_

#41
Note	_	_
that	_	_
the	_	_
latter	_	_
is	_	_
really	_	_
intended	_	_
only	_	_
for	_	_
power-up	_	_
.	_	_

#42
Globally	_	_
Asynchronous	_	_
Locally	_	_
Synchronous	_	_
(	_	_
GALS	_	_
)	_	_
technology	_	_
offers	_	_
the	_	_
possibility	_	_
of	_	_
synchronous	_	_
and	_	_
asynchronous	_	_
logic	_	_
to	_	_
coexist	_	_
,	_	_
obtaining	_	_
the	_	_
best	_	_
of	_	_
each	_	_
world	_	_
[	_	_
6	_	_
]	_	_
.	_	_

#43
Most	_	_
devices	_	_
use	_	_
synchronous	_	_
logic	_	_
whereas	_	_
communication	_	_
between	_	_
them	_	_
is	_	_
implemented	_	_
using	_	_
asynchronous	_	_
fabrics	_	_
.	_	_

#44
GALS	_	_
simplifies	_	_
development	_	_
and	_	_
reduces	_	_
power	_	_
consumption	_	_
but	_	_
,	_	_
in	_	_
contrast	_	_
,	_	_
makes	_	_
fault	_	_
tolerance	_	_
difficult	_	_
due	_	_
to	_	_
the	_	_
lack	_	_
of	_	_
time	_	_
awareness	_	_
.	_	_

#45
The	_	_
three	_	_
main	_	_
elements	_	_
for	_	_
fault-tolerance	_	_
are	_	_
the	_	_
Host	_	_
,	_	_
the	_	_
System	_	_
Controller	_	_
and	_	_
the	_	_
Monitor	_	_
Processor	_	_
and	_	_
Process	_	_
.	_	_

#46
The	_	_
Host	_	_
is	_	_
a	_	_
regular	_	_
computer	_	_
which	_	_
runs	_	_
an	_	_
application	_	_
that	_	_
interfaces	_	_
with	_	_
SpiNNaker	_	_
giving	_	_
the	_	_
Host	_	_
a	_	_
range	_	_
of	_	_
control	_	_
operations	_	_
over	_	_
the	_	_
hardware	_	_
.	_	_

#47
The	_	_
Host	_	_
is	_	_
in	_	_
charge	_	_
of	_	_
starting	_	_
the	_	_
system	_	_
,	_	_
uploading	_	_
neural	_	_
applications	_	_
and	_	_
data	_	_
and	_	_
looking	_	_
after	_	_
the	_	_
status	_	_
of	_	_
the	_	_
system	_	_
once	_	_
it	_	_
starts	_	_
its	_	_
execution	_	_
.	_	_

#48
It	_	_
includes	_	_
a	_	_
User	_	_
Interface	_	_
that	_	_
allows	_	_
exploration	_	_
of	_	_
the	_	_
status	_	_
of	_	_
SpiNNaker	_	_
components	_	_
(	_	_
see	_	_
Fig	_	_
.	_	_
3	_	_
)	_	_
.	_	_

#49
The	_	_
Monitor	_	_
Process	_	_
is	_	_
the	_	_
application	_	_
in	_	_
charge	_	_
of	_	_
controlling	_	_
the	_	_
status	_	_
of	_	_
each	_	_
chip	_	_
components	_	_
.	_	_

#50
It	_	_
requires	_	_
a	_	_
dedicated	_	_
core	_	_
,	_	_
namely	_	_
the	_	_
Monitor	_	_
Processor	_	_
,	_	_
which	_	_
is	_	_
selected	_	_
during	_	_
the	_	_
boot-up	_	_
process	_	_
from	_	_
all	_	_
the	_	_
functional	_	_
cores	_	_
.	_	_

#51
The	_	_
Monitor	_	_
Process	_	_
uses	_	_
the	_	_
System	_	_
Controller	_	_
,	_	_
a	_	_
specialized	_	_
piece	_	_
of	_	_
hardware	_	_
,	_	_
to	_	_
detect	_	_
and	_	_
try	_	_
to	_	_
heal	_	_
failing	_	_
components	_	_
.	_	_

#52
The	_	_
System	_	_
Controller	_	_
supports	_	_
soft	_	_
and	_	_
hard	_	_
resets	_	_
of	_	_
the	_	_
different	_	_
components	_	_
within	_	_
a	_	_
chip	_	_
and	_	_
also	_	_
communicates	_	_
with	_	_
the	_	_
System	_	_
Controller	_	_
in	_	_
neighbouring	_	_
chips	_	_
.	_	_

#53
Watchdog	_	_
devices	_	_
are	_	_
added	_	_
to	_	_
the	_	_
design	_	_
in	_	_
order	_	_
to	_	_
supervise	_	_
the	_	_
correct	_	_
operation	_	_
of	_	_
critical	_	_
components	_	_
such	_	_
as	_	_
the	_	_
Monitor	_	_
Process	_	_
,	_	_
or	_	_
the	_	_
communication	_	_
ports	_	_
.	_	_

#54
If	_	_
a	_	_
component	_	_
does	_	_
not	_	_
respond	_	_
for	_	_
a	_	_
predetermined	_	_
amount	_	_
of	_	_
time	_	_
,	_	_
the	_	_
watchdog	_	_
will	_	_
apply	_	_
'soft	_	_
'	_	_
reset	_	_
first	_	_
,	_	_
only	_	_
resorting	_	_
to	_	_
'hard	_	_
'	_	_
reset	_	_
if	_	_
this	_	_
fails	_	_
.	_	_

#55
If	_	_
both	_	_
resets	_	_
fail	_	_
the	_	_
watchdog	_	_
will	_	_
mark	_	_
the	_	_
component	_	_
as	_	_
faulty	_	_
in	_	_
the	_	_
System	_	_
Controller	_	_
so	_	_
that	_	_
the	_	_
Monitor	_	_
Process	_	_
can	capability	_
switch	_	_
it	_	_
off	_	_
or	_	_
,	_	_
alternatively	_	_
,	_	_
try	_	_
more	_	_
elaborated	_	_
nursing	_	_
.	_	_

#56
SpiNNaker	_	_
's	_	_
fault	_	_
tolerance	_	_
relies	_	_
mainly	_	_
on	_	_
redundancy	_	_
:	_	_
18	_	_
cores	_	_
,	_	_
6	_	_
output	_	_
links	_	_
,	_	_
2	_	_
PLLs	_	_
(	_	_
phase	_	_
locked	_	_
loops	_	_
)	_	_
and	_	_
the	_	_
memory	_	_
subsystem	_	_
.	_	_

#57
The	_	_
main	_	_
strength	_	_
of	_	_
this	_	_
redundancy	_	_
is	_	_
that	_	_
components	_	_
do	_	_
not	_	_
have	_	_
their	_	_
identifiers	_	_
hard-coded	_	_
,	_	_
and	_	_
therefore	_	_
the	_	_
functionality	_	_
of	_	_
one	_	_
component	_	_
can	feasibility	_
be	_	_
covered	_	_
seamlessly	_	_
by	_	_
any	_	_
redundant	_	_
one	_	_
.	_	_

#58
Practically	_	_
,	_	_
this	_	_
means	_	_
that	_	_
critical	_	_
components	_	_
such	_	_
as	_	_
the	_	_
Monitor	_	_
Processor	_	_
are	_	_
extremely	_	_
reliable	_	_
.	_	_

#59
Table	_	_
1	_	_
shows	_	_
the	_	_
relative	_	_
areas	_	_
of	_	_
the	_	_
different	_	_
components	_	_
of	_	_
the	_	_
chip	_	_
to	_	_
put	_	_
in	_	_
context	_	_
their	_	_
likelihood	_	_
of	_	_
fail	_	_
.	_	_

#60
The	_	_
largest	_	_
part	_	_
of	_	_
the	_	_
chip	_	_
is	_	_
devoted	_	_
to	_	_
cores	_	_
and	_	_
TCMs	_	_
,	_	_
the	_	_
most	_	_
redundant	_	_
and	_	_
therefore	_	_
less	_	_
critical	_	_
components	_	_
of	_	_
SpiNNaker	_	_
.	_	_

#61
Overview	_	_
of	_	_
SpiNNaker	_	_
Application-induced	_	_
architecture	_	_
SpiNNaker	_	_
simulates	_	_
spiking	_	_
neural	_	_
networks	_	_
using	_	_
Izhikevich	_	_
[	_	_
7	_	_
]	_	_
and	_	_
Leaky	_	_
Integrate	_	_
and	_	_
Fire	_	_
[	_	_
8	_	_
]	_	_
models	_	_
which	_	_
emulate	_	_
the	_	_
dynamics	_	_
of	_	_
biological	_	_
neural	_	_
systems	_	_
.	_	_

#62
However	_	_
SpiNNaker	_	_
has	_	_
an	_	_
architecture	_	_
general	_	_
enough	_	_
to	_	_
run	_	_
other	_	_
flavours	_	_
of	_	_
application	_	_
[	_	_
9	_	_
]	_	_
.	_	_

#63
For	_	_
example	_	_
it	_	_
also	_	_
supports	_	_
Multilayer	_	_
Perceptron	_	_
models	_	_
[	_	_
10	_	_
]	_	_
and	_	_
other	_	_
non-neural	_	_
applications	_	_
such	_	_
as	_	_
ray-tracing	_	_
,	_	_
many	_	_
body	_	_
interaction	_	_
,	_	_
finite	_	_
element	_	_
analysis	_	_
and	_	_
analogue	_	_
circuit	_	_
simulation	_	_
.	_	_

#64
Spiking	_	_
neural	_	_
systems	_	_
have	_	_
abundant	_	_
parallelism	_	_
and	_	_
no	_	_
explicit	_	_
requirement	_	_
of	_	_
coherence	_	_
as	_	_
only	_	_
local	_	_
information	_	_
is	_	_
used	_	_
by	_	_
the	_	_
neurons	_	_
.	_	_

#65
The	_	_
process	_	_
is	_	_
as	_	_
follows	_	_
:	_	_
each	_	_
neuron	_	_
has	_	_
a	_	_
membrane	_	_
potential	_	_
which	_	_
is	_	_
affected	_	_
by	_	_
incoming	_	_
stimuli	_	_
(	_	_
signals	_	_
)	_	_
.	_	_

#66
If	_	_
the	_	_
membrane	_	_
potential	_	_
exceeds	_	_
a	_	_
given	_	_
threshold	_	_
,	_	_
the	_	_
neuron	_	_
discharges	_	_
and	_	_
fires	_	_
a	_	_
signal	_	_
(	_	_
a	_	_
so-called	_	_
spike	_	_
)	_	_
which	_	_
is	_	_
transmitted	_	_
to	_	_
all	_	_
neurons	_	_
connected	_	_
through	_	_
a	_	_
synaptic	_	_
connection	_	_
,	_	_
typically	_	_
in	_	_
the	_	_
order	_	_
of	_	_
103	_	_
[	_	_
11	_	_
]	_	_
.	_	_

#67
Biological	_	_
neurons	_	_
work	_	_
in	_	_
a	_	_
noisy	_	_
environment	_	_
[	_	_
12	_	_
]	_	_
and	_	_
,	_	_
indeed	_	_
,	_	_
die	_	_
during	_	_
normal	_	_
operation	_	_
(	_	_
adult	_	_
humans	_	_
lose	_	_
about	_	_
one	_	_
neuron	_	_
per	_	_
second	_	_
[	_	_
13	_	_
]	_	_
)	_	_
.	_	_

#68
Thus	_	_
their	_	_
operation	_	_
is	_	_
neither	_	_
perfect	_	_
nor	_	_
deterministic	_	_
.	_	_

#69
The	_	_
SpiNNaker	_	_
architecture	_	_
reflects	_	_
this	_	_
behaviour	_	_
.	_	_

#70
Neurons	_	_
are	_	_
modelled	_	_
as	_	_
event-driven	_	_
applications	_	_
executed	_	_
by	_	_
the	_	_
processing	_	_
cores	_	_
.	_	_

#71
Spikes	_	_
are	_	_
represented	_	_
by	_	_
short	_	_
network	_	_
packets	_	_
(	_	_
40	_	_
bits	_	_
)	_	_
using	_	_
Address-Event	_	_
Representation	_	_
(	_	_
AER	_	_
)	_	_
,	_	_
a	_	_
format	_	_
widely	_	_
used	_	_
in	_	_
neural	_	_
network	_	_
models	_	_
[	_	_
14-16	_	_
]	_	_
.	_	_

#72
Packets	_	_
are	_	_
multicast	_	_
routed	_	_
in	_	_
hardware	_	_
with	_	_
the	_	_
on-chip	_	_
routers	_	_
replicating	_	_
them	_	_
as	_	_
necessary	_	_
to	_	_
reach	_	_
all	_	_
their	_	_
destinations	_	_
.	_	_

#73
Given	_	_
that	_	_
digital	_	_
electronics	_	_
are	_	_
orders	_	_
of	_	_
magnitude	_	_
faster	_	_
than	_	_
the	_	_
biological	_	_
process	_	_
-	_	_
for	_	_
example	_	_
,	_	_
biological	_	_
spikes	_	_
are	_	_
propagated	_	_
through	_	_
an	_	_
axon	_	_
for	_	_
up	_	_
to	_	_
20ms	_	_
while	_	_
transmitting	_	_
a	_	_
packet	_	_
through	_	_
the	_	_
SpiNNaker	_	_
interconnection	_	_
network	_	_
should	deontic	_
take	_	_
a	_	_
few	_	_
microseconds	_	_
at	_	_
most	_	_
-	_	_
it	_	_
is	_	_
possible	_	_
to	_	_
multiplex	_	_
many	_	_
neurons	_	_
onto	_	_
a	_	_
processor	_	_
and	_	_
many	_	_
spikes	_	_
onto	_	_
a	_	_
network	_	_
although	_	_
the	_	_
consequence	_	_
of	_	_
a	_	_
single-point	_	_
failure	_	_
can	options	_
easily	_	_
be	_	_
more	_	_
serious	_	_
than	_	_
the	_	_
loss	_	_
of	_	_
one	_	_
neuron	_	_
.	_	_

#74
SpiNNaker	_	_
chip	_	_
The	_	_
basic	_	_
unit	_	_
of	_	_
the	_	_
system	_	_
is	_	_
the	_	_
SpiNNaker	_	_
chip	_	_
(	_	_
Fig	_	_
.	_	_
4	_	_
)	_	_
,	_	_
custom	_	_
GALS	_	_
SoC	_	_
with	_	_
a	_	_
network	_	_
router	_	_
and	_	_
18	_	_
cores	_	_
sharing	_	_
some	_	_
resources	_	_
such	_	_
as	_	_
a	_	_
SRAM	_	_
,	_	_
a	_	_
boot	_	_
ROM	_	_
,	_	_
a	_	_
System	_	_
Controller	_	_
,	_	_
an	_	_
Ethernet	_	_
interface	_	_
and	_	_
an	_	_
128Mbyte	_	_
off-chip	_	_
(	_	_
but	_	_
in-package	_	_
,	_	_
see	_	_
Fig	_	_
.	_	_
2	_	_
)	_	_
SDRAM	_	_
.	_	_

#75
Each	_	_
processing	_	_
core	_	_
is	_	_
an	_	_
ARM968	_	_
,	_	_
with	_	_
two	_	_
private	_	_
tightly	_	_
coupled	_	_
memories	_	_
for	_	_
instructions	_	_
(	_	_
ITCM	_	_
)	_	_
and	_	_
data	_	_
(	_	_
DTCM	_	_
)	_	_
,	_	_
some	_	_
peripherals	_	_
-	_	_
including	_	_
direct	_	_
access	_	_
to	_	_
the	_	_
Comms	_	_
NoC	_	_
-	_	_
and	_	_
a	_	_
bridge	_	_
to	_	_
the	_	_
shared	_	_
resources	_	_
.	_	_

#76
Fault	_	_
tolerant	_	_
architecture	_	_
From	_	_
Section	_	_
3	_	_
some	_	_
fault-tolerant	_	_
features	_	_
will	_	_
already	_	_
be	_	_
apparent	_	_
.	_	_

#77
Firstly	_	_
the	_	_
application	_	_
itself	_	_
is	_	_
robust	_	_
against	_	_
minor	_	_
perturbations	_	_
in	_	_
timing	_	_
and	_	_
should	deontic	_
tolerate	_	_
a	_	_
percentage	_	_
of	_	_
missing	_	_
spikes	_	_
and	_	_
neurons	_	_
.	_	_

#78
Secondly	_	_
,	_	_
there	_	_
is	_	_
a	_	_
huge	_	_
hardware	_	_
resource	_	_
available	_	_
which	_	_
provides	_	_
a	_	_
high	_	_
degree	_	_
of	_	_
redundancy	_	_
.	_	_

#79
Although	_	_
each	_	_
node	_	_
has	_	_
18	_	_
cores	_	_
,	_	_
the	_	_
intended	_	_
use	_	_
does	_	_
not	_	_
require	_	_
any	_	_
specific	_	_
number	_	_
of	_	_
cores	_	_
,	_	_
merely	_	_
(	_	_
any	_	_
)	_	_
one	_	_
to	_	_
provide	_	_
node	_	_
control	_	_
and	_	_
some	_	_
others	_	_
to	_	_
run	_	_
the	_	_
application	_	_
.	_	_

#80
Indeed	_	_
for	_	_
cost	_	_
purposes	_	_
it	_	_
is	_	_
intended	_	_
to	_	_
use	_	_
some	_	_
flawed	_	_
devices	_	_
;	_	_
yield	_	_
estimates	_	_
suggest	_	_
that	_	_
this	_	_
may	capability-speculation	_
improve	_	_
the	_	_
usability	_	_
of	_	_
manufactured	_	_
dice	_	_
from	_	_
50	_	_
%	_	_
to	_	_
around	_	_
80	_	_
%	_	_
.	_	_

#81
Based	_	_
on	_	_
the	_	_
area	_	_
use	_	_
of	_	_
the	_	_
die	_	_
the	_	_
majority	_	_
of	_	_
flaws	_	_
may	feasibility-speculation	_
be	_	_
expected	_	_
to	_	_
be	_	_
in	_	_
local	_	_
memories	_	_
;	_	_
these	_	_
may	options	_
leave	_	_
a	_	_
core	_	_
degraded	_	_
but	_	_
still	_	_
usable	_	_
although	_	_
the	_	_
simplest	_	_
action	_	_
is	_	_
still	_	_
to	_	_
shut	_	_
it	_	_
down	_	_
.	_	_

#82
Preliminary	_	_
evidence	_	_
from	_	_
the	_	_
first	_	_
batch	_	_
of	_	_
fabricated	_	_
chips	_	_
suggests	_	_
these	_	_
estimates	_	_
to	_	_
be	_	_
appropriate	_	_
if	_	_
slightly	_	_
pessimistic	_	_
.	_	_

#83
Of	_	_
46	_	_
chips	_	_
,	_	_
30	_	_
(	_	_
65	_	_
%	_	_
)	_	_
were	_	_
flawless	_	_
chips	_	_
,	_	_
12	_	_
(	_	_
26	_	_
%	_	_
)	_	_
have	_	_
17	_	_
working	_	_
cores	_	_
and	_	_
4	_	_
(	_	_
9	_	_
%	_	_
)	_	_
have	_	_
more	_	_
serious	_	_
problems	_	_
.	_	_

#84
Of	_	_
the	_	_
12	_	_
,	_	_
11	_	_
have	_	_
private	_	_
memory	_	_
faults	_	_
and	_	_
one	_	_
a	_	_
peripheral	_	_
logic	_	_
fault	_	_
.	_	_

#85
From	_	_
this	_	_
small	_	_
sample	_	_
it	_	_
seems	_	_
likely	_	_
that	_	_
42	_	_
of	_	_
46	_	_
(	_	_
93	_	_
%	_	_
)	_	_
dice	_	_
will	_	_
be	_	_
serviceable	_	_
because	_	_
manufacturing	_	_
faults	_	_
can	feasibility	_
be	_	_
tolerated	_	_
.	_	_

#86
This	_	_
represents	_	_
an	_	_
increase	_	_
of	_	_
roughly	_	_
40	_	_
%	_	_
in	_	_
terms	_	_
of	_	_
achievable	_	_
computing	_	_
power	_	_
(	_	_
from	_	_
540	_	_
to	_	_
744	_	_
cores	_	_
)	_	_
.	_	_

#87
This	_	_
redundancy	_	_
can	feasibility	_
also	_	_
be	_	_
used	_	_
to	_	_
protect	_	_
against	_	_
(	_	_
less	_	_
likely	_	_
)	_	_
run-time	_	_
faults	_	_
by	_	_
offloading	_	_
work	_	_
.	_	_

#88
By	_	_
keeping	_	_
a	_	_
stand-by	_	_
core	_	_
on	_	_
each	_	_
node	_	_
a	_	_
run-time	_	_
fault	_	_
can	feasibility	_
be	_	_
accommodated	_	_
without	_	_
too	_	_
much	_	_
effort	_	_
,	_	_
particularly	_	_
as	_	_
the	_	_
majority	_	_
of	_	_
the	_	_
data	_	_
is	_	_
held	_	_
in	_	_
the	_	_
separate	_	_
,	_	_
shared	_	_
SDRAM	_	_
.	_	_

#89
The	_	_
SDRAM	_	_
devices	_	_
are	_	_
'known	_	_
good	_	_
'	_	_
before	_	_
packaging	_	_
.	_	_

#90
Each	_	_
provides	_	_
a	_	_
node	_	_
with	_	_
more	_	_
than	_	_
its	_	_
anticipated	_	_
store	_	_
requirement	_	_
,	_	_
thus	_	_
there	_	_
is	_	_
capacity	_	_
to	_	_
test	_	_
and	_	_
map	_	_
around	_	_
any	_	_
dubious	_	_
region	_	_
.	_	_

#91
This	_	_
is	_	_
one	_	_
of	_	_
the	_	_
tasks	_	_
for	_	_
the	_	_
local	_	_
Monitor	_	_
Processor	_	_
.	_	_

#92
In	_	_
addition	_	_
to	_	_
redundancy	_	_
,	_	_
a	_	_
number	_	_
of	_	_
features	_	_
have	_	_
been	_	_
included	_	_
either	_	_
as	_	_
design	_	_
considerations	_	_
or	_	_
specifically	_	_
for	_	_
fault-tolerance	_	_
.	_	_

#93
Fig	_	_
.	_	_
5	_	_
shows	_	_
a	_	_
map	_	_
of	_	_
the	_	_
expected	_	_
failure	_	_
types	_	_
and	_	_
the	_	_
mechanisms	_	_
provided	_	_
to	_	_
reduce	_	_
their	_	_
impact	_	_
in	_	_
the	_	_
usability	_	_
of	_	_
SpiNNaker	_	_
.	_	_

#94
Diagnostics	_	_
and	_	_
dynamic	_	_
configuration	_	_
System	_	_
routines	_	_
can	capability-feasibility	_
clearly	_	_
be	_	_
split	_	_
into	_	_
two	_	_
:	_	_
(	_	_
i	_	_
)	_	_
power-on	_	_
testing	_	_
and	_	_
initial	_	_
configuration	_	_
,	_	_
and	_	_
(	_	_
ii	_	_
)	_	_
isolation	_	_
and	_	_
reconfiguration	_	_
during	_	_
normal	_	_
operation	_	_
.	_	_

#95
In	_	_
either	_	_
case	_	_
,	_	_
the	_	_
interaction	_	_
between	_	_
hardware	_	_
and	_	_
system	_	_
software	_	_
in	_	_
each	_	_
chip	_	_
is	_	_
coordinated	_	_
by	_	_
the	_	_
Monitor	_	_
Processor	_	_
which	_	_
maintains	_	_
a	_	_
continuously	_	_
updated	_	_
state	_	_
(	_	_
good	_	_
,	_	_
fault	_	_
,	_	_
disabled	_	_
,	_	_
etc	_	_
.	_	_
)	_	_

#96
of	_	_
the	_	_
chip	_	_
components	_	_
.	_	_

#97
The	_	_
System	_	_
Controller	_	_
can	capability	_
disable	_	_
or	_	_
reconfigure	_	_
chip	_	_
components	_	_
.	_	_

#98
In	_	_
extreme	_	_
failure	_	_
cases	_	_
the	_	_
System	_	_
Controller	_	_
can	feasibility	_
be	_	_
accessed	_	_
from	_	_
a	_	_
neighbouring	_	_
SpiNNaker	_	_
chip	_	_
using	_	_
a	_	_
local	_	_
debug	_	_
facility	_	_
.	_	_

#99
Power-on	_	_
diagnostics	_	_
and	_	_
configuration	_	_
Each	_	_
SpiNNaker	_	_
chip	_	_
performs	_	_
diagnostics	_	_
and	_	_
initialization	_	_
using	_	_
minimal	_	_
system	_	_
software	_	_
stored	_	_
in	_	_
the	_	_
Boot	_	_
ROM	_	_
.	_	_

#100
In	_	_
this	_	_
stage	_	_
each	_	_
processing	_	_
core	_	_
performs	_	_
a	_	_
power-on	_	_
self-test	_	_
and	_	_
initialisation	_	_
of	_	_
its	_	_
private	_	_
peripherals	_	_
.	_	_

#101
Healthy	_	_
cores	_	_
then	_	_
compete	_	_
to	_	_
access	_	_
the	_	_
System	_	_
Controller	_	_
monitor	_	_
election	_	_
register	_	_
,	_	_
the	_	_
winner	_	_
becoming	_	_
the	_	_
Monitor	_	_
Processor	_	_
.	_	_

#102
The	_	_
remaining	_	_
cores	_	_
simply	_	_
register	_	_
their	_	_
state	_	_
in	_	_
the	_	_
System	_	_
Controller	_	_
and	_	_
stall	_	_
until	_	_
the	_	_
Monitor	_	_
completes	_	_
the	_	_
node	_	_
configuration	_	_
(	_	_
including	_	_
detailed	_	_
chip-level	_	_
tests	_	_
,	_	_
initialising	_	_
shared	_	_
resources	_	_
and	_	_
detecting	_	_
any	_	_
connected	_	_
Ethernet	_	_
port	_	_
)	_	_
.	_	_

#103
All	_	_
chip-level	_	_
results	_	_
are	_	_
stored	_	_
in	_	_
the	_	_
System	_	_
Controller	_	_
.	_	_

#104
After	_	_
this	_	_
step	_	_
,	_	_
nodes	_	_
enter	_	_
a	_	_
listening	_	_
mode	_	_
awaiting	_	_
external	_	_
instructions	_	_
.	_	_

#105
The	_	_
host	_	_
machine	_	_
designates	_	_
one	_	_
or	_	_
more	_	_
Ethernet	_	_
attached	_	_
nodes	_	_
to	_	_
receive	_	_
the	_	_
system	_	_
image	_	_
to	_	_
be	_	_
executed	_	_
by	_	_
the	_	_
Monitor	_	_
Processors	_	_
.	_	_

#106
The	_	_
image	_	_
is	_	_
transmitted	_	_
in	_	_
blocks	_	_
to	_	_
the	_	_
Ethernet	_	_
attached	_	_
Monitors	_	_
which	_	_
compile	_	_
the	_	_
image	_	_
,	_	_
perform	_	_
a	_	_
CRC	_	_
check	_	_
and	_	_
copy	_	_
it	_	_
to	_	_
their	_	_
local	_	_
memory	_	_
where	_	_
it	_	_
can	feasibility	_
be	_	_
executed	_	_
.	_	_

#107
The	_	_
system	_	_
image	_	_
informs	_	_
the	_	_
host	_	_
machine	_	_
and	_	_
propagates	_	_
itself	_	_
to	_	_
its	_	_
neighbours	_	_
;	_	_
these	_	_
neighbours	_	_
send	_	_
it	_	_
forward	_	_
their	_	_
neighbours	_	_
,	_	_
and	_	_
so	_	_
on	_	_
.	_	_

#108
This	_	_
way	_	_
the	_	_
system	_	_
image	_	_
is	_	_
flood-filled	_	_
in	_	_
a	_	_
redundant	_	_
manner	_	_
as	_	_
each	_	_
chip	_	_
will	_	_
receive	_	_
several	_	_
copies	_	_
of	_	_
the	_	_
system	_	_
image	_	_
(	_	_
see	_	_
below	_	_
)	_	_
.	_	_

#109
Once	_	_
system	_	_
boot	_	_
is	_	_
complete	_	_
,	_	_
the	_	_
Monitor	_	_
Processors	_	_
test	_	_
connections	_	_
to	_	_
neighbouring	_	_
chips	_	_
to	_	_
record	_	_
any	_	_
faulty	_	_
link	_	_
or	_	_
neighbour	_	_
.	_	_

#110
The	_	_
host	_	_
nominates	_	_
one	_	_
Ethernet-attached	_	_
chip	_	_
as	_	_
the	_	_
Reference	_	_
Chip	_	_
,	_	_
making	_	_
it	_	_
the	_	_
origin	_	_
address	_	_
,	_	_
(	_	_
0,0	_	_
)	_	_
,	_	_
of	_	_
the	_	_
network	_	_
,	_	_
notifying	_	_
it	_	_
of	_	_
the	_	_
topological	_	_
characteristics	_	_
,	_	_
such	_	_
as	_	_
the	_	_
number	_	_
of	_	_
chips	_	_
.	_	_

#111
The	_	_
Reference	_	_
Chip	_	_
then	_	_
broadcasts	_	_
its	_	_
address	_	_
to	_	_
its	_	_
six	_	_
neighbours	_	_
,	_	_
and	_	_
so	_	_
on	_	_
.	_	_

#112
This	_	_
generates	_	_
a	_	_
second	_	_
wave	_	_
through	_	_
the	_	_
network	_	_
that	_	_
enables	_	_
each	_	_
chip	_	_
to	_	_
compute	_	_
its	_	_
relative	_	_
address	_	_
in	_	_
the	_	_
network	_	_
topology	_	_
and	_	_
configure	_	_
point-to-point	_	_
routing	_	_
tables	_	_
.	_	_

#113
Evaluation	_	_
of	_	_
flood	_	_
filling	_	_
policies	_	_
Data	_	_
loading	_	_
can	feasibility	_
be	_	_
done	_	_
via	_	_
several	_	_
flood-fill	_	_
strategies	_	_
,	_	_
each	_	_
offering	_	_
different	_	_
performance	_	_
and	_	_
fault	_	_
resilience	_	_
compromises	_	_
.	_	_

#114
Several	_	_
of	_	_
these	_	_
strategies	_	_
were	_	_
evaluated	_	_
previously	_	_
[	_	_
17	_	_
]	_	_
,	_	_
but	_	_
when	_	_
that	_	_
evaluation	_	_
was	_	_
performed	_	_
,	_	_
broadcast	_	_
packets	_	_
were	_	_
addressed	_	_
to	_	_
all	_	_
neighbours	_	_
and	_	_
consequently	_	_
most	_	_
strategies	_	_
had	_	_
to	_	_
use	_	_
point-to-point	_	_
(	_	_
unicast	_	_
)	_	_
packets	_	_
,	_	_
with	_	_
the	_	_
consequent	_	_
overloading	_	_
of	_	_
the	_	_
injection	_	_
ports	_	_
.	_	_

#115
To	_	_
overcome	_	_
this	_	_
overhead	_	_
a	_	_
selective	_	_
multicast	_	_
able	_	_
to	_	_
forward	_	_
packets	_	_
to	_	_
a	_	_
subset	_	_
of	_	_
the	_	_
neighbours	_	_
was	_	_
included	_	_
in	_	_
the	_	_
final	_	_
design	_	_
.	_	_

#116
The	_	_
following	_	_
evaluation	_	_
considers	_	_
several	_	_
strategies	_	_
using	_	_
this	_	_
selective	_	_
multicast	_	_
.	_	_

#117
Fig	_	_
.	_	_
6	_	_
summarizes	_	_
the	_	_
results	_	_
of	_	_
an	_	_
event-driven	_	_
simulation	_	_
of	_	_
the	_	_
application	_	_
loading	_	_
process	_	_
in	_	_
the	_	_
largest	_	_
system	_	_
configuration	_	_
(	_	_
256	_	_
×256	_	_
nodes	_	_
)	_	_
.	_	_

#118
The	_	_
top	_	_
two	_	_
graphs	_	_
consider	_	_
SpiNNaker	_	_
systems	_	_
without	_	_
failures	_	_
and	_	_
are	_	_
intended	_	_
to	_	_
show	_	_
the	_	_
performance	_	_
(	_	_
time	_	_
consumed	_	_
in	_	_
the	_	_
floodfill	_	_
)	_	_
.	_	_

#119
The	_	_
bottom	_	_
two	_	_
consider	_	_
systems	_	_
with	_	_
different	_	_
link	_	_
failure	_	_
configurations	_	_
and	_	_
show	_	_
the	_	_
resilience	_	_
level	_	_
provided	_	_
by	_	_
each	_	_
strategy	_	_
.	_	_

#120
Next	_	_
we	_	_
explain	_	_
how	_	_
these	_	_
graphs	_	_
can	feasibility	_
be	_	_
interpreted	_	_
.	_	_

#121
Seven	_	_
different	_	_
flood-fill	_	_
policies	_	_
were	_	_
considered	_	_
in	_	_
the	_	_
simulations	_	_
:	_	_
•	_	_
bcast	_	_
sends	_	_
the	_	_
packet	_	_
to	_	_
all	_	_
neighbouring	_	_
chips	_	_
.	_	_

#122
•	_	_
2msg	_	_
sends	_	_
the	_	_
packet	_	_
only	_	_
to	_	_
the	_	_
neighbours	_	_
in	_	_
the	_	_
positive	_	_
X	_	_
and	_	_
Y	_	_
directions	_	_
.	_	_

#123
This	_	_
is	_	_
the	_	_
minimum	_	_
number	_	_
of	_	_
neighbours	_	_
required	_	_
to	_	_
perform	_	_
an	_	_
efficient	_	_
flooding	_	_
.	_	_

#124
•	_	_
3msg	_	_
sends	_	_
the	_	_
packet	_	_
to	_	_
the	_	_
neighbours	_	_
in	_	_
positive	_	_
X	_	_
,	_	_
Y	_	_
and	_	_
XY	_	_
diagonal	_	_
.	_	_

#125
•	_	_
5msg	_	_
sends	_	_
the	_	_
packet	_	_
to	_	_
all	_	_
the	_	_
neighbours	_	_
but	_	_
the	_	_
one	_	_
the	_	_
original	_	_
packet	_	_
was	_	_
received	_	_
from	_	_
.	_	_

#126
•	_	_
randP	_	_
sends	_	_
the	_	_
packet	_	_
in	_	_
the	_	_
positive	_	_
X	_	_
and	_	_
Y	_	_
directions	_	_
and	_	_
in	_	_
addition	_	_
randomly	_	_
to	_	_
each	_	_
of	_	_
the	_	_
other	_	_
directions	_	_
with	_	_
a	_	_
P	_	_
%	_	_
probability	_	_
.	_	_

#127
We	_	_
considered	_	_
25	_	_
%	_	_
(	_	_
rand25	_	_
)	_	_
,	_	_
50	_	_
%	_	_
(	_	_
rand50	_	_
)	_	_
and	_	_
75	_	_
%	_	_
(	_	_
rand75	_	_
)	_	_
in	_	_
our	_	_
evaluation	_	_
.	_	_

#128
In	_	_
the	_	_
simulations	_	_
considering	_	_
several	_	_
Ethernet	_	_
ports	_	_
,	_	_
nodes	_	_
located	_	_
at	_	_
(	_	_
0	_	_
,	_	_
0	_	_
)	_	_
,	_	_
(	_	_
128	_	_
,	_	_
128	_	_
)	_	_
,	_	_
(	_	_
128	_	_
,	_	_
0	_	_
)	_	_
and	_	_
(	_	_
0	_	_
,	_	_
128	_	_
)	_	_
are	_	_
connected	_	_
to	_	_
the	_	_
host	_	_
.	_	_

#129
The	_	_
results	_	_
without	_	_
failures	_	_
in	_	_
Fig	_	_
.	_	_
6	_	_
(	_	_
a	_	_
)	_	_
and	_	_
(	_	_
b	_	_
)	_	_
show	_	_
that	_	_
(	_	_
i	_	_
)	_	_
different	_	_
flooding	_	_
strategies	_	_
provide	_	_
diverse	_	_
performance	_	_
levels	_	_
,	_	_
(	_	_
ii	_	_
)	_	_
given	_	_
the	_	_
2D-pipelined	_	_
nature	_	_
of	_	_
the	_	_
application	_	_
loading	_	_
procedure	_	_
,	_	_
the	_	_
loading	_	_
times	_	_
are	_	_
not	_	_
affected	_	_
substantially	_	_
by	_	_
the	_	_
network	_	_
size	_	_
;	_	_
and	_	_
(	_	_
iii	_	_
)	_	_
similarly	_	_
,	_	_
the	_	_
number	_	_
of	_	_
Ethernet-connected	_	_
nodes	_	_
does	_	_
not	_	_
affect	_	_
significantly	_	_
the	_	_
time	_	_
required	_	_
to	_	_
load	_	_
the	_	_
application	_	_
.	_	_

#130
The	_	_
configurations	_	_
with	_	_
failures	_	_
-	_	_
see	_	_
Fig	_	_
.	_	_
6	_	_
(	_	_
c	_	_
)	_	_
and	_	_
(	_	_
d	_	_
)	_	_
-	_	_
present	_	_
the	_	_
normalized	_	_
number	_	_
of	_	_
undelivered	_	_
packets	_	_
.	_	_

#131
Points	_	_
that	_	_
are	_	_
not	_	_
shown	_	_
in	_	_
the	_	_
plot	_	_
mean	_	_
that	_	_
the	_	_
loading	_	_
process	_	_
was	_	_
successful	_	_
.	_	_

#132
The	_	_
failure	_	_
distributions	_	_
considered	_	_
in	_	_
this	_	_
study	_	_
are	_	_
the	_	_
following.•	_	_
vert	_	_
represents	_	_
a	_	_
configuration	_	_
where	_	_
all	_	_
the	_	_
links	_	_
along	_	_
the	_	_
Y-axis	_	_
in	_	_
the	_	_
bisection	_	_
are	_	_
treated	_	_
as	_	_
faulty	_	_
,	_	_
leading	_	_
to	_	_
a	_	_
network	_	_
split	_	_
in	_	_
vertical	_	_
columns	_	_
.	_	_

#133
•	_	_
horiz	_	_
represents	_	_
a	_	_
similar	_	_
configuration	_	_
,	_	_
but	_	_
affecting	_	_
the	_	_
horizontal	_	_
axis	_	_
.	_	_

#134
•	_	_
cross	_	_
represents	_	_
the	_	_
union	_	_
of	_	_
horiz	_	_
and	_	_
vert	_	_
.	_	_

#135
Small-scale	_	_
examples	_	_
of	_	_
these	_	_
three	_	_
configurations	_	_
are	_	_
shown	_	_
in	_	_
Fig	_	_
.	_	_
7	_	_
.	_	_

#136
•	_	_
The	_	_
remaining	_	_
configurations	_	_
represent	_	_
uniform	_	_
random	_	_
sets	_	_
of	_	_
link	_	_
failures	_	_
:	_	_
1536	_	_
(	_	_
rnd1	_	_
)	_	_
,	_	_
3072	_	_
(	_	_
rnd2	_	_
)	_	_
,	_	_
6144	_	_
(	_	_
rnd3	_	_
)	_	_
,	_	_
12,288	_	_
(	_	_
rnd4	_	_
)	_	_
and	_	_
24,576	_	_
(	_	_
rnd5	_	_
)	_	_
.	_	_

#137
In	_	_
general	_	_
,	_	_
those	_	_
strategies	_	_
sending	_	_
more	_	_
packets	_	_
are	_	_
less	_	_
likely	_	_
to	_	_
lose	_	_
packets	_	_
but	_	_
at	_	_
the	_	_
price	_	_
of	_	_
increasing	_	_
the	_	_
time	_	_
required	_	_
to	_	_
finalize	_	_
the	_	_
whole	_	_
process	_	_
.	_	_

#138
In	_	_
all	_	_
cases	_	_
,	_	_
it	_	_
will	_	_
take	_	_
only	_	_
from	_	_
5	_	_
to	_	_
15	_	_
ms	_	_
to	_	_
load	_	_
an	_	_
application	_	_
completely	_	_
.	_	_

#139
Results	_	_
also	_	_
show	_	_
that	_	_
increasing	_	_
the	_	_
number	_	_
of	_	_
Ethernet	_	_
connections	_	_
improves	_	_
robustness	_	_
,	_	_
especially	_	_
in	_	_
scenarios	_	_
with	_	_
multiple	_	_
failures	_	_
.	_	_

#140
We	_	_
conclude	_	_
that	_	_
the	_	_
SpiNNaker	_	_
configuration	_	_
process	_	_
is	_	_
efficient	_	_
,	_	_
scalable	_	_
and	_	_
robust	_	_
.	_	_

#141
Moreover	_	_
,	_	_
there	_	_
is	_	_
a	_	_
reasonable	_	_
range	_	_
of	_	_
distribution	_	_
strategies	_	_
that	_	_
allow	_	_
trade-offs	_	_
between	_	_
speed	_	_
and	_	_
fault-resilience	_	_
.	_	_

#142
Run-time	_	_
reconfiguration	_	_
During	_	_
regular	_	_
operation	_	_
,	_	_
the	_	_
Monitor	_	_
Processor	_	_
periodically	_	_
checks	_	_
and	_	_
updates	_	_
the	_	_
state	_	_
of	_	_
chip	_	_
resources	_	_
,	_	_
including	_	_
the	_	_
state	_	_
of	_	_
the	_	_
links	_	_
to	_	_
its	_	_
neighbours	_	_
,	_	_
in	_	_
the	_	_
System	_	_
Controller	_	_
.	_	_

#143
Any	_	_
Monitor	_	_
Processor	_	_
can	capability	_
activate	_	_
the	_	_
neighbour	_	_
diagnostic	_	_
and	_	_
recovery	_	_
routine	_	_
if	_	_
it	_	_
suspects	_	_
a	_	_
neighbour	_	_
chip	_	_
is	_	_
not	_	_
working	_	_
properly	_	_
.	_	_

#144
This	_	_
nurse	_	_
Chip	_	_
will	_	_
'peek	_	_
and	_	_
poke	_	_
'	_	_
the	_	_
remote	_	_
System	_	_
Controller	_	_
to	_	_
identify	_	_
any	_	_
healthy	_	_
cores	_	_
.	_	_

#145
It	_	_
will	_	_
first	_	_
try	_	_
to	_	_
change	_	_
the	_	_
remote	_	_
Monitor	_	_
Processor	_	_
,	_	_
then	_	_
try	_	_
to	_	_
overcome	_	_
a	_	_
Boot	_	_
ROM	_	_
failure	_	_
by	_	_
copying	_	_
the	_	_
boot-up	_	_
code	_	_
to	_	_
the	_	_
remote	_	_
System	_	_
RAM	_	_
and	_	_
remapping	_	_
the	_	_
remote	_	_
Boot	_	_
ROM	_	_
and	_	_
System	_	_
RAM	_	_
.	_	_

#146
Finally	_	_
,	_	_
the	_	_
Nurse	_	_
Chip	_	_
will	_	_
reset	_	_
the	_	_
remote	_	_
chip	_	_
to	_	_
attempt	_	_
to	_	_
recover	_	_
from	_	_
a	_	_
transient	_	_
fault	_	_
.	_	_

#147
If	_	_
nothing	_	_
works	_	_
,	_	_
the	_	_
failed	_	_
chip	_	_
is	_	_
isolated	_	_
by	_	_
disabling	_	_
its	_	_
clocks	_	_
.	_	_

#148
When	_	_
cores	_	_
or	_	_
chips	_	_
are	_	_
detected	_	_
to	_	_
be	_	_
faulty	_	_
,	_	_
the	_	_
system	_	_
tries	_	_
to	_	_
migrate	_	_
their	_	_
functionality	_	_
(	_	_
typically	_	_
neurons	_	_
)	_	_
to	_	_
other	_	_
cores	_	_
.	_	_

#149
This	_	_
process	_	_
is	_	_
in	_	_
principle	_	_
straightforward	_	_
,	_	_
however	_	_
depending	_	_
on	_	_
the	_	_
failure	_	_
some	_	_
of	_	_
the	_	_
neural	_	_
information	_	_
may	options	_
be	_	_
impossible	_	_
to	_	_
recover	_	_
.	_	_

#150
For	_	_
example	_	_
,	_	_
to	_	_
migrate	_	_
from	_	_
a	_	_
chip	_	_
because	_	_
it	_	_
can	capability	negation
not	_	_
access	_	_
its	_	_
SDRAM	_	_
,	_	_
only	_	_
the	_	_
neural	_	_
information	_	_
stored	_	_
in	_	_
local	_	_
memory	_	_
can	feasibility	_
be	_	_
recovered	_	_
.	_	_

#151
The	_	_
way	_	_
to	_	_
regenerate	_	_
unrecoverable	_	_
information	_	_
will	_	_
depend	_	_
on	_	_
the	_	_
executed	_	_
application	_	_
but	_	_
,	_	_
as	_	_
discussed	_	_
before	_	_
,	_	_
losing	_	_
neurons	_	_
is	_	_
acceptable	_	_
in	_	_
a	_	_
biological	_	_
brain	_	_
and	_	_
therefore	_	_
it	_	_
may	speculation	_
be	_	_
so	_	_
in	_	_
the	_	_
simulated	_	_
application	_	_
.	_	_

#152
When	_	_
routers	_	_
or	_	_
links	_	_
stop	_	_
working	_	_
properly	_	_
,	_	_
part	_	_
of	_	_
the	_	_
routing	_	_
tables	_	_
may	options	_
need	_	_
to	_	_
be	_	_
reconstructed	_	_
dynamically	_	_
to	_	_
avoid	_	_
unreliable	_	_
areas	_	_
of	_	_
the	_	_
network	_	_
.	_	_

#153
When	_	_
a	_	_
route	_	_
is	_	_
destroyed	_	_
,	_	_
the	_	_
system	_	_
can	capability	_
generate	_	_
new	_	_
routes	_	_
by	_	_
the	_	_
back	_	_
propagation	_	_
of	_	_
a	_	_
routing	_	_
key	_	_
from	_	_
the	_	_
destination	_	_
node	_	_
to	_	_
the	_	_
source	_	_
node	_	_
.	_	_

#154
The	_	_
host	_	_
system	_	_
will	_	_
collect	_	_
the	_	_
required	_	_
information	_	_
from	_	_
this	_	_
procedure	_	_
and	_	_
will	_	_
generate	_	_
and	_	_
propagate	_	_
the	_	_
updated	_	_
routing	_	_
tables	_	_
.	_	_

#155
Alternatively	_	_
,	_	_
a	_	_
distributed	_	_
reconfiguration	_	_
may	capability-options	_
rely	_	_
on	_	_
the	_	_
Monitor	_	_
Processes	_	_
around	_	_
the	_	_
failing	_	_
components	_	_
for	_	_
the	_	_
generation	_	_
and	_	_
propagation	_	_
of	_	_
the	_	_
updated	_	_
routing	_	_
tables	_	_
.	_	_

#156
Finally	_	_
,	_	_
each	_	_
SpiNNaker	_	_
chip	_	_
is	_	_
provided	_	_
with	_	_
a	_	_
watchdog	_	_
timer	_	_
which	_	_
detects	_	_
when	_	_
the	_	_
Monitor	_	_
Processor	_	_
has	_	_
not	_	_
responded	_	_
for	_	_
a	_	_
long	_	_
time	_	_
.	_	_

#157
When	_	_
this	_	_
is	_	_
detected	_	_
,	_	_
the	_	_
recovery	_	_
process	_	_
first	_	_
tries	_	_
to	_	_
recover	_	_
the	_	_
Monitor	_	_
Processor	_	_
by	_	_
soft	_	_
resetting	_	_
it	_	_
.	_	_

#158
If	_	_
this	_	_
measure	_	_
does	_	_
not	_	_
solve	_	_
the	_	_
problem	_	_
,	_	_
then	_	_
it	_	_
hard	_	_
resets	_	_
the	_	_
chip	_	_
,	_	_
forcing	_	_
the	_	_
System	_	_
Controller	_	_
to	_	_
select	_	_
another	_	_
core	_	_
as	_	_
a	_	_
Monitor	_	_
Processor	_	_
.	_	_

#159
Communications	_	_
fault	_	_
tolerance	_	_
Given	_	_
that	_	_
the	_	_
supported	_	_
application	_	_
is	_	_
communication-intensive	_	_
the	_	_
interconnection	_	_
fabric	_	_
of	_	_
SpiNNaker	_	_
is	_	_
another	_	_
critical	_	_
component	_	_
and	_	_
therefore	_	_
great	_	_
effort	_	_
has	_	_
been	_	_
devoted	_	_
to	_	_
design	_	_
a	_	_
robust	_	_
and	_	_
stable	_	_
infrastructure	_	_
.	_	_

#160
On-chip	_	_
and	_	_
off-chip	_	_
communication	_	_
The	_	_
Comms	_	_
NoC	_	_
connects	_	_
the	_	_
processing	_	_
cores	_	_
via	_	_
a	_	_
custom	_	_
on-chip	_	_
router	_	_
offering	_	_
a	_	_
bandwidth	_	_
of	_	_
up	_	_
to	_	_
1GByte/s	_	_
.	_	_

#161
The	_	_
Communications	_	_
Controller	_	_
within	_	_
each	_	_
processing	_	_
core	_	_
handles	_	_
packets	_	_
on	_	_
behalf	_	_
of	_	_
its	_	_
simulated	_	_
neurons	_	_
and	_	_
interfaces	_	_
with	_	_
the	_	_
Comms	_	_
NoC	_	_
.	_	_

#162
Together	_	_
the	_	_
on-chip	_	_
router	_	_
and	_	_
the	_	_
self-timed	_	_
fabric	_	_
seamlessly	_	_
extend	_	_
on-chip	_	_
communications	_	_
onto	_	_
inter-chip	_	_
connections	_	_
.	_	_

#163
The	_	_
Comms	_	_
NoC	_	_
has	_	_
18	_	_
ports	_	_
for	_	_
internal	_	_
use	_	_
of	_	_
the	_	_
processing	_	_
cores	_	_
and	_	_
six	_	_
ports	_	_
to	_	_
communicate	_	_
with	_	_
six	_	_
adjacent	_	_
chips	_	_
(	_	_
Fig	_	_
.	_	_
4	_	_
)	_	_
.	_	_

#164
External	_	_
ports	_	_
contain	_	_
two	_	_
independent	_	_
,	_	_
unidirectional	_	_
self-timed	_	_
chip-to-chip	_	_
interfaces	_	_
,	_	_
one	_	_
for	_	_
transmitting	_	_
and	_	_
the	_	_
other	_	_
one	_	_
for	_	_
receiving	_	_
data	_	_
;	_	_
i.e	_	_
.	_	_
a	_	_
failure	_	_
in	_	_
a	_	_
link	_	_
or	_	_
interface	_	_
only	_	_
affects	_	_
one	_	_
of	_	_
the	_	_
directions	_	_
.	_	_

#165
Asynchronously	_	_
arriving	_	_
packets	_	_
to	_	_
the	_	_
router	_	_
are	_	_
arbitrated	_	_
and	_	_
serialised	_	_
.	_	_

#166
The	_	_
router	_	_
can	capability	_
process	_	_
one	_	_
packet	_	_
per	_	_
clock	_	_
cycle	_	_
.	_	_

#167
It	_	_
is	_	_
expected	_	_
that	_	_
the	_	_
average	_	_
traffic	_	_
demand	_	_
will	_	_
be	_	_
much	_	_
lower	_	_
than	_	_
this	_	_
.	_	_

#168
In	_	_
the	_	_
event	_	_
of	_	_
a	_	_
'collision	_	_
'	_	_
packets	_	_
can	options	_
be	_	_
delayed	_	_
arbitrarily	_	_
and	_	_
buffering	_	_
between	_	_
routers	_	_
helps	_	_
to	_	_
accommodate	_	_
this	_	_
.	_	_

#169
Packets	_	_
are	_	_
checked	_	_
for	_	_
integrity	_	_
on	_	_
arrival	_	_
at	_	_
the	_	_
router	_	_
;	_	_
faulty	_	_
packets	_	_
are	_	_
dropped	_	_
into	_	_
a	_	_
register	_	_
where	_	_
they	_	_
can	feasibility	_
be	_	_
examined	_	_
by	_	_
the	_	_
local	_	_
Monitor	_	_
Processor	_	_
.	_	_

#170
Faults	_	_
may	options	_
be	_	_
caused	_	_
by	_	_
corruption	_	_
in	_	_
transit	_	_
-	_	_
indicated	_	_
by	_	_
parity	_	_
and	_	_
framing	_	_
errors	_	_
-	_	_
or	_	_
by	_	_
being	_	_
outdated	_	_
.	_	_

#171
AER	_	_
packet	_	_
routing	_	_
is	_	_
done	_	_
with	_	_
a	_	_
1024	_	_
entry	_	_
associative	_	_
look-up	_	_
table	_	_
.	_	_

#172
Each	_	_
table	_	_
entry	_	_
has	_	_
its	_	_
own	_	_
bitmap	_	_
mask	_	_
that	_	_
will	_	_
be	_	_
applied	_	_
to	_	_
the	_	_
source	_	_
address	_	_
before	_	_
it	_	_
is	_	_
compared	_	_
with	_	_
the	_	_
table	_	_
entries	_	_
in	_	_
order	_	_
.	_	_

#173
If	_	_
an	_	_
address	_	_
is	_	_
not	_	_
found	_	_
then	_	_
the	_	_
packet	_	_
is	_	_
default	_	_
routed	_	_
to	_	_
the	_	_
port	_	_
opposite	_	_
the	_	_
one	_	_
it	_	_
came	_	_
from	_	_
.	_	_

#174
Table	_	_
entries	_	_
are	_	_
therefore	_	_
only	_	_
used	_	_
when	_	_
packets	_	_
turn	_	_
or	_	_
bifurcate	_	_
.	_	_

#175
Each	_	_
table	_	_
entry	_	_
can	capability-feasibility	_
be	_	_
deactivated	_	_
independently	_	_
if	_	_
not	_	_
functioning	_	_
properly	_	_
;	_	_
there	_	_
is	_	_
therefore	_	_
some	_	_
flexibility	_	_
(	_	_
potential	_	_
redundancy	_	_
)	_	_
in	_	_
the	_	_
way	_	_
table	_	_
entries	_	_
are	_	_
used	_	_
.	_	_

#176
As	_	_
the	_	_
table	_	_
uses	_	_
standard	_	_
cell	_	_
latches	_	_
the	_	_
soft	_	_
error	_	_
rate	_	_
is	_	_
expected	_	_
to	_	_
be	_	_
very	_	_
low	_	_
.	_	_

#177
Packets	_	_
may	feasibility-options	_
be	_	_
replicated	_	_
to	_	_
any	_	_
subset	_	_
of	_	_
the	_	_
router	_	_
's	_	_
outputs	_	_
.	_	_

#178
They	_	_
are	_	_
sent	_	_
when	_	_
all	_	_
the	_	_
desired	_	_
outputs	_	_
are	_	_
ready	_	_
to	_	_
accept	_	_
them	_	_
,	_	_
stalling	_	_
until	_	_
this	_	_
time	_	_
.	_	_

#179
In	_	_
the	_	_
event	_	_
of	_	_
an	_	_
output	_	_
being	_	_
blocked	_	_
this	_	_
could	capability-speculation	_
cause	_	_
problems	_	_
and	_	_
backlog	_	_
the	_	_
router	_	_
.	_	_

#180
Thus	_	_
,	_	_
after	_	_
a	_	_
programmable	_	_
interval	_	_
,	_	_
the	_	_
router	_	_
attempts	_	_
to	_	_
route	_	_
around	_	_
any	_	_
blocked	_	_
(	_	_
or	_	_
broken	_	_
)	_	_
external	_	_
links	_	_
through	_	_
a	_	_
so-called	_	_
emergency	_	_
route	_	_
.	_	_

#181
If	_	_
this	_	_
still	_	_
fails	_	_
after	_	_
another	_	_
programmable	_	_
interval	_	_
the	_	_
offending	_	_
packet	_	_
is	_	_
dropped	_	_
into	_	_
a	_	_
local	_	_
register	_	_
and	_	_
the	_	_
subsequent	_	_
packet	_	_
is	_	_
tried	_	_
instead	_	_
.	_	_

#182
The	_	_
Monitor	_	_
Processor	_	_
may	feasibility-options	_
be	_	_
interrupted	_	_
to	_	_
examine	_	_
the	_	_
dropped	_	_
packet	_	_
and	_	_
resend	_	_
it	_	_
-	_	_
perhaps	_	_
suitably	_	_
modified	_	_
-	_	_
later	_	_
.	_	_

#183
Emergency	_	_
routed	_	_
packets	_	_
take	_	_
advantage	_	_
of	_	_
the	_	_
triangular	_	_
topology	_	_
to	_	_
try	_	_
to	_	_
reach	_	_
their	_	_
destinations	_	_
,	_	_
as	_	_
shown	_	_
in	_	_
Fig	_	_
.	_	_
8	_	_
.	_	_

#184
Emergency	_	_
routes	_	_
are	_	_
always	_	_
adjacent	_	_
to	_	_
the	_	_
intended	_	_
path	_	_
and	_	_
the	_	_
subsequent	_	_
turns	_	_
are	_	_
therefore	_	_
predefined	_	_
.	_	_

#185
This	_	_
is	_	_
coded	_	_
into	_	_
the	_	_
short	_	_
packet	_	_
header	_	_
.	_	_

#186
A	_	_
particular	_	_
concern	_	_
is	_	_
the	_	_
possible	_	_
occurrence	_	_
of	_	_
(	_	_
network-level	_	_
)	_	_
deadlock	_	_
.	_	_

#187
Conventional	_	_
HPC	_	_
networks	_	_
avoid	_	_
the	_	_
formation	_	_
of	_	_
such	_	_
chains	_	_
by	_	_
means	_	_
of	_	_
complex	_	_
combinations	_	_
of	_	_
topology	_	_
,	_	_
routing	_	_
algorithms	_	_
and	_	_
flow-control	_	_
techniques	_	_
[	_	_
18	_	_
]	_	_
.	_	_

#188
Given	_	_
that	_	_
routing	_	_
is	_	_
application	_	_
specific	_	_
a	_	_
different	_	_
approach	_	_
to	_	_
deadlock	_	_
avoidance	_	_
was	_	_
required	_	_
.	_	_

#189
As	_	_
neural	_	_
applications	_	_
do	_	_
not	_	_
require	_	_
delivery	_	_
guarantees	_	_
,	_	_
a	_	_
time-out	_	_
based	_	_
,	_	_
packet-dropping	_	_
mechanism	_	_
suffices	_	_
,	_	_
provided	_	_
that	_	_
the	_	_
proportion	_	_
of	_	_
lost	_	_
packets	_	_
is	_	_
low	_	_
.	_	_

#190
Topological	_	_
robustness	_	_
To	_	_
assess	_	_
the	_	_
robustness	_	_
of	_	_
the	_	_
two-dimensional	_	_
triangular	_	_
torus	_	_
topology	_	_
we	_	_
tested	_	_
how	_	_
it	_	_
loses	_	_
connectivity	_	_
in	_	_
the	_	_
presence	_	_
of	_	_
link	_	_
failures	_	_
.	_	_

#191
A	_	_
typical	_	_
manufacturing	_	_
process	_	_
can	feasibility-rhetorical	_
be	_	_
expected	_	_
to	_	_
produce	_	_
components	_	_
with	_	_
a	_	_
functional	_	_
life	_	_
of	_	_
well	_	_
over	_	_
10	_	_
years	_	_
.	_	_

#192
With	_	_
a	_	_
very	_	_
pessimistic	_	_
scenario	_	_
model	_	_
of	_	_
a	_	_
5-year	_	_
mean	_	_
time	_	_
to	_	_
failure	_	_
(	_	_
MTTF	_	_
)	_	_
with	_	_
sigma	_	_
of	_	_
2	_	_
years	_	_
,	_	_
the	_	_
expected	_	_
number	_	_
of	_	_
link	_	_
failures	_	_
in	_	_
a	_	_
complete	_	_
SpiNNaker	_	_
system	_	_
(	_	_
65,536	_	_
nodes	_	_
)	_	_
for	_	_
any	_	_
given	_	_
day	_	_
(	_	_
Fday	_	_
)	_	_
would	_	_
lie	_	_
between	_	_
160	_	_
and	_	_
360	_	_
.	_	_

#193
We	_	_
contrasted	_	_
SpiNNaker	_	_
topology	_	_
with	_	_
regular	_	_
two-	_	_
and	_	_
three-dimensional	_	_
tori	_	_
for	_	_
65,536	_	_
nodes	_	_
.	_	_

#194
The	_	_
2-D	_	_
topologies	_	_
are	_	_
arranged	_	_
as	_	_
square	_	_
networks	_	_
of	_	_
256×256	_	_
nodes	_	_
whereas	_	_
the	_	_
3-D	_	_
torus	_	_
is	_	_
arranged	_	_
as	_	_
a	_	_
64×32×32	_	_
network	_	_
.	_	_

#195
We	_	_
assessed	_	_
how	_	_
the	_	_
three	_	_
topologies	_	_
lose	_	_
node-connectivity	_	_
as	_	_
the	_	_
number	_	_
of	_	_
link	_	_
failures	_	_
increases	_	_
from	_	_
1	_	_
to	_	_
65,536	_	_
.	_	_

#196
A	_	_
depth-first	_	_
search	_	_
algorithm	_	_
was	_	_
used	_	_
to	_	_
calculate	_	_
this	_	_
figure	_	_
for	_	_
105	_	_
random	_	_
uniform	_	_
failure	_	_
configurations	_	_
.	_	_

#197
The	_	_
average	_	_
of	_	_
these	_	_
105	_	_
runs	_	_
is	_	_
plotted	_	_
in	_	_
Fig	_	_
.	_	_
9	_	_
.	_	_

#198
In	_	_
the	_	_
figure	_	_
we	_	_
can	feasibility-rhetorical	_
see	_	_
that	_	_
the	_	_
triangular	_	_
two-dimensional	_	_
torus	_	_
implemented	_	_
in	_	_
SpiNNaker	_	_
provides	_	_
a	_	_
robustness	_	_
level	_	_
similar	_	_
to	_	_
a	_	_
three-dimensional	_	_
torus	_	_
.	_	_

#199
Both	_	_
topologies	_	_
can	capability	_
support	_	_
up	_	_
to	_	_
8,192	_	_
random	_	_
link	_	_
failures	_	_
without	_	_
any	_	_
of	_	_
the	_	_
nodes	_	_
losing	_	_
connectivity	_	_
with	_	_
the	_	_
rest	_	_
of	_	_
the	_	_
system	_	_
,	_	_
more	_	_
than	_	_
one	_	_
order	_	_
of	_	_
magnitude	_	_
above	_	_
(	_	_
Fday	_	_
)	_	_
.	_	_

#200
On	_	_
average	_	_
tens	_	_
of	_	_
thousands	_	_
of	_	_
link	_	_
failures	_	_
are	_	_
required	_	_
to	_	_
lose	_	_
one	_	_
or	_	_
more	_	_
nodes	_	_
.	_	_

#201
This	_	_
robustness	_	_
motivates	_	_
the	_	_
use	_	_
of	_	_
the	_	_
triangular	_	_
torus	_	_
topology	_	_
in	_	_
SpiNNaker	_	_
.	_	_

#202
Interconnect	_	_
stability	_	_
under	_	_
severe	_	_
degradation	_	_
The	_	_
packet	_	_
dropping	_	_
mechanism	_	_
provides	_	_
a	_	_
deadlock-free	_	_
interconnection	_	_
network	_	_
.	_	_

#203
However	_	_
,	_	_
there	_	_
is	_	_
a	_	_
loss	_	_
of	_	_
information	_	_
that	_	_
has	_	_
to	_	_
be	_	_
assessed	_	_
.	_	_

#204
Spiking	_	_
neuron	_	_
systems	_	_
can	capability	_
work	_	_
when	_	_
a	_	_
few	_	_
messages	_	_
are	_	_
lost	_	_
but	_	_
,	_	_
even	_	_
in	_	_
very	_	_
pessimistic	_	_
scenarios	_	_
,	_	_
the	_	_
number	_	_
of	_	_
dropped	_	_
packets	_	_
should	deontic	_
be	_	_
low	_	_
(	_	_
below	_	_
1	_	_
packet	_	_
per	_	_
million	_	_
.	_	_

#205
Approximatelly	_	_
1	_	_
packet	_	_
each	_	_
1,500	_	_
cycles	_	_
in	_	_
the	_	_
following	_	_
experiments	_	_
)	_	_
.	_	_

#206
Simulation	_	_
has	_	_
verified	_	_
that	_	_
the	_	_
network	_	_
can	capability	_
deal	_	_
with	_	_
loads	_	_
well-above	_	_
the	_	_
expected	_	_
without	_	_
significantly	_	_
impacting	_	_
applications	_	_
(	_	_
packet	_	_
delay	_	_
is	_	_
acceptable	_	_
)	_	_
[	_	_
21	_	_
]	_	_
.	_	_

#207
The	_	_
simulations	_	_
model	_	_
a	_	_
256×256	_	_
network	_	_
considering	_	_
scenarios	_	_
in	_	_
which	_	_
the	_	_
network	_	_
suffers	_	_
different	_	_
levels	_	_
of	_	_
hard	_	_
failures	_	_
.	_	_

#208
To	_	_
account	_	_
for	_	_
the	_	_
real-time	_	_
constraint	_	_
,	_	_
this	_	_
section	_	_
investigates	_	_
the	_	_
temporal	_	_
evolution	_	_
of	_	_
the	_	_
system	_	_
and	_	_
focuses	_	_
on	_	_
stability	_	_
,	_	_
understood	_	_
as	_	_
the	_	_
variability	_	_
(	_	_
which	_	_
should	deontic	_
be	_	_
low	_	_
)	_	_
of	_	_
the	_	_
figures	_	_
of	_	_
merit	_	_
and	_	_
assesses	_	_
the	_	_
effectiveness	_	_
of	_	_
the	_	_
emergency	_	_
routing	_	_
mechanism	_	_
.	_	_

#209
Simulation	_	_
model	_	_
of	_	_
the	_	_
SpiNNaker	_	_
network	_	_
A	_	_
simplified	_	_
model	_	_
of	_	_
the	_	_
SpiNNaker	_	_
interconnection	_	_
infrastructure	_	_
has	_	_
been	_	_
implemented	_	_
in	_	_
INSEE	_	_
[	_	_
19	_	_
]	_	_
.	_	_

#210
It	_	_
includes	_	_
the	_	_
topological	_	_
description	_	_
of	_	_
the	_	_
system	_	_
and	_	_
a	_	_
model	_	_
of	_	_
the	_	_
router	_	_
.	_	_

#211
Time	_	_
is	_	_
modelled	_	_
in	_	_
terms	_	_
of	_	_
abstract	_	_
network	_	_
cycles	_	_
the	_	_
time	_	_
to	_	_
route	_	_
and	_	_
forward	_	_
a	_	_
packet	_	_
(	_	_
1	_	_
network	_	_
cycle≈10	_	_
processor	_	_
cycles	_	_
)	_	_
.	_	_

#212
A	_	_
network	_	_
node	_	_
represents	_	_
a	_	_
complete	_	_
SpiNNaker	_	_
chip	_	_
,	_	_
with	_	_
all	_	_
its	_	_
cores	_	_
and	_	_
its	_	_
router	_	_
.	_	_

#213
Nodes	_	_
are	_	_
modelled	_	_
as	_	_
independent	_	_
traffic	_	_
sources	_	_
that	_	_
inject	_	_
packets	_	_
following	_	_
a	_	_
Bernoulli	_	_
temporal	_	_
distribution	_	_
that	_	_
can	capability-feasibility	_
be	_	_
parameterized	_	_
to	_	_
generate	_	_
any	_	_
chosen	_	_
injection	_	_
rate	_	_
.	_	_

#214
The	_	_
spatial	_	_
distribution	_	_
of	_	_
the	_	_
traffic	_	_
is	_	_
uniform	_	_
.	_	_

#215
All	_	_
ports	_	_
are	_	_
modelled	_	_
as	_	_
a	_	_
single	_	_
four-packet	_	_
queue	_	_
.	_	_

#216
If	_	_
this	_	_
is	_	_
full	_	_
and	_	_
the	_	_
node	_	_
tries	_	_
to	_	_
inject	_	_
a	_	_
packet	_	_
,	_	_
it	_	_
is	_	_
dropped	_	_
.	_	_

#217
Communications	_	_
are	_	_
point-to-point	_	_
.	_	_

#218
Routing	_	_
tables	_	_
are	_	_
not	_	_
implemented	_	_
,	_	_
using	_	_
Dimension	_	_
Order	_	_
Routing	_	_
instead	_	_
.	_	_

#219
This	_	_
emulates	_	_
the	_	_
expected	_	_
shape	_	_
of	_	_
communications	_	_
-	_	_
two	_	_
straight	_	_
lines	_	_
with	_	_
one	_	_
inflection	_	_
point	_	_
[	_	_
20	_	_
]	_	_
.	_	_

#220
As	_	_
discussed	_	_
in	_	_
Section	_	_
5	_	_
,	_	_
the	_	_
SpiNNaker	_	_
system	_	_
is	_	_
aware	_	_
of	_	_
network	_	_
failures	_	_
and	_	_
can	capability	_
modify	_	_
its	_	_
routing	_	_
tables	_	_
to	_	_
avoid	_	_
conflictive	_	_
areas	_	_
.	_	_

#221
In	_	_
contrast	_	_
,	_	_
DOR	_	_
is	_	_
oblivious	_	_
and	_	_
therefore	_	_
unaware	_	_
of	_	_
network	_	_
failures	_	_
so	_	_
our	_	_
results	_	_
should	deontic	_
be	_	_
taken	_	_
as	_	_
pessimistic	_	_
The	_	_
experiments	_	_
consider	_	_
systems	_	_
with	_	_
0	_	_
to	_	_
1024	_	_
link	_	_
failures	_	_
which	_	_
covers	_	_
scenarios	_	_
well	_	_
above	_	_
Fday	_	_
(	_	_
as	_	_
discussed	_	_
before	_	_
)	_	_
.	_	_

#222
Consequently	_	_
this	_	_
evaluation	_	_
should	deontic	_
be	_	_
understood	_	_
as	_	_
a	_	_
worst-case	_	_
study	_	_
.	_	_

#223
Experiments	_	_
and	_	_
discussion	_	_
of	_	_
results	_	_
In	_	_
the	_	_
following	_	_
experimental	_	_
work	_	_
,	_	_
we	_	_
will	_	_
use	_	_
the	_	_
maximum	_	_
network	_	_
load	_	_
expected	_	_
during	_	_
regular	_	_
operational	_	_
levels	_	_
of	_	_
SpiNNaker	_	_
which	_	_
was	_	_
derived	_	_
in	_	_
previous	_	_
research	_	_
[	_	_
21	_	_
]	_	_
.	_	_

#224
We	_	_
show	_	_
the	_	_
evolution	_	_
of	_	_
a	_	_
SpiNNaker	_	_
network	_	_
degrading	_	_
progressively	_	_
from	_	_
0	_	_
to	_	_
1024	_	_
random	_	_
link	_	_
failures	_	_
which	_	_
are	_	_
introduced	_	_
at	_	_
the	_	_
beginning	_	_
of	_	_
every	_	_
sampling	_	_
period	_	_
(	_	_
5,000	_	_
cycles	_	_
)	_	_
.	_	_

#225
The	_	_
figures	_	_
of	_	_
interest	_	_
are	_	_
accepted	_	_
load	_	_
,	_	_
number	_	_
of	_	_
dropped	_	_
packets	_	_
and	_	_
packet	_	_
latency	_	_
figures	_	_
(	_	_
average	_	_
and	_	_
maximum	_	_
)	_	_
.	_	_

#226
Router	_	_
parameters	_	_
are	_	_
fixed	_	_
to	_	_
the	_	_
values	_	_
suggested	_	_
by	_	_
previous	_	_
experiments	_	_
[	_	_
21	_	_
]	_	_
.	_	_

#227
To	_	_
assess	_	_
the	_	_
impact	_	_
of	_	_
emergency	_	_
routing	_	_
on	_	_
system	_	_
stability	_	_
,	_	_
we	_	_
plot	_	_
results	_	_
without	_	_
(	_	_
Fig	_	_
.	_	_
10a	_	_
)	_	_
and	_	_
with	_	_
this	_	_
mechanism	_	_
(	_	_
Fig	_	_
.	_	_
10b	_	_
)	_	_
.	_	_

#228
To	_	_
better	_	_
understand	_	_
the	_	_
graphs	_	_
,	_	_
notice	_	_
that	_	_
the	_	_
X-axis	_	_
measures	_	_
time	_	_
(	_	_
cycles	_	_
)	_	_
.	_	_

#229
The	_	_
labels	_	_
at	_	_
the	_	_
top	_	_
(	_	_
1	_	_
,	_	_
2	_	_
,	_	_
4	_	_
,	_	_
…,1024	_	_
)	_	_
indicate	_	_
the	_	_
total	_	_
number	_	_
of	_	_
failures	_	_
at	_	_
the	_	_
corresponding	_	_
time	_	_
:	_	_
during	_	_
the	_	_
first	_	_
5	_	_
kcycles	_	_
the	_	_
network	_	_
is	_	_
fully	_	_
operative	_	_
,	_	_
from	_	_
5k	_	_
to	_	_
10k	_	_
there	_	_
is	_	_
a	_	_
single	_	_
link	_	_
failure	_	_
,	_	_
from	_	_
10k	_	_
to	_	_
15k	_	_
there	_	_
are	_	_
two	_	_
failures	_	_
,	_	_
and	_	_
so	_	_
on	_	_
.	_	_

#230
Each	_	_
performance	_	_
metric	_	_
has	_	_
its	_	_
own	_	_
unit	_	_
,	_	_
indicated	_	_
in	_	_
the	_	_
Y-axes	_	_
:	_	_
packets	_	_
(	_	_
for	_	_
the	_	_
dropped	_	_
packets	_	_
line	_	_
)	_	_
,	_	_
cycles	_	_
(	_	_
for	_	_
the	_	_
average	_	_
and	_	_
maximum	_	_
delay	_	_
lines	_	_
)	_	_
and	_	_
packets/cycle/node	_	_
(	_	_
for	_	_
the	_	_
accepted	_	_
load	_	_
line	_	_
)	_	_
.	_	_

#231
Note	_	_
that	_	_
plotted	_	_
data	_	_
,	_	_
including	_	_
the	_	_
number	_	_
of	_	_
dropped	_	_
packets	_	_
,	_	_
are	_	_
not	_	_
cumulative	_	_
,	_	_
but	_	_
correspond	_	_
to	_	_
10-cycle	_	_
measurement	_	_
periods	_	_
.	_	_

#232
Fig	_	_
.	_	_
10	_	_
(	_	_
a	_	_
)	_	_
shows	_	_
how	_	_
the	_	_
progressive	_	_
introduction	_	_
of	_	_
failures	_	_
results	_	_
in	_	_
a	_	_
high	_	_
variability	_	_
of	_	_
performance	_	_
metrics	_	_
when	_	_
emergency	_	_
routing	_	_
is	_	_
not	_	_
activated	_	_
.	_	_

#233
Accepted	_	_
load	_	_
drops	_	_
by	_	_
up	_	_
to	_	_
25	_	_
%	_	_
,	_	_
maximum	_	_
delay	_	_
noticeably	_	_
fluctuates	_	_
and	_	_
the	_	_
number	_	_
of	_	_
dropped	_	_
packets	_	_
grows	_	_
linearly	_	_
with	_	_
the	_	_
number	_	_
of	_	_
link	_	_
failures	_	_
.	_	_

#234
For	_	_
clarity	_	_
,	_	_
in	_	_
the	_	_
graphs	_	_
the	_	_
Y-axis	_	_
is	_	_
bounded	_	_
by	_	_
0	_	_
and	_	_
500	_	_
,	_	_
which	_	_
leaves	_	_
out	_	_
the	_	_
number	_	_
of	_	_
dropped	_	_
packets	_	_
for	_	_
512	_	_
failures	_	_
(	_	_
around	_	_
800	_	_
)	_	_
and	_	_
1024	_	_
failures	_	_
(	_	_
around	_	_
1600	_	_
)	_	_
.	_	_

#235
We	_	_
can	feasibility-rhetorical	_
see	_	_
that	_	_
even	_	_
with	_	_
a	_	_
single	_	_
failure	_	_
the	_	_
system	_	_
with	_	_
emergency	_	_
routing	_	_
deactivated	_	_
(	_	_
approx	_	_
.	_	_

#236
1	_	_
packet	_	_
dropped	_	_
every	_	_
50	_	_
cycles	_	_
)	_	_
noticeably	_	_
exceeds	_	_
the	_	_
acceptable	_	_
limit	_	_
.	_	_

#237
In	_	_
contrast	_	_
,	_	_
evolution	_	_
with	_	_
the	_	_
emergency	_	_
routing	_	_
activated	_	_
,	_	_
Fig	_	_
.	_	_
10	_	_
(	_	_
b	_	_
)	_	_
,	_	_
shows	_	_
very	_	_
stable	_	_
performance	_	_
metrics	_	_
.	_	_

#238
Only	_	_
some	_	_
minor	_	_
peaks	_	_
in	_	_
the	_	_
maximum	_	_
delay	_	_
can	feasibility-rhetorical	_
be	_	_
observed	_	_
.	_	_

#239
The	_	_
most	_	_
remarkable	_	_
difference	_	_
is	_	_
in	_	_
the	_	_
number	_	_
of	_	_
dropped	_	_
packets	_	_
:	_	_
no	_	_
packets	_	_
are	_	_
dropped	_	_
for	_	_
experiments	_	_
with	_	_
fewer	_	_
than	_	_
512	_	_
failures	_	_
.	_	_

#240
Considering	_	_
that	_	_
these	_	_
scenarios	_	_
are	_	_
well	_	_
beyond	_	_
the	_	_
described	_	_
pessimistic	_	_
range	_	_
of	_	_
failures	_	_
(	_	_
160-360	_	_
)	_	_
,	_	_
we	_	_
can	feasibility-rhetorical	_
confirm	_	_
that	_	_
the	_	_
emergency	_	_
routing	_	_
plays	_	_
a	_	_
major	_	_
role	_	_
in	_	_
improving	_	_
fault	_	_
tolerance	_	_
at	_	_
the	_	_
network	_	_
level	_	_
.	_	_

#241
It	_	_
is	_	_
also	_	_
worth	_	_
noticing	_	_
that	_	_
,	_	_
in	_	_
all	_	_
cases	_	_
,	_	_
when	_	_
failures	_	_
are	_	_
introduced	_	_
in	_	_
the	_	_
system	_	_
we	_	_
do	_	_
not	_	_
observe	_	_
significant	_	_
transient	_	_
periods	_	_
.	_	_

#242
This	_	_
means	_	_
that	_	_
,	_	_
after	_	_
a	_	_
failure	_	_
,	_	_
the	_	_
system	_	_
reaches	_	_
a	_	_
stable	_	_
situation	_	_
very	_	_
rapidly	_	_
.	_	_

#243
The	_	_
conclusion	_	_
is	_	_
that	_	_
the	_	_
SpiNNaker	_	_
interconnection	_	_
network	_	_
provides	_	_
a	_	_
highly	_	_
stable	_	_
communications	_	_
fabric	_	_
for	_	_
the	_	_
real-time	_	_
simulation	_	_
of	_	_
spiking	_	_
neurons	_	_
.	_	_

#244
Even	_	_
under	_	_
very	_	_
pessimistic	_	_
scenarios	_	_
the	_	_
interconnection	_	_
network	_	_
does	_	_
not	_	_
show	_	_
significant	_	_
performance	_	_
fluctuations	_	_
and	_	_
degrades	_	_
gracefully	_	_
.	_	_

#245
Chip-to-chip	_	_
interfaces	_	_
The	_	_
self-timed	_	_
communication	_	_
fabric	_	_
is	_	_
implemented	_	_
using	_	_
handshake	_	_
protocols	_	_
because	_	_
of	_	_
their	_	_
advantages	_	_
for	_	_
large	_	_
networks	_	_
:	_	_
•	_	_
Chips	_	_
can	feasibility	_
be	_	_
interconnected	_	_
without	_	_
regard	_	_
to	_	_
wiring	_	_
delays	_	_
which	_	_
simplifies	_	_
machine	_	_
construction	_	_
as	_	_
some	_	_
chips	_	_
will	_	_
be	_	_
adjacent	_	_
on	_	_
a	_	_
PCB	_	_
whilst	_	_
others	_	_
may	options	_
require	_	_
considerable	_	_
cabling	_	_
or	_	_
buffering	_	_
with	_	_
potential	_	_
for	_	_
delays	_	_
and	_	_
skew	_	_
.	_	_

#246
•	_	_
Power	_	_
economy	_	_
by	_	_
limiting	_	_
logic	_	_
transitions	_	_
(	_	_
no	_	_
clock	_	_
information	_	_
is	_	_
transmitted	_	_
)	_	_
.	_	_

#247
•	_	_
Adequately	_	_
high	_	_
speed	_	_
is	_	_
retained	_	_
.	_	_

#248
•	_	_
Well	_	_
suited	_	_
to	_	_
short	_	_
,	_	_
intermittent	_	_
transmissions	_	_
-	_	_
appropriate	_	_
for	_	_
neural	_	_
communications	_	_
.	_	_

#249
There	_	_
is	_	_
,	_	_
however	_	_
,	_	_
a	_	_
significant	_	_
drawback	_	_
to	_	_
handshaking	_	_
links	_	_
:	_	_
in	_	_
the	_	_
presence	_	_
of	_	_
noise	_	_
they	_	_
are	_	_
prone	_	_
to	_	_
deadlock	_	_
.	_	_

#250
In	_	_
this	_	_
subsection	_	_
these	_	_
are	_	_
deadlocks	_	_
at	_	_
the	_	_
interface	_	_
level	_	_
,	_	_
not	_	_
to	_	_
be	_	_
confused	_	_
with	_	_
the	_	_
previously	_	_
discussed	_	_
network-level	_	_
deadlocks	_	_
.	_	_

#251
A	_	_
handshake	_	_
link	_	_
can	feasibility-rhetorical	_
be	_	_
thought	_	_
of	_	_
as	_	_
passing	_	_
a	_	_
data	_	_
token	_	_
from	_	_
the	_	_
sender	_	_
to	_	_
the	_	_
receiver	_	_
which	_	_
the	_	_
handshake	_	_
returns	_	_
so	_	_
that	_	_
the	_	_
next	_	_
data	_	_
can	feasibility	_
be	_	_
sent	_	_
.	_	_

#252
Noise	_	_
on	_	_
the	_	_
link	_	_
may	capability-options	negation
not	_	_
only	_	_
corrupt	_	_
the	_	_
data	_	_
but	_	_
also	_	_
this	_	_
control	_	_
information	_	_
,	_	_
removing	_	_
or	_	_
introducing	_	_
other	_	_
tokens	_	_
so	_	_
that	_	_
the	_	_
sender	_	_
and	_	_
receiver	_	_
lose	_	_
coherence	_	_
.	_	_

#253
In	_	_
the	_	_
most	_	_
serious	_	_
case	_	_
,	_	_
a	_	_
lost	_	_
token	_	_
can	options	_
result	_	_
in	_	_
each	_	_
waiting	_	_
for	_	_
the	_	_
other	_	_
and	_	_
the	_	_
data	_	_
link	_	_
can	capability	negation
not	_	_
recover	_	_
.	_	_

#254
Timeout	_	_
is	_	_
not	_	_
possible	_	_
as	_	_
there	_	_
is	_	_
no	_	_
concept	_	_
of	_	_
time	_	_
,	_	_
only	_	_
sequencing	_	_
.	_	_

#255
The	_	_
on-chip	_	_
network	_	_
uses	_	_
Silistix	_	_
CHAIN	_	_
[	_	_
23	_	_
]	_	_
interconnection	_	_
with	_	_
3-of-6	_	_
return-to-zero	_	_
(	_	_
RTZ	_	_
)	_	_
coding	_	_
[	_	_
22	_	_
]	_	_
.	_	_

#256
This	_	_
provides	_	_
a	_	_
convenient	_	_
symbol	_	_
set	_	_
with	_	_
20	_	_
codes	_	_
of	_	_
which	_	_
16	_	_
are	_	_
used	_	_
.	_	_

#257
A	_	_
separate	_	_
channel	_	_
provides	_	_
an	_	_
End-of-Packet	_	_
(	_	_
EoP	_	_
)	_	_
marker	_	_
.	_	_

#258
The	_	_
inter-chip	_	_
links	_	_
use	_	_
a	_	_
different	_	_
protocol	_	_
to	_	_
balance	_	_
speed	_	_
,	_	_
pin	_	_
usage	_	_
and	_	_
(	_	_
particularly	_	_
)	_	_
power	_	_
consumption	_	_
.	_	_

#259
Each	_	_
four	_	_
bit	_	_
token	_	_
is	_	_
encoded	_	_
as	_	_
a	_	_
2-of-7	_	_
code	_	_
(	_	_
21	_	_
possible	_	_
codes	_	_
of	_	_
which	_	_
17	_	_
are	_	_
used	_	_
:	_	_
4	_	_
bits	_	_
plus	_	_
EoP	_	_
[	_	_
24	_	_
]	_	_
)	_	_
.	_	_

#260
To	_	_
reduce	_	_
the	_	_
number	_	_
of	_	_
transitions	_	_
a	_	_
non-return-to-zero	_	_
(	_	_
NRZ	_	_
)	_	_
coding	_	_
is	_	_
used	_	_
.	_	_

#261
Noise	_	_
glitches	_	_
on	_	_
the	_	_
inter-chip	_	_
wires	_	_
introduce	_	_
extra	_	_
transitions	_	_
,	_	_
potentially	_	_
in	_	_
both	_	_
the	_	_
forward	_	_
and	_	_
return	_	_
paths	_	_
;	_	_
these	_	_
must	deontic	_
be	_	_
detected	_	_
and	_	_
recovered	_	_
from	_	_
at	_	_
each	_	_
end	_	_
of	_	_
the	_	_
link	_	_
.	_	_

#262
The	_	_
off-chip	_	_
wiring	_	_
is	_	_
the	_	_
most	_	_
likely	_	_
place	_	_
for	_	_
noise	_	_
to	_	_
be	_	_
induced	_	_
and	_	_
it	_	_
is	_	_
assumed	_	_
that	_	_
such	_	_
noise	_	_
will	_	_
cause	_	_
a	_	_
short	_	_
glitch	_	_
(	_	_
i.e	_	_
.	_	_
two	_	_
extra	_	_
transitions	_	_
)	_	_
on	_	_
a	_	_
wire	_	_
.	_	_

#263
Glitches	_	_
will	_	_
be	_	_
reasonably	_	_
uncommon	_	_
,	_	_
therefore	_	_
data	_	_
integrity	_	_
is	_	_
not	_	_
addressed	_	_
in	_	_
hardware	_	_
;	_	_
detection	_	_
of	_	_
damaged	_	_
packets	_	_
can	feasibility	_
be	_	_
delegated	_	_
to	_	_
system	_	_
software	_	_
if	_	_
any	_	_
recovery	_	_
is	_	_
to	_	_
be	_	_
attempted	_	_
.	_	_

#264
The	_	_
hardware	_	_
simply	_	_
has	_	_
to	_	_
keep	_	_
running	_	_
.	_	_

#265
The	_	_
majority	_	_
of	_	_
the	_	_
fault	_	_
tolerance	_	_
resides	_	_
in	_	_
the	_	_
receiver	_	_
(	_	_
Fig	_	_
.	_	_
11	_	_
)	_	_
where	_	_
various	_	_
stages	_	_
filter	_	_
out	_	_
potential	_	_
problems.•	_	_
NRZ	_	_
to	_	_
RTZ	_	_
Conversion	_	_
:	_	_
The	_	_
problem	_	_
for	_	_
the	_	_
first	_	_
stage	_	_
of	_	_
the	_	_
receiver	_	_
is	_	_
that	_	_
it	_	_
may	options	negation
not	_	_
know	_	_
the	_	_
level	_	_
of	_	_
an	_	_
input	_	_
wire	_	_
at	_	_
its	_	_
reset	_	_
time	_	_
.	_	_

#266
This	_	_
is	_	_
overcome	_	_
using	_	_
a	_	_
phase	_	_
converter	_	_
comprising	_	_
two	_	_
parallel	_	_
RS	_	_
flip-flops	_	_
(	_	_
Fig	_	_
.	_	_
12	_	_
)	_	_
which	_	_
acts	_	_
as	_	_
a	_	_
transition	_	_
detector	_	_
which	_	_
is	_	_
set	_	_
by	_	_
one	_	_
or	_	_
more	_	_
input	_	_
transitions	_	_
.	_	_

#267
It	_	_
is	_	_
cleared	_	_
locally	_	_
between	_	_
the	_	_
detection	_	_
of	_	_
a	_	_
symbol	_	_
and	_	_
its	_	_
external	_	_
acknowledgement	_	_
.	_	_

#268
Two	_	_
transitions	_	_
are	_	_
made	_	_
per	_	_
symbol	_	_
.	_	_

#269
When	_	_
at	_	_
least	_	_
two	_	_
such	_	_
phase	_	_
converters	_	_
are	_	_
set	_	_
,	_	_
it	_	_
is	_	_
assumed	_	_
that	_	_
an	_	_
input	_	_
flit	_	_
has	_	_
been	_	_
captured	_	_
and	_	_
passed	_	_
to	_	_
the	_	_
next	_	_
stage	_	_
.	_	_

#270
•	_	_
2-of-7	_	_
to	_	_
3-of-6	_	_
Conversion	_	_
:	_	_
The	_	_
flit	_	_
is	_	_
then	_	_
searched	_	_
by	_	_
the	_	_
symbol	_	_
converter	_	_
(	_	_
Fig	_	_
.	_	_
13	_	_
)	_	_
using	_	_
an	_	_
asynchronous	_	_
state	_	_
machine	_	_
with	_	_
Muller	_	_
C-elements	_	_
[	_	_
25,26	_	_
]	_	_
.	_	_

#271
In	_	_
the	_	_
absence	_	_
of	_	_
errors	_	_
exactly	_	_
one	_	_
of	_	_
these	_	_
will	_	_
be	_	_
set	_	_
but	_	_
a	_	_
glitch	_	_
may	options	_
have	_	_
set	_	_
more	_	_
.	_	_

#272
The	_	_
output	_	_
is	_	_
therefore	_	_
filtered	_	_
with	_	_
a	_	_
priority	_	_
encoder	_	_
based	_	_
on	_	_
mutual	_	_
exclusion	_	_
elements	_	_
which	_	_
chooses	_	_
a	_	_
single	_	_
,	_	_
legal	_	_
,	_	_
'one-hot	_	_
'	_	_
code	_	_
.	_	_

#273
There	_	_
is	_	_
no	_	_
attempt	_	_
to	_	_
choose	_	_
the	_	_
'correct	_	_
'	_	_
code	_	_
-	_	_
that	_	_
information	_	_
is	_	_
not	_	_
available	_	_
-	_	_
but	_	_
any	_	_
legal	_	_
code	_	_
will	_	_
prevent	_	_
a	_	_
deadlock	_	_
.	_	_

#274
It	_	_
is	_	_
then	_	_
a	_	_
simple	_	_
matter	_	_
to	_	_
generate	_	_
a	_	_
3-of-6	_	_
code	_	_
with	_	_
an	_	_
auxiliary	_	_
EoP	_	_
line	_	_
appropriate	_	_
for	_	_
the	_	_
NoC	_	_
.	_	_

#275
•	_	_
Flit	_	_
Counter	_	_
:	_	_
Glitches	_	_
can	capability	_
easily	_	_
insert	_	_
extra	_	_
flits	_	_
into	_	_
a	_	_
packet	_	_
but	_	_
it	_	_
is	_	_
important	_	_
that	_	_
no	_	_
packet	_	_
exceeds	_	_
a	_	_
maximum	_	_
length	_	_
.	_	_

#276
A	_	_
flit	_	_
counter	_	_
is	_	_
added	_	_
to	_	_
keep	_	_
track	_	_
of	_	_
the	_	_
number	_	_
of	_	_
flits	_	_
and	_	_
,	_	_
if	_	_
it	_	_
exceeds	_	_
a	_	_
given	_	_
threshold	_	_
an	_	_
extra	_	_
EoP	_	_
is	_	_
inserted	_	_
,	_	_
notifying	_	_
explicitly	_	_
a	_	_
framing	_	_
error	_	_
.	_	_

#277
The	_	_
counter	_	_
is	_	_
reset	_	_
on	_	_
reception	_	_
of	_	_
an	_	_
EoP	_	_
.	_	_

#278
•	_	_
Transmitter	_	_
:	_	_
The	_	_
only	_	_
external	_	_
input	_	_
is	_	_
the	_	_
handshake	_	_
acknowledge	_	_
line	_	_
.	_	_

#279
A	_	_
phase	_	_
converter	_	_
detects	_	_
at	_	_
least	_	_
one	_	_
transition	_	_
and	_	_
treats	_	_
that	_	_
as	_	_
the	_	_
acknowledgement	_	_
,	_	_
further	_	_
transitions	_	_
being	_	_
ignored	_	_
until	_	_
sending	_	_
the	_	_
next	_	_
flit	_	_
.	_	_

#280
When	_	_
a	_	_
transmitter	_	_
is	_	_
reset	_	_
its	_	_
state	_	_
is	_	_
'ready	_	_
to	_	_
send	_	_
'	_	_
.	_	_

#281
Similarly	_	_
,	_	_
when	_	_
a	_	_
receiver	_	_
is	_	_
reset	_	_
it	_	_
sends	_	_
an	_	_
acknowledgement	_	_
.	_	_

#282
If	_	_
the	_	_
reset	_	_
occurred	_	_
during	_	_
reception	_	_
this	_	_
enables	_	_
the	_	_
transmitter	_	_
to	_	_
send	_	_
again	_	_
but	_	_
if	_	_
no	_	_
acknowledgement	_	_
was	_	_
outstanding	_	_
then	_	_
there	_	_
is	_	_
a	_	_
spurious	_	_
transition	_	_
which	_	_
is	_	_
filtered	_	_
by	_	_
the	_	_
transmitter	_	_
.	_	_

#283
The	_	_
glitch	_	_
tolerance	_	_
automatically	_	_
provides	_	_
a	_	_
simple	_	_
,	_	_
robust	_	_
,	_	_
single-ended	_	_
reset	_	_
capability	_	_
which	_	_
means	_	_
that	_	_
a	_	_
node	_	_
may	feasibility-options	_
be	_	_
reset	_	_
independently	_	_
and	_	_
still	_	_
recover	_	_
communication	_	_
with	_	_
its	_	_
neighbours	_	_
.	_	_

#284
Performance	_	_
assessment	_	_
Our	_	_
novel	_	_
fault	_	_
tolerant	_	_
interface	_	_
was	_	_
compared	_	_
with	_	_
a	_	_
conventional	_	_
unit	_	_
.	_	_

#285
Both	_	_
circuits	_	_
were	_	_
simulated	_	_
in	_	_
Verilog	_	_
handling	_	_
roughly	_	_
a	_	_
million	_	_
packets	_	_
each	_	_
in	_	_
an	_	_
extremely	_	_
noisy	_	_
environment	_	_
in	_	_
which	_	_
packets	_	_
have	_	_
a	_	_
50	_	_
%	_	_
probability	_	_
of	_	_
being	_	_
affected	_	_
by	_	_
a	_	_
glitch	_	_
.	_	_

#286
This	_	_
noise	_	_
level	_	_
is	_	_
exceedingly	_	_
high	_	_
and	_	_
thus	_	_
the	_	_
number	_	_
of	_	_
packets	_	_
corrupted	_	_
should	inference	negation
not	_	_
be	_	_
a	_	_
concern	_	_
.	_	_

#287
Results	_	_
of	_	_
these	_	_
simulations	_	_
are	_	_
shown	_	_
in	_	_
Table	_	_
2	_	_
.	_	_

#288
Glitches	_	_
represents	_	_
the	_	_
actual	_	_
packet	_	_
ratio	_	_
affected	_	_
by	_	_
a	_	_
glitch	_	_
.	_	_

#289
Error-free	_	_
Packets	_	_
represents	_	_
the	_	_
percentage	_	_
of	_	_
the	_	_
packets	_	_
affected	_	_
by	_	_
a	_	_
glitch	_	_
that	_	_
were	_	_
interpreted	_	_
correctly	_	_
i.e.	_	_
,	_	_
those	_	_
that	_	_
have	_	_
resisted	_	_
the	_	_
glitch	_	_
;	_	_
Deadlocks	_	_
represents	_	_
the	_	_
percentage	_	_
of	_	_
packets	_	_
affected	_	_
by	_	_
a	_	_
glitch	_	_
that	_	_
deadlocked	_	_
the	_	_
interface	_	_
.	_	_

#290
As	_	_
expected	_	_
our	_	_
design	_	_
did	_	_
not	_	_
deadlock	_	_
whereas	_	_
a	_	_
conventional	_	_
unit	_	_
deadlocked	_	_
roughly	_	_
2	_	_
%	_	_
of	_	_
the	_	_
times	_	_
that	_	_
a	_	_
glitch	_	_
appears	_	_
.	_	_

#291
This	_	_
is	_	_
very	_	_
significant	_	_
as	_	_
a	_	_
single	_	_
deadlock	_	_
has	_	_
the	_	_
potential	_	_
to	_	_
cripple	_	_
a	_	_
link	_	_
permanently	_	_
(	_	_
until	_	_
the	_	_
whole	_	_
system	_	_
is	_	_
rebooted	_	_
)	_	_
.	_	_

#292
Given	_	_
the	_	_
communication-intensive	_	_
application	_	_
model	_	_
supported	_	_
by	_	_
SpiNNaker	_	_
this	_	_
would	_	_
mean	_	_
a	_	_
network	_	_
becoming	_	_
highly	_	_
degraded	_	_
very	_	_
quickly	_	_
if	_	_
glitches	_	_
appeared	_	_
.	_	_

#293
The	_	_
price	_	_
of	_	_
the	_	_
deadlock-free	_	_
interface	_	_
is	_	_
that	_	_
glitches	_	_
alter	_	_
the	_	_
received	_	_
data	_	_
roughly	_	_
10	_	_
%	_	_
more	_	_
often	_	_
.	_	_

#294
This	_	_
is	_	_
acceptable	_	_
as	_	_
glitches	_	_
should	inference	_
be	_	_
rare	_	_
and	_	_
erroneous	_	_
packets	_	_
can	feasibility	_
be	_	_
detected	_	_
and	_	_
dropped	_	_
.	_	_

#295
Intra-chip	_	_
connections	_	_
The	_	_
asynchronous	_	_
on-chip	_	_
links	_	_
are	_	_
much	_	_
less	_	_
sensitive	_	_
to	_	_
noise-induced	_	_
glitches	_	_
,	_	_
so	_	_
they	_	_
employ	_	_
simpler	_	_
logic	_	_
.	_	_

#296
However	_	_
the	_	_
potential	_	_
for	_	_
deadlock	_	_
with	_	_
handshake	_	_
communications	_	_
still	_	_
applies	_	_
.	_	_

#297
To	_	_
alleviate	_	_
this	_	_
intra-chip	_	_
interfaces	_	_
are	_	_
provided	_	_
with	_	_
two	_	_
levels	_	_
of	_	_
reset	_	_
(	_	_
soft	_	_
and	_	_
hard	_	_
)	_	_
.	_	_

#298
Watchdog	_	_
will	_	_
apply	_	_
soft	_	_
reset	_	_
first	_	_
and	_	_
if	_	_
this	_	_
does	_	_
not	_	_
solve	_	_
the	_	_
problem	_	_
,	_	_
it	_	_
will	_	_
perform	_	_
a	_	_
hard	_	_
reset	_	_
of	_	_
the	_	_
entire	_	_
node	_	_
,	_	_
thus	_	_
disrupting	_	_
chip	_	_
operation	_	_
-	_	_
but	_	_
not	_	_
deadlocking	_	_
the	_	_
on-chip	_	_
network	_	_
.	_	_

#299
Other	_	_
fault-tolerant	_	_
features	_	_
Clock	_	_
redundancy	_	_
SpiNNaker	_	_
chips	_	_
have	_	_
two	_	_
independent	_	_
PLLs	_	_
with	_	_
the	_	_
intention	_	_
of	_	_
running	_	_
the	_	_
processors	_	_
and	_	_
the	_	_
router	_	_
at	_	_
one	_	_
frequency	_	_
(	_	_
200MHz	_	_
)	_	_
and	_	_
the	_	_
SDRAM	_	_
at	_	_
another	_	_
(	_	_
166MHz	_	_
)	_	_
to	_	_
improve	_	_
overall	_	_
performance	_	_
.	_	_

#300
However	_	_
clock	_	_
sources	_	_
can	feasibility	_
be	_	_
switched	_	_
so	_	_
,	_	_
in	_	_
the	_	_
event	_	_
of	_	_
a	_	_
PLL	_	_
failure	_	_
,	_	_
all	_	_
subsystems	_	_
'	_	_
clocks	_	_
can	feasibility	_
be	_	_
derived	_	_
from	_	_
the	_	_
same	_	_
source	_	_
.	_	_

#301
This	_	_
may	capability-options	_
reduce	_	_
performance	_	_
on	_	_
that	_	_
node	_	_
but	_	_
has	_	_
no	_	_
other	_	_
consequence	_	_
as	_	_
the	_	_
GALS	_	_
interconnection	_	_
is	_	_
inherently	_	_
adaptive	_	_
.	_	_

#302
GALS	_	_
implications	_	_
on	_	_
fault	_	_
tolerance	_	_
Using	_	_
a	_	_
GALS	_	_
approach	_	_
not	_	_
only	_	_
facilitates	_	_
the	_	_
SoC	_	_
design	_	_
process	_	_
but	_	_
also	_	_
simplifies	_	_
isolation	_	_
of	_	_
faulty	_	_
components	_	_
in	_	_
run	_	_
time	_	_
by	_	_
supporting	_	_
resetting	_	_
or	_	_
disabling	_	_
on-chip	_	_
components	_	_
independently	_	_
from	_	_
the	_	_
rest	_	_
of	_	_
the	_	_
SoC	_	_
.	_	_

#303
Memory	_	_
subsystem	_	_
fault	_	_
tolerance	_	_
Various	_	_
RAM	_	_
is	_	_
spread	_	_
across	_	_
a	_	_
SpiNNaker	_	_
chip	_	_
(	_	_
private	_	_
TCMs	_	_
,	_	_
on-chip	_	_
SRAM	_	_
and	_	_
off-chip	_	_
RAM	_	_
)	_	_
which	_	_
,	_	_
as	_	_
explained	_	_
before	_	_
,	_	_
are	_	_
the	_	_
main	_	_
expected	_	_
points	_	_
of	_	_
failure	_	_
.	_	_

#304
In	_	_
principle	_	_
it	_	_
is	_	_
possible	_	_
to	_	_
work-around	_	_
hard	_	_
failures	_	_
in	_	_
private	_	_
memories	_	_
but	_	_
the	_	_
degree	_	_
of	_	_
redundancy	_	_
in	_	_
the	_	_
system	_	_
means	_	_
our	_	_
plan	_	_
is	_	_
simply	_	_
to	_	_
inactivate	_	_
cores	_	_
with	_	_
permanent	_	_
TCM	_	_
failure	_	_
(	_	_
s	_	_
)	_	_
.	_	_

#305
The	_	_
SDRAMs	_	_
have	_	_
some	_	_
spare	_	_
capacity	_	_
and	_	_
are	_	_
mapped	_	_
by	_	_
the	_	_
Monitor	_	_
Processor	_	_
so	_	_
hard	_	_
failures	_	_
can	feasibility	_
be	_	_
worked	_	_
around	_	_
.	_	_

#306
Soft	_	_
errors	_	_
present	_	_
a	_	_
different	_	_
challenge	_	_
.	_	_

#307
The	_	_
SDRAM	_	_
is	_	_
usually	_	_
accessed	_	_
in	_	_
blocks	_	_
via	_	_
DMA	_	_
.	_	_

#308
The	_	_
DMA	_	_
controller	_	_
includes	_	_
a	_	_
fully	_	_
programmable	_	_
CRC	_	_
generator	_	_
and	_	_
checker	_	_
so	_	_
faulty	_	_
blocks	_	_
can	feasibility	_
be	_	_
detected	_	_
and	_	_
subject	_	_
to	_	_
software	_	_
recovery	_	_
.	_	_

#309
Private	_	_
memories	_	_
are	_	_
not	_	_
protected	_	_
by	_	_
error	_	_
detection	_	_
;	_	_
this	_	_
was	_	_
a	_	_
pragmatic	_	_
decision	_	_
to	_	_
maximise	_	_
the	_	_
speed	_	_
and	_	_
capacity	_	_
of	_	_
the	_	_
chip	_	_
.	_	_

#310
Soft	_	_
errors	_	_
in	_	_
code	_	_
space	_	_
can	capability	_
cause	_	_
a	_	_
software	_	_
crash	_	_
resulting	_	_
in	_	_
some	_	_
lost	_	_
neural	_	_
information	_	_
.	_	_

#311
Recovery	_	_
from	_	_
this	_	_
should	inference	_
be	_	_
achieved	_	_
by	_	_
the	_	_
watchdog	_	_
mechanism	_	_
resetting	_	_
the	_	_
affected	_	_
core	_	_
.	_	_

#312
Corruption	_	_
of	_	_
data	_	_
space	_	_
may	feasibility-options	_
be	_	_
detected	_	_
by	_	_
software	_	_
limit	_	_
checks	_	_
or	_	_
crashing	_	_
or	_	_
other	_	_
erratic	_	_
behaviour	_	_
.	_	_

#313
There	_	_
may	speculation	_
be	_	_
some	_	_
loss	_	_
of	_	_
data	_	_
or	_	_
some	_	_
erroneous	_	_
neural	_	_
firing	_	_
but	_	_
the	_	_
application	_	_
should	deontic	_
be	_	_
robust	_	_
enough	_	_
to	_	_
withstand	_	_
this	_	_
;	_	_
it	_	_
almost	_	_
certainly	_	_
happens	_	_
in	_	_
biological	_	_
systems	_	_
too	_	_
!	_	_

#314
Connecting	_	_
with	_	_
the	_	_
outside	_	_
world	_	_
A	_	_
SpiNNaker	_	_
system	_	_
communicates	_	_
with	_	_
a	_	_
host	_	_
computer	_	_
via	_	_
Ethernet	_	_
(	_	_
Fig	_	_
.	_	_
1	_	_
)	_	_
using	_	_
TCP/IP	_	_
.	_	_

#315
This	_	_
communication	_	_
is	_	_
used	_	_
for	_	_
different	_	_
management	_	_
actions	_	_
,	_	_
such	_	_
as	_	_
loading	_	_
to	_	_
the	_	_
chip	_	_
memories	_	_
the	_	_
application	_	_
code	_	_
or	_	_
the	_	_
neural	_	_
connectivity	_	_
information	_	_
.	_	_

#316
Although	_	_
all	_	_
chips	_	_
have	_	_
an	_	_
Ethernet	_	_
interface	_	_
in	_	_
practice	_	_
only	_	_
a	_	_
few	_	_
will	_	_
make	_	_
use	_	_
of	_	_
it	_	_
to	_	_
reduce	_	_
power	_	_
consumption	_	_
and	_	_
maximize	_	_
the	_	_
computing	_	_
resources	_	_
available	_	_
to	_	_
neurons	_	_
.	_	_

#317
Each	_	_
Ethernet-connected	_	_
chip	_	_
translates	_	_
frame-based	_	_
communication	_	_
to	_	_
inter-chip	_	_
packet-based	_	_
communication	_	_
.	_	_

#318
The	_	_
presence	_	_
of	_	_
several	_	_
possible	_	_
interfaces	_	_
does	_	_
,	_	_
however	_	_
,	_	_
eliminate	_	_
another	_	_
possible	_	_
single-point	_	_
failure	_	_
.	_	_

#319
Related	_	_
work	_	_
Research	_	_
in	_	_
simulating	_	_
biologically-plausible	_	_
neural	_	_
networks	_	_
(	_	_
brain-like	_	_
systems	_	_
)	_	_
is	_	_
not	_	_
new	_	_
.	_	_

#320
In	_	_
the	_	_
early	_	_
1990s	_	_
a	_	_
team	_	_
at	_	_
U.C.Berkeley	_	_
worked	_	_
on	_	_
the	_	_
Connectionist	_	_
Network	_	_
Supercomputer	_	_
[	_	_
27	_	_
]	_	_
which	_	_
aimed	_	_
to	_	_
build	_	_
a	_	_
supercomputer	_	_
specifically	_	_
tailored	_	_
for	_	_
neural	_	_
computation	_	_
as	_	_
a	_	_
tool	_	_
for	_	_
connectionist	_	_
research	_	_
.	_	_

#321
The	_	_
system	_	_
was	_	_
a	_	_
2D	_	_
mesh	_	_
,	_	_
with	_	_
a	_	_
target	_	_
size	_	_
of	_	_
128	_	_
nodes	_	_
(	_	_
scalable	_	_
to	_	_
512	_	_
)	_	_
.	_	_

#322
Each	_	_
node	_	_
would	_	_
incorporate	_	_
a	_	_
general-purpose	_	_
RISC	_	_
processor	_	_
plus	_	_
a	_	_
vector	_	_
coprocessor	_	_
,	_	_
16	_	_
MBytes	_	_
of	_	_
RAM	_	_
and	_	_
a	_	_
router	_	_
.	_	_

#323
As	_	_
far	_	_
as	_	_
we	_	_
know	_	_
,	_	_
the	_	_
node	_	_
was	_	_
built	_	_
(	_	_
under	_	_
the	_	_
codename	_	_
T0	_	_
)	_	_
,	_	_
but	_	_
the	_	_
system	_	_
never	_	_
operated	_	_
as	_	_
a	_	_
network	_	_
.	_	_

#324
Experiments	_	_
using	_	_
up	_	_
to	_	_
five	_	_
nodes	_	_
in	_	_
a	_	_
bus	_	_
configuration	_	_
were	_	_
discussed	_	_
in	_	_
[	_	_
28	_	_
]	_	_
.	_	_

#325
More	_	_
recently	_	_
,	_	_
the	_	_
Microelectronics	_	_
Division	_	_
at	_	_
the	_	_
Technical	_	_
University	_	_
of	_	_
Berlin	_	_
worked	_	_
on	_	_
a	_	_
project	_	_
entitled	_	_
Design	_	_
and	_	_
implementation	_	_
of	_	_
spiking	_	_
neural	_	_
networks	_	_
[	_	_
http	_	_
:	_	_
//mikro.ee.tu-berlin.de/spinn	_	_
]	_	_
whose	_	_
objectives	_	_
are	_	_
similar	_	_
to	_	_
those	_	_
of	_	_
SpiNNaker	_	_
.	_	_

#326
A	_	_
product	_	_
of	_	_
this	_	_
is	_	_
the	_	_
Spiking	_	_
Neural	_	_
Network	_	_
Emulation	_	_
Engine	_	_
(	_	_
SEE	_	_
)	_	_
,	_	_
an	_	_
acceleration	_	_
board	_	_
implemented	_	_
with	_	_
FPGAs	_	_
interconnected	_	_
via	_	_
an	_	_
on-board	_	_
bus	_	_
.	_	_

#327
SEE	_	_
accelerators	_	_
were	_	_
able	_	_
to	_	_
perform	_	_
neural	_	_
computations	_	_
30	_	_
times	_	_
faster	_	_
than	_	_
a	_	_
desktop	_	_
PC	_	_
[	_	_
29	_	_
]	_	_
.	_	_

#328
However	_	_
,	_	_
as	_	_
these	_	_
boards	_	_
can	feasibility	negation
not	_	_
be	_	_
connected	_	_
to	_	_
form	_	_
a	_	_
network	_	_
,	_	_
they	_	_
are	_	_
not	_	_
able	_	_
to	_	_
scale	_	_
to	_	_
the	_	_
magnitudes	_	_
of	_	_
SpiNNaker	_	_
.	_	_

#329
Research	_	_
on	_	_
spiking	_	_
neural	_	_
networks	_	_
has	_	_
also	_	_
used	_	_
different	_	_
off-the-shelf	_	_
technologies	_	_
such	_	_
as	_	_
FPGAs	_	_
[	_	_
30	_	_
]	_	_
,	_	_
graphic	_	_
processors	_	_
[	_	_
31	_	_
]	_	_
and	_	_
general	_	_
purpose	_	_
processors	_	_
and	_	_
accelerators	_	_
[	_	_
32	_	_
]	_	_
,	_	_
obtaining	_	_
speed-ups	_	_
of	_	_
over	_	_
two	_	_
orders	_	_
of	_	_
magnitude	_	_
compared	_	_
to	_	_
software-only	_	_
implementations	_	_
.	_	_

#330
The	_	_
relatively	_	_
small	_	_
scale	_	_
of	_	_
these	_	_
systems	_	_
allowed	_	_
the	_	_
assumption	_	_
of	_	_
a	_	_
complete	_	_
absence	_	_
of	_	_
component	_	_
failures	_	_
and	_	_
,	_	_
therefore	_	_
,	_	_
did	_	_
not	_	_
address	_	_
reliability	_	_
issues	_	_
and	_	_
did	_	_
not	_	_
incorporate	_	_
fault-tolerant	_	_
techniques	_	_
.	_	_

#331
As	_	_
far	_	_
as	_	_
we	_	_
know	_	_
,	_	_
there	_	_
are	_	_
only	_	_
three	_	_
active	_	_
projects	_	_
comparable	_	_
to	_	_
SpiNNaker	_	_
in	_	_
terms	_	_
of	_	_
simulation	_	_
scale	_	_
.	_	_

#332
First	_	_
,	_	_
the	_	_
Blue	_	_
Brain	_	_
project	_	_
[	_	_
http	_	_
:	_	_
//bluebrain.epfl.ch/	_	_
]	_	_
aims	_	_
to	_	_
create	_	_
biologically	_	_
accurate	_	_
functional	_	_
models	_	_
of	_	_
the	_	_
brain	_	_
;	_	_
however	_	_
,	_	_
model	_	_
complexity	_	_
(	_	_
far	_	_
more	_	_
intricate	_	_
than	_	_
SpiNNaker	_	_
's	_	_
)	_	_
only	_	_
allows	_	_
real-time	_	_
execution	_	_
of	_	_
roughly	_	_
a	_	_
neuron	_	_
per	_	_
node	_	_
[	_	_
33	_	_
]	_	_
.	_	_

#333
This	_	_
is	_	_
a	_	_
low	_	_
figure	_	_
in	_	_
comparison	_	_
with	_	_
the	_	_
several	_	_
thousand	_	_
(	_	_
simpler	_	_
)	_	_
neurons	_	_
per	_	_
node	_	_
supported	_	_
by	_	_
SpiNNaker	_	_
.	_	_

#334
Secondly	_	_
,	_	_
DARPA	_	_
's	_	_
System	_	_
of	_	_
Neuromorphic	_	_
Adaptive	_	_
Plastic	_	_
Scalable	_	_
Electronics	_	_
(	_	_
SyNAPSE	_	_
)	_	_
project	_	_
claims	_	_
that	_	_
it	_	_
has	_	_
achieved	_	_
the	_	_
simulation	_	_
of	_	_
spiking	_	_
neural	_	_
networks	_	_
the	_	_
size	_	_
of	_	_
a	_	_
cat	_	_
's	_	_
brain	_	_
[	_	_
34	_	_
]	_	_
-	_	_
109	_	_
neurons	_	_
-	_	_
using	_	_
Izhikevich	_	_
models	_	_
like	_	_
those	_	_
supported	_	_
by	_	_
SpiNNaker	_	_
.	_	_

#335
However	_	_
their	_	_
simulations	_	_
run	_	_
2-3	_	_
orders	_	_
of	_	_
magnitude	_	_
slower	_	_
than	_	_
real-time	_	_
.	_	_

#336
In	_	_
contrast	_	_
with	_	_
the	_	_
biologically-inspired	_	_
SpiNNaker	_	_
architecture	_	_
,	_	_
neither	_	_
Blue	_	_
Brain	_	_
nor	_	_
SyNAPSE	_	_
contemplate	_	_
the	_	_
construction	_	_
of	_	_
a	_	_
custom	_	_
architecture	_	_
but	_	_
use	_	_
general-purpose	_	_
supercomputers	_	_
from	_	_
the	_	_
IBM	_	_
BlueGene	_	_
family	_	_
,	_	_
depending	_	_
on	_	_
the	_	_
underlying	_	_
platform	_	_
for	_	_
their	_	_
reliability	_	_
and	_	_
fault	_	_
tolerance	_	_
.	_	_

#337
The	_	_
IBM	_	_
BlueGene/L	_	_
consists	_	_
of	_	_
64K	_	_
compute	_	_
nodes	_	_
,	_	_
each	_	_
based	_	_
on	_	_
PowerPC	_	_
400	_	_
processors	_	_
.	_	_

#338
Additionally	_	_
,	_	_
it	_	_
contains	_	_
several	_	_
service	_	_
nodes	_	_
that	_	_
reside	_	_
outside	_	_
the	_	_
core	_	_
[	_	_
35	_	_
]	_	_
and	_	_
communicate	_	_
with	_	_
it	_	_
using	_	_
Ethernet	_	_
.	_	_

#339
This	_	_
infrastructure	_	_
is	_	_
used	_	_
for	_	_
booting	_	_
,	_	_
controlling	_	_
and	_	_
monitoring	_	_
the	_	_
system	_	_
.	_	_

#340
System	_	_
monitoring	_	_
and	_	_
job	_	_
execution	_	_
is	_	_
done	_	_
by	_	_
the	_	_
combined	_	_
action	_	_
of	_	_
service	_	_
and	_	_
I/O	_	_
nodes	_	_
which	_	_
maintain	_	_
log	_	_
files	_	_
.	_	_

#341
During	_	_
boot-up	_	_
service	_	_
nodes	_	_
can	capability	_
control	_	_
the	_	_
computing	_	_
core	_	_
to	_	_
the	_	_
lowest	_	_
level	_	_
of	_	_
granularity	_	_
[	_	_
36	_	_
]	_	_
.	_	_

#342
Service	_	_
nodes	_	_
can	capability	_
also	_	_
directly	_	_
write	_	_
to	_	_
and	_	_
read	_	_
from	_	_
the	_	_
device	_	_
control	_	_
registers	_	_
of	_	_
each	_	_
processor	_	_
.	_	_

#343
This	_	_
feature	_	_
is	_	_
useful	_	_
for	_	_
handling	_	_
runtime	_	_
problems	_	_
and	_	_
investigating	_	_
any	_	_
booting	_	_
up	_	_
issues	_	_
.	_	_

#344
For	_	_
fault	_	_
tolerance	_	_
at	_	_
boot-up	_	_
or	_	_
at	_	_
run-time	_	_
a	_	_
self-test	_	_
mechanism	_	_
is	_	_
kept	_	_
in	_	_
each	_	_
chip	_	_
to	_	_
perform	_	_
system	_	_
diagnostics	_	_
.	_	_

#345
The	_	_
BlueGene	_	_
supercomputer	_	_
or	_	_
others	_	_
,	_	_
e.g.	_	_
,	_	_
the	_	_
Cray	_	_
XT	_	_
family	_	_
of	_	_
supercomputers	_	_
[	_	_
37,38	_	_
]	_	_
,	_	_
being	_	_
general-purpose	_	_
will	_	_
provide	_	_
solutions	_	_
that	_	_
do	_	_
not	_	_
match	_	_
the	_	_
power-efficiency	_	_
of	_	_
SpiNNaker	_	_
.	_	_

#346
Last	_	_
but	_	_
not	_	_
least	_	_
,	_	_
the	_	_
FACETS	_	_
project	_	_
[	_	_
39	_	_
]	_	_
is	_	_
attempting	_	_
to	_	_
create	_	_
a	_	_
faster	_	_
than	_	_
real-time	_	_
hardware	_	_
system	_	_
for	_	_
the	_	_
simulation	_	_
of	_	_
networks	_	_
of	_	_
large	_	_
but	_	_
unspecified	_	_
size	_	_
.	_	_

#347
This	_	_
architecture	_	_
,	_	_
while	_	_
biologically	_	_
inspired	_	_
,	_	_
uses	_	_
a	_	_
fixed	_	_
synapse	_	_
and	_	_
neuron	_	_
model	_	_
and	_	_
,	_	_
therefore	_	_
,	_	_
is	_	_
not	_	_
a	_	_
system	_	_
as	_	_
general	_	_
as	_	_
SpiNNaker	_	_
.	_	_

#348
It	_	_
employs	_	_
analogue	_	_
circuits	_	_
to	_	_
implement	_	_
most	_	_
of	_	_
the	_	_
central	_	_
dynamic	_	_
functions	_	_
.	_	_

#349
For	_	_
these	_	_
blocks	_	_
what	_	_
would	_	_
constitute	_	_
a	_	_
'fault	_	_
'	_	_
is	_	_
not	_	_
precisely	_	_
defined	_	_
since	_	_
analogue	_	_
circuits	_	_
exhibit	_	_
a	_	_
continuum	_	_
of	_	_
states	_	_
.	_	_

#350
It	_	_
is	_	_
therefore	_	_
relevant	_	_
to	_	_
discuss	_	_
fault	_	_
tolerance	_	_
only	_	_
with	_	_
respect	_	_
to	_	_
the	_	_
digital	_	_
components	_	_
:	_	_
the	_	_
communications	_	_
infrastructure	_	_
of	_	_
the	_	_
design	_	_
.	_	_

#351
The	_	_
FACETS	_	_
architecture	_	_
uses	_	_
wafer-scale	_	_
devices	_	_
[	_	_
40	_	_
]	_	_
to	_	_
achieve	_	_
the	_	_
necessary	_	_
connectivity	_	_
.	_	_

#352
It	_	_
uses	_	_
AER	_	_
signalling	_	_
(	_	_
similar	_	_
to	_	_
SpiNNaker	_	_
)	_	_
,	_	_
but	_	_
with	_	_
a	_	_
circuit-switched	_	_
,	_	_
synchronous	_	_
communications	_	_
subsystem	_	_
.	_	_

#353
Systems	_	_
of	_	_
this	_	_
kind	_	_
are	_	_
fault	_	_
tolerant	_	_
in	_	_
the	_	_
sense	_	_
of	_	_
being	_	_
reconfigurable	_	_
in	_	_
the	_	_
event	_	_
of	_	_
a	_	_
failed	_	_
link	_	_
;	_	_
however	_	_
they	_	_
are	_	_
not	_	_
live-reroutable	_	_
,	_	_
thus	_	_
the	_	_
system	_	_
provides	_	_
no	_	_
protection	_	_
against	_	_
transient	_	_
faults	_	_
nor	_	_
does	_	_
it	_	_
permit	_	_
packet	_	_
recovery	_	_
or	_	_
retransmission	_	_
while	_	_
the	_	_
system	_	_
is	_	_
active	_	_
.	_	_

#354
A	_	_
failed	_	_
link	_	_
requires	_	_
at	_	_
least	_	_
a	_	_
local	_	_
reconfiguration	_	_
with	_	_
possible	_	_
further	_	_
routing	_	_
impact	_	_
.	_	_

#355
FACETS	_	_
authors	_	_
discuss	_	_
fault	_	_
tolerance	_	_
but	_	_
only	_	_
as	_	_
a	_	_
general	_	_
property	_	_
of	_	_
neural	_	_
systems	_	_
;	_	_
the	_	_
system	_	_
does	_	_
not	_	_
include	_	_
specifically	_	_
designed	_	_
fault-tolerant	_	_
mechanisms	_	_
.	_	_

#356
Thus	_	_
the	_	_
FACETS	_	_
system	_	_
,	_	_
and	_	_
its	_	_
associated	_	_
HICANN	_	_
devices	_	_
,	_	_
once	_	_
again	_	_
represent	_	_
a	_	_
very	_	_
different	_	_
system	_	_
designed	_	_
to	_	_
solve	_	_
a	_	_
different	_	_
problem	_	_
:	_	_
faster	_	_
than	_	_
real-time	_	_
neural	_	_
simulation	_	_
,	_	_
for	_	_
which	_	_
power	_	_
consumption	_	_
is	_	_
not	_	_
a	_	_
factor	_	_
and	_	_
fault	_	_
tolerance	_	_
merely	_	_
a	_	_
side	_	_
effect	_	_
rather	_	_
than	_	_
a	_	_
design	_	_
feature	_	_
.	_	_

#357
Outside	_	_
of	_	_
the	_	_
field	_	_
of	_	_
brain-like	_	_
systems	_	_
we	_	_
can	rhetorical	_
cite	_	_
a	_	_
heterogeneous	_	_
SoC	_	_
with	_	_
certain	_	_
architectural	_	_
similarities	_	_
to	_	_
SpiNNaker	_	_
[	_	_
41	_	_
]	_	_
.	_	_

#358
This	_	_
consists	_	_
of	_	_
an	_	_
array	_	_
of	_	_
processors	_	_
connected	_	_
over	_	_
an	_	_
on-chip	_	_
NoC	_	_
and	_	_
containing	_	_
various	_	_
heterogeneous	_	_
system	_	_
components	_	_
.	_	_

#359
However	_	_
,	_	_
that	_	_
project	_	_
considers	_	_
general-purpose	_	_
applications	_	_
within	_	_
mission	_	_
critical	_	_
scenarios	_	_
requiring	_	_
the	_	_
robustness	_	_
of	_	_
triple	_	_
modular	_	_
redundancy	_	_
.	_	_

#360
This	_	_
approach	_	_
is	_	_
an	_	_
expensive	_	_
solution	_	_
unsuitable	_	_
for	_	_
SpiNNaker	_	_
.	_	_

#361
In	_	_
addition	_	_
,	_	_
their	_	_
NoC	_	_
appears	_	_
to	_	_
be	_	_
a	_	_
conventional	_	_
synchronous	_	_
design	_	_
rather	_	_
than	_	_
the	_	_
SpiNNaker	_	_
self-timed	_	_
communication	_	_
fabric	_	_
which	_	_
may	speculation	negation
difficult	_	_
scaling	_	_
up	_	_
the	_	_
system	_	_
.	_	_

#362
Reviewing	_	_
the	_	_
literature	_	_
on	_	_
general	_	_
purpose	_	_
multiprocessor	_	_
systems	_	_
we	_	_
can	feasibility-rhetorical	_
see	_	_
how	_	_
memory	_	_
fault	_	_
tolerance	_	_
efforts	_	_
have	_	_
been	_	_
devoted	_	_
mainly	_	_
to	_	_
the	_	_
interconnect	_	_
structure	_	_
[	_	_
42	_	_
]	_	_
,	_	_
and	_	_
to	_	_
the	_	_
use	_	_
of	_	_
ECC	_	_
(	_	_
originally	_	_
following	_	_
[	_	_
43	_	_
]	_	_
)	_	_
,	_	_
although	_	_
this	_	_
may	speculation	negation
not	_	_
be	_	_
in	_	_
itself	_	_
sufficient	_	_
[	_	_
44	_	_
]	_	_
.	_	_

#363
Given	_	_
that	_	_
symmetric	_	_
redundancy	_	_
of	_	_
memory	_	_
is	_	_
expensive	_	_
,	_	_
recent	_	_
work	_	_
has	_	_
introduced	_	_
the	_	_
concept	_	_
of	_	_
heterogeneous	_	_
fault	_	_
tolerance	_	_
:	_	_
graceful	_	_
fall-back	_	_
onto	_	_
other	_	_
components	_	_
able	_	_
to	_	_
perform	_	_
the	_	_
same	_	_
function	_	_
,	_	_
possibly	_	_
with	_	_
reduced	_	_
performance	_	_
[	_	_
45,46	_	_
]	_	_
.	_	_

#364
Such	_	_
an	_	_
approach	_	_
lowers	_	_
overall	_	_
hardware	_	_
costs	_	_
and	_	_
represents	_	_
a	_	_
reasonable	_	_
compromise	_	_
in	_	_
a	_	_
power-	_	_
or	_	_
area-constrained	_	_
design	_	_
.	_	_

#365
Our	_	_
asymmetric	_	_
memory	_	_
architecture	_	_
follows	_	_
this	_	_
approach	_	_
.	_	_

#366
Implementing	_	_
fault	_	_
tolerance	_	_
in	_	_
direct	_	_
networks	_	_
(	_	_
such	_	_
as	_	_
3D	_	_
tori	_	_
)	_	_
is	_	_
complex	_	_
and	_	_
costly	_	_
and	_	_
,	_	_
therefore	_	_
,	_	_
a	_	_
hot	_	_
research	_	_
topic	_	_
.	_	_

#367
Current	_	_
solutions	_	_
are	_	_
neither	_	_
easy	_	_
nor	_	_
cheap	_	_
to	_	_
implement	_	_
in	_	_
silicon	_	_
(	_	_
see	_	_
,	_	_
for	_	_
example	_	_
,	_	_
[	_	_
47,48	_	_
]	_	_
)	_	_
.	_	_

#368
The	_	_
simple	_	_
emergency	_	_
routing	_	_
mechanism	_	_
implemented	_	_
in	_	_
SpiNNker	_	_
has	_	_
been	_	_
shown	_	_
to	_	_
be	_	_
very	_	_
effective	_	_
for	_	_
this	_	_
purpose	_	_
.	_	_

#369
Summary	_	_
and	_	_
conclusions	_	_
This	_	_
paper	_	_
has	_	_
focused	_	_
on	_	_
introducing	_	_
the	_	_
broad	_	_
collection	_	_
of	_	_
fault	_	_
tolerance	_	_
mechanisms	_	_
implemented	_	_
in	_	_
SpiNNaker	_	_
.	_	_

#370
Such	_	_
features	_	_
are	_	_
quite	_	_
extensive	_	_
,	_	_
and	_	_
we	_	_
have	_	_
presented	_	_
descriptions	_	_
of	_	_
the	_	_
principal	_	_
mechanisms	_	_
and	_	_
,	_	_
where	_	_
available	_	_
,	_	_
the	_	_
pre-silicon	_	_
assessment	_	_
of	_	_
their	_	_
effectiveness	_	_
.	_	_

#371
Some	_	_
of	_	_
the	_	_
most	_	_
important	_	_
features	_	_
discussed	_	_
in	_	_
this	_	_
paper	_	_
are	_	_
the	_	_
following	_	_
:	_	_
•	_	_
A	_	_
collection	_	_
of	_	_
system	_	_
routines	_	_
able	_	_
to	_	_
detect	_	_
faults	_	_
and	_	_
to	_	_
quickly	_	_
recover	_	_
from	_	_
them	_	_
when	_	_
possible	_	_
or	_	_
to	_	_
isolate	_	_
components	_	_
and	_	_
to	_	_
reconfigure	_	_
the	_	_
system	_	_
otherwise	_	_
.	_	_

#372
•	_	_
A	_	_
range	_	_
of	_	_
application	_	_
loading	_	_
policies	_	_
offering	_	_
different	_	_
levels	_	_
of	_	_
resilience	_	_
and	_	_
performance	_	_
which	_	_
can	capability-feasibility	_
be	_	_
used	_	_
depending	_	_
on	_	_
the	_	_
level	_	_
of	_	_
system	_	_
degradation	_	_
.	_	_

#373
•	_	_
The	_	_
use	_	_
of	_	_
GALS	_	_
logic	_	_
that	_	_
facilitates	_	_
the	_	_
SoC	_	_
design	_	_
process	_	_
,	_	_
simplifies	_	_
timing	_	_
closure	_	_
and	_	_
simplifies	_	_
the	_	_
isolation	_	_
of	_	_
faulty	_	_
components	_	_
but	_	_
introduces	_	_
weaknesses	_	_
that	_	_
have	_	_
been	_	_
overcome	_	_
with	_	_
custom-hardware	_	_
.	_	_

#374
•	_	_
Asymmetric	_	_
redundancy	_	_
of	_	_
the	_	_
memory	_	_
subsystem	_	_
,	_	_
granting	_	_
graceful	_	_
fall-back	_	_
onto	_	_
other	_	_
components	_	_
able	_	_
to	_	_
perform	_	_
the	_	_
same	_	_
function	_	_
although	_	_
with	_	_
reduced	_	_
performance	_	_
.	_	_

#375
Such	_	_
an	_	_
approach	_	_
lowers	_	_
overall	_	_
hardware	_	_
costs	_	_
and	_	_
represents	_	_
a	_	_
reasonable	_	_
compromise	_	_
in	_	_
a	_	_
power-	_	_
or	_	_
area-constrained	_	_
design	_	_
.	_	_

#376
•	_	_
A	_	_
novel	_	_
robust	_	_
self-timed	_	_
chip-to-chip	_	_
interface	_	_
circuit	_	_
,	_	_
resilient	_	_
to	_	_
noise-induced	_	_
glitches	_	_
preventing	_	_
deadlocks	_	_
.	_	_

#377
•	_	_
A	_	_
stable	_	_
communication	_	_
fabric	_	_
able	_	_
to	_	_
support	_	_
communication	_	_
demands	_	_
exceeding	_	_
those	_	_
expected	_	_
during	_	_
regular	_	_
operation	_	_
.	_	_

#378
•	_	_
The	_	_
novel	_	_
emergency	_	_
routing	_	_
mechanism	_	_
helps	_	_
to	_	_
deal	_	_
with	_	_
congestion	_	_
and	_	_
network	_	_
failures	_	_
.	_	_

#379
The	_	_
main	_	_
conclusion	_	_
of	_	_
this	_	_
paper	_	_
is	_	_
that	_	_
SpiNNaker	_	_
is	_	_
a	_	_
well-balanced	_	_
fault-resilient	_	_
architecture	_	_
in	_	_
which	_	_
fault-tolerance	_	_
has	_	_
been	_	_
considered	_	_
a	_	_
fundamental	_	_
foundation	_	_
of	_	_
its	_	_
design	_	_
.	_	_

#380
This	_	_
should	deontic-inference	_
facilitate	_	_
its	_	_
scaling	_	_
from	_	_
the	_	_
prototype	_	_
,	_	_
4-chip	_	_
systems	_	_
into	_	_
practical	_	_
,	_	_
large-scale	_	_
networks	_	_
with	_	_
over	_	_
1	_	_
million	_	_
cores	_	_
.	_	_

#381
Acknowledgements	_	_
The	_	_
SpiNNaker	_	_
project	_	_
is	_	_
supported	_	_
by	_	_
the	_	_
Engineering	_	_
and	_	_
Physical	_	_
Sciences	_	_
Research	_	_
Council	_	_
(	_	_
EPSRC	_	_
)	_	_
,	_	_
through	_	_
grants	_	_
EP/G015740/1	_	_
,	_	_
EP/G013500/1	_	_
,	_	_
EP/D07908X/1	_	_
and	_	_
GR/S61270/01	_	_
,	_	_
and	_	_
also	_	_
by	_	_
industrial	_	_
partners	_	_
ARM	_	_
and	_	_
Silistix	_	_
.	_	_

#382
Prof	_	_
.	_	_

#383
Miguel-Alonso	_	_
is	_	_
supported	_	_
by	_	_
the	_	_
Spanish	_	_
Ministry	_	_
of	_	_
Science	_	_
and	_	_
Innovation	_	_
(	_	_
grant	_	_
TIN2010-14931	_	_
)	_	_
and	_	_
by	_	_
the	_	_
Basque	_	_
Government	_	_
(	_	_
grant	_	_
IT-242-07	_	_
)	_	_
.	_	_

#384
Dr	_	_
.	_	_

#385
Luján	_	_
holds	_	_
a	_	_
Royal	_	_
Society	_	_
University	_	_
Research	_	_
Fellowship	_	_
.	_	_

#386
Dr	_	_
.	_	_

#387
Navaridas	_	_
was	_	_
a	_	_
Royal	_	_
Society	_	_
Newton	_	_
International	_	_
Fellow	_	_
when	_	_
this	_	_
research	_	_
was	_	_
performed	_	_
.	_	_