#0
MIS-SLAM	_	_
:	_	_
Real-time	_	_
Large	_	_
Scale	_	_
Dense	_	_
Deformable	_	_
SLAM	_	_
System	_	_
in	_	_
Minimal	_	_
Invasive	_	_
Surgery	_	_
Based	_	_
on	_	_
Heterogeneous	_	_
Computing	_	_
Jingwei	_	_
Song	_	_
,	_	_
Jun	_	_
Wang	_	_
,	_	_
Liang	_	_
Zhao	_	_
,	_	_
Shoudong	_	_
Huang	_	_
and	_	_
Gamini	_	_
Dissanayake	_	_
Abstract—	_	_
Real-time	_	_
simultaneously	_	_
localization	_	_
and	_	_
dense	_	_
mapping	_	_
is	_	_
very	_	_
helpful	_	_
for	_	_
providing	_	_
Virtual	_	_
Reality	_	_
and	_	_
Augmented	_	_
Reality	_	_
for	_	_
surgeons	_	_
or	_	_
even	_	_
surgical	_	_
robots	_	_
.	_	_

#1
In	_	_
this	_	_
paper	_	_
,	_	_
we	_	_
propose	_	_
MIS-SLAM	_	_
:	_	_
a	_	_
complete	_	_
real-time	_	_
large	_	_
scale	_	_
dense	_	_
deformable	_	_
SLAM	_	_
system	_	_
with	_	_
stereoscope	_	_
in	_	_
Minimal	_	_
Invasive	_	_
Surgery	_	_
based	_	_
on	_	_
heterogeneous	_	_
computing	_	_
by	_	_
making	_	_
full	_	_
use	_	_
of	_	_
CPU	_	_
and	_	_
GPU	_	_
.	_	_

#2
Idled	_	_
CPU	_	_
is	_	_
used	_	_
to	_	_
perform	_	_
ORB-SLAM	_	_
for	_	_
providing	_	_
robust	_	_
global	_	_
pose	_	_
.	_	_

#3
Strategies	_	_
are	_	_
taken	_	_
to	_	_
integrate	_	_
modules	_	_
from	_	_
CPU	_	_
and	_	_
GPU	_	_
.	_	_

#4
We	_	_
solved	_	_
the	_	_
key	_	_
problem	_	_
raised	_	_
in	_	_
previous	_	_
work	_	_
,	_	_
that	_	_
is	_	_
,	_	_
fast	_	_
movement	_	_
of	_	_
scope	_	_
and	_	_
blurry	_	_
images	_	_
make	_	_
the	_	_
scope	_	_
tracking	_	_
fail	_	_
.	_	_

#5
Benefiting	_	_
from	_	_
improved	_	_
localization	_	_
,	_	_
MIS-SLAM	_	_
can	_	_
achieve	_	_
large	_	_
scale	_	_
scope	_	_
localizing	_	_
and	_	_
dense	_	_
mapping	_	_
in	_	_
real-time	_	_
.	_	_

#6
It	_	_
transforms	_	_
and	_	_
deforms	_	_
current	_	_
model	_	_
and	_	_
incrementally	_	_
fuses	_	_
new	_	_
observation	_	_
while	_	_
keeping	_	_
vivid	_	_
texture	_	_
.	_	_

#7
In-vivo	_	_
experiments	_	_
conducted	_	_
on	_	_
publicly	_	_
available	_	_
datasets	_	_
presented	_	_
in	_	_
the	_	_
form	_	_
of	_	_
videos	_	_
demonstrate	_	_
the	_	_
feasibility	_	_
and	_	_
practicality	_	_
of	_	_
MIS-SLAM	_	_
for	_	_
potential	_	_
clinical	_	_
purpose	_	_
.	_	_

#8
I	_	_
.	_	_

#9
INTRODUCTION	_	_
Comparing	_	_
with	_	_
open	_	_
surgery	_	_
,	_	_
Minimally	_	_
Invasive	_	_
Surgery	_	_
(	_	_
MIS	_	_
)	_	_
brings	_	_
shortcomings	_	_
such	_	_
as	_	_
lack	_	_
of	_	_
field	_	_
of	_	_
view	_	_
,	_	_
poor	_	_
localization	_	_
of	_	_
scope	_	_
and	_	_
fewer	_	_
surrounding	_	_
information	_	_
.	_	_

#10
Limited	_	_
by	_	_
these	_	_
,	_	_
surgeons	_	_
are	_	_
required	_	_
to	_	_
perform	_	_
the	_	_
intraoperations	_	_
in	_	_
narrow	_	_
space	_	_
with	_	_
elongated	_	_
tools	_	_
and	_	_
without	_	_
direct	_	_
3D	_	_
vision	_	_
[	_	_
1	_	_
]	_	_
.	_	_

#11
To	_	_
overcome	_	_
these	_	_
problems	_	_
,	_	_
surgeons	_	_
spend	_	_
large	_	_
amount	_	_
of	_	_
time	_	_
training	_	_
to	_	_
be	_	_
familiar	_	_
with	_	_
doing	_	_
operations	_	_
under	_	_
scopes	_	_
.	_	_

#12
SLAM	_	_
,	_	_
simultaneous	_	_
localization	_	_
and	_	_
mapping	_	_
,	_	_
is	_	_
a	_	_
technique	_	_
applied	_	_
in	_	_
robotics	_	_
for	_	_
pose	_	_
estimation	_	_
and	_	_
environment	_	_
mapping	_	_
.	_	_

#13
Efforts	_	_
have	_	_
been	_	_
devoted	_	_
to	_	_
exploit	_	_
the	_	_
feasibility	_	_
of	_	_
applying	_	_
SLAM	_	_
to	_	_
localize	_	_
the	_	_
scope	_	_
and	_	_
reconstruct	_	_
a	_	_
sparse	_	_
or	_	_
even	_	_
dense	_	_
soft-tissue	_	_
surface	_	_
.	_	_

#14
[	_	_
2	_	_
]	_	_
and	_	_
[	_	_
3	_	_
]	_	_
adopt	_	_
conventional	_	_
feature	_	_
based	_	_
SLAM	_	_
,	_	_
these	_	_
are	_	_
extended	_	_
Kalman	_	_
filter	_	_
(	_	_
EKF	_	_
)	_	_
SLAM	_	_
and	_	_
Parallel	_	_
Tracking	_	_
and	_	_
Mapping	_	_
(	_	_
PTAM	_	_
)	_	_
.	_	_

#15
They	_	_
improved	_	_
EKF	_	_
and	_	_
PTAM	_	_
by	_	_
using	_	_
threshold	_	_
strategies	_	_
to	_	_
separate	_	_
rigid	_	_
and	_	_
non-rigid	_	_
feature	_	_
points	_	_
.	_	_

#16
Mahmoud	_	_
et	_	_
al.	_	_
[	_	_
4	_	_
]	_	_
[	_	_
5	_	_
]	_	_
[	_	_
13	_	_
]	_	_
exploit	_	_
and	_	_
tune	_	_
a	_	_
complete	_	_
and	_	_
widely	_	_
used	_	_
large	_	_
scale	_	_
SLAM	_	_
system	_	_
named	_	_
ORB-SLAM	_	_
[	_	_
6	_	_
]	_	_
.	_	_

#17
They	_	_
analyze	_	_
and	_	_
proved	_	_
that	_	_
ORB-SLAM	_	_
is	_	_
also	_	_
suitable	_	_
for	_	_
scope	_	_
localization	_	_
in	_	_
MIS	_	_
.	_	_

#18
In	_	_
[	_	_
5	_	_
]	_	_
,	_	_
a	_	_
quasidense	_	_
map	_	_
can	_	_
be	_	_
estimated	_	_
off-line	_	_
based	_	_
on	_	_
pose	_	_
imported	_	_
from	_	_
ORB-SLAM	_	_
.	_	_

#19
Feature	_	_
points	_	_
for	_	_
localization	_	_
are	_	_
widely	_	_
used	_	_
for	_	_
sparse	_	_
mapping	_	_
.	_	_

#20
Contrary	_	_
to	_	_
feature	_	_
based	_	_
SLAM	_	_
,	_	_
Du	_	_
et	_	_
al.	_	_
[	_	_
7	_	_
]	_	_
adopt	_	_
dense	_	_
matching	_	_
SLAM	_	_
which	_	_
employed	_	_
a	_	_
special	_	_
optical	_	_
flow	_	_
namely	_	_
Deformable	_	_
Lucas-Kanade	_	_
for	_	_
tracking	_	_
tissue	_	_
surface	_	_
.	_	_

#21
Aside	_	_
from	_	_
SLAM	_	_
,	_	_
other	_	_
approaches	_	_
All	_	_
the	_	_
authors	_	_
are	_	_
from	_	_
Centre	_	_
for	_	_
Autonomous	_	_
Systems	_	_
,	_	_
University	_	_
of	_	_
Technology	_	_
,	_	_
Sydney	_	_
,	_	_
P.O	_	_
.	_	_

#22
Box	_	_
123	_	_
,	_	_
Broadway	_	_
,	_	_
NSW	_	_
2007	_	_
,	_	_
Australia	_	_
Email	_	_
:	_	_
jingwei.song	_	_
@	_	_
student.uts.edu.au	_	_
,	_	_
wangjun	_	_
@	_	_
radi.ac.cn	_	_
,	_	_
{	_	_
Liang.Zhao	_	_
;	_	_
Shoudong.Huang	_	_
;	_	_
Gamini.Dissanayake	_	_
}	_	_
@	_	_
uts.edu.au	_	_
also	_	_
contribute	_	_
greatly	_	_
to	_	_
enable	_	_
augmented	_	_
reality	_	_
(	_	_
AR	_	_
)	_	_
and	_	_
virtual	_	_
reality	_	_
(	_	_
VR	_	_
)	_	_
in	_	_
MIS	_	_
.	_	_

#23
[	_	_
8	_	_
]	_	_
proposes	_	_
an	_	_
approach	_	_
to	_	_
recover	_	_
3D	_	_
geometry	_	_
from	_	_
stereo	_	_
images	_	_
.	_	_

#24
A	_	_
structure	_	_
from	_	_
motion	_	_
pipeline	_	_
[	_	_
9	_	_
]	_	_
is	_	_
proposed	_	_
for	_	_
partial	_	_
3D	_	_
surgical	_	_
scene	_	_
reconstruction	_	_
and	_	_
localization	_	_
.	_	_

#25
[	_	_
10	_	_
]	_	_
and	_	_
[	_	_
11	_	_
]	_	_
extract	_	_
whole	_	_
tissue	_	_
surface	_	_
from	_	_
stereo	_	_
or	_	_
monocular	_	_
images	_	_
.	_	_

#26
All	_	_
these	_	_
approaches	_	_
contribute	_	_
greatly	_	_
to	_	_
MIS	_	_
.	_	_

#27
However	_	_
,	_	_
they	_	_
still	_	_
don’t	_	_
provide	_	_
a	_	_
real-time	_	_
complete	_	_
and	_	_
robust	_	_
solution	_	_
for	_	_
localizing	_	_
scope	_	_
while	_	_
reconstructing	_	_
dense	_	_
deformable	_	_
soft-tissue	_	_
surfaces	_	_
.	_	_

#28
All	_	_
the	_	_
SLAM	_	_
techniques	_	_
mentioned	_	_
above	_	_
focus	_	_
on	_	_
monocular	_	_
scope	_	_
and	_	_
didn’t	_	_
solve	_	_
the	_	_
problem	_	_
of	_	_
missing	_	_
scale	_	_
,	_	_
thus	_	_
making	_	_
localization	_	_
not	_	_
very	_	_
practical	_	_
.	_	_

#29
To	_	_
broaden	_	_
surgeons’	_	_
field	_	_
of	_	_
view	_	_
,	_	_
3D	_	_
laparoscopy	_	_
,	_	_
or	_	_
binoculars	_	_
is	_	_
applied	_	_
to	_	_
generate	_	_
2	_	_
images	_	_
from	_	_
different	_	_
viewing	_	_
point	_	_
so	_	_
that	_	_
a	_	_
3D	_	_
geometry	_	_
based	_	_
on	_	_
parallax	_	_
is	_	_
created	_	_
in	_	_
surgeons’	_	_
mind	_	_
for	_	_
better	_	_
understanding	_	_
of	_	_
the	_	_
environment	_	_
.	_	_

#30
Recently	_	_
,	_	_
similar	_	_
stereo	_	_
vision	_	_
is	_	_
adopted	_	_
by	_	_
some	_	_
AR	_	_
devices	_	_
for	_	_
enhancing	_	_
MIS	_	_
procedures	_	_
.	_	_

#31
Therefore	_	_
,	_	_
it	_	_
will	_	_
be	_	_
very	_	_
helpful	_	_
if	_	_
stereo	_	_
vision	_	_
related	_	_
approaches	_	_
in	_	_
computer	_	_
vision	_	_
community	_	_
could	capability	_
be	_	_
integrated	_	_
,	_	_
extended	_	_
and	_	_
improved	_	_
to	_	_
recover	_	_
deformable	_	_
shape	_	_
in	_	_
real-time	_	_
while	_	_
estimating	_	_
the	_	_
pose	_	_
of	_	_
the	_	_
camera	_	_
.	_	_

#32
In	_	_
our	_	_
previous	_	_
work	_	_
,	_	_
we	_	_
proposed	_	_
a	_	_
dynamic	_	_
reconstruction	_	_
of	_	_
deformable	_	_
soft-tissue	_	_
with	_	_
stereo	_	_
scope	_	_
[	_	_
12	_	_
]	_	_
.	_	_

#33
A	_	_
warping	_	_
field	_	_
based	_	_
on	_	_
the	_	_
embedded	_	_
deformation	_	_
nodes	_	_
approach	_	_
is	_	_
introduced	_	_
with	_	_
3D	_	_
dense	_	_
shapes	_	_
recovered	_	_
from	_	_
sequences	_	_
pairs	_	_
of	_	_
stereo	_	_
images	_	_
.	_	_

#34
With	_	_
the	_	_
help	_	_
of	_	_
general-purpose	_	_
computing	_	_
on	_	_
graphics	_	_
processing	_	_
units	_	_
(	_	_
GPGPU	_	_
)	_	_
,	_	_
all	_	_
the	_	_
processes	_	_
are	_	_
achieved	_	_
in	_	_
real-time	_	_
.	_	_

#35
Mentioned	_	_
in	_	_
[	_	_
12	_	_
]	_	_
,	_	_
the	_	_
first	_	_
and	_	_
most	_	_
important	_	_
challenge	_	_
to	_	_
the	_	_
pipeline	_	_
is	_	_
the	_	_
fast	_	_
movement	_	_
of	_	_
scope	_	_
.	_	_

#36
Fast	_	_
movement	_	_
not	_	_
only	_	_
makes	_	_
visual	_	_
odometry	_	_
unstable	_	_
but	_	_
also	_	_
causes	_	_
blurry	_	_
images	_	_
which	_	_
make	_	_
registrations	_	_
even	_	_
worse	_	_
.	_	_

#37
This	_	_
issue	_	_
has	_	_
also	_	_
been	_	_
reported	_	_
in	_	_
[	_	_
2	_	_
]	_	_
and	_	_
[	_	_
3	_	_
]	_	_
.	_	_

#38
Inspired	_	_
by	_	_
the	_	_
research	_	_
done	_	_
by	_	_
Mahmoud	_	_
et	_	_
al.	_	_
[	_	_
4	_	_
]	_	_
[	_	_
5	_	_
]	_	_
[	_	_
13	_	_
]	_	_
which	_	_
demonstrate	_	_
the	_	_
robustness	_	_
of	_	_
camera	_	_
pose	_	_
estimation	_	_
from	_	_
ORB-SLAM	_	_
,	_	_
we	_	_
figure	_	_
out	_	_
ORB-SLAM	_	_
is	_	_
suitable	_	_
to	_	_
be	_	_
improved	_	_
and	_	_
coupled	_	_
with	_	_
dense	_	_
deformable	_	_
SLAM	_	_
.	_	_

#39
In	_	_
this	_	_
paper	_	_
,	_	_
we	_	_
propose	_	_
MIS-SLAM	_	_
which	_	_
builds	_	_
on	_	_
our	_	_
preliminary	_	_
work	_	_
[	_	_
12	_	_
]	_	_
with	_	_
the	_	_
following	_	_
major	_	_
improvements	_	_
:	_	_
(	_	_
1	_	_
)	_	_
We	_	_
proposed	_	_
a	_	_
heterogeneous	_	_
framework	_	_
to	_	_
make	_	_
full	_	_
use	_	_
of	_	_
both	_	_
GPU	_	_
(	_	_
dense	_	_
deformable	_	_
SLAM	_	_
)	_	_
and	_	_
CPU	_	_
(	_	_
ORB-SLAM	_	_
)	_	_
to	_	_
recover	_	_
the	_	_
dense	_	_
deformed	_	_
3D	_	_
structure	_	_
of	_	_
the	_	_
soft-tissues	_	_
in	_	_
MIS	_	_
scenario	_	_
.	_	_

#40
Computational	_	_
power	_	_
of	_	_
CPU	_	_
is	_	_
fully	_	_
exploited	_	_
to	_	_
run	_	_
an	_	_
improved	_	_
ORB-SLAM	_	_
to	_	_
provide	_	_
complementary	_	_
information	_	_
to	_	_
GPU	_	_
modules	_	_
.	_	_

#41
(	_	_
2	_	_
)	_	_
Modules	_	_
from	_	_
GPU	_	_
and	_	_
CPU	_	_
are	_	_
deeply	_	_
integrated	_	_
to	_	_
boost	_	_
performance	_	_
and	_	_
enhance	_	_
the	_	_
efficiency	_	_
.	_	_

#42
Sparse	_	_
ORB	_	_
features	_	_
as	_	_
well	_	_
as	_	_
global	_	_
pose	_	_
are	_	_
uploaded	_	_
to	_	_
GPU	_	_
.	_	_

#43
(	_	_
3	_	_
)	_	_
We	_	_
ar	_	_
X	_	_
iv	_	_
:1	_	_
3	_	_
.	_	_

#44
9v	_	_
2	_	_
[	_	_
cs	_	_
.C	_	_
V	_	_
]	_	_
2	_	_
7	_	_
M	_	_
ar	_	_
2	_	_
Fig.	_	_
1	_	_
:	_	_
The	_	_
framework	_	_
of	_	_
MIS-SLAM	_	_
.	_	_

#45
CPU	_	_
is	_	_
responsible	_	_
for	_	_
ORB-SLAM	_	_
,	_	_
uploading	_	_
features	_	_
,	_	_
global	_	_
pose	_	_
and	_	_
organize	_	_
a	_	_
visualization	_	_
module	_	_
.	_	_

#46
GPU	_	_
processes	_	_
depth	_	_
estimation	_	_
,	_	_
registration	_	_
,	_	_
fusion	_	_
and	_	_
visualization	_	_
.	_	_

#47
upgrade	_	_
point	_	_
cloud	_	_
map	_	_
and	_	_
fusion	_	_
management	_	_
strategy	_	_
to	_	_
enhance	_	_
large	_	_
scale	_	_
soft-tissue	_	_
reconstructing	_	_
.	_	_

#48
Comparing	_	_
with	_	_
truncated	_	_
signed	_	_
distance	_	_
function	_	_
(	_	_
TSDF	_	_
)	_	_
widely	_	_
used	_	_
in	_	_
computer	_	_
vision	_	_
community	_	_
[	_	_
14	_	_
]	_	_
,	_	_
[	_	_
15	_	_
]	_	_
and	_	_
[	_	_
16	_	_
]	_	_
,	_	_
point	_	_
cloud	_	_
management	_	_
in	_	_
MIS-SLAM	_	_
notably	_	_
reduce	_	_
memory	_	_
as	_	_
well	_	_
as	_	_
boost	_	_
the	_	_
performance	_	_
.	_	_

#49
(	_	_
4	_	_
)	_	_
Real-time	_	_
visualization	_	_
is	_	_
achieved	_	_
on	_	_
GPU	_	_
end	_	_
.	_	_

#50
MIS-SLAM	_	_
can	_	_
process	_	_
large	_	_
scale	_	_
surface	_	_
reconstruction	_	_
in	_	_
just	_	_
one	_	_
desktop	_	_
in	_	_
realtime	_	_
.	_	_

#51
We	_	_
suggest	_	_
readers	_	_
to	_	_
view	_	_
the	_	_
associate	_	_
video	_	_
for	_	_
the	_	_
reconstruction	_	_
process	_	_
and	_	_
to	_	_
fully	_	_
appreciate	_	_
the	_	_
live	_	_
capabilities	_	_
of	_	_
the	_	_
system	_	_
.	_	_

#52
II	_	_
.	_	_

#53
TECHNICAL	_	_
DETAILS	_	_
A.	_	_
Overview	_	_
of	_	_
MIS-SLAM	_	_
The	_	_
framework	_	_
of	_	_
MIS-SLAM	_	_
includes	_	_
improved	_	_
ORB-SLAM	_	_
(	_	_
CPU	_	_
)	_	_
,	_	_
warping	_	_
field	_	_
and	_	_
global	_	_
pose	_	_
estimation	_	_
(	_	_
GPU	_	_
)	_	_
,	_	_
new	_	_
data	_	_
fusion	_	_
(	_	_
GPU	_	_
)	_	_
,	_	_
data	_	_
transforming	_	_
from	_	_
CPU	_	_
to	_	_
GPU	_	_
and	_	_
GPU	_	_
based	_	_
visualization	_	_
.	_	_

#54
ORB-SLAM	_	_
is	_	_
first	_	_
launched	_	_
on	_	_
CPU	_	_
;	_	_
ORB	_	_
features	_	_
and	_	_
global	_	_
pose	_	_
are	_	_
uploaded	_	_
from	_	_
CPU	_	_
to	_	_
GPU	_	_
global	_	_
memory	_	_
.	_	_

#55
After	_	_
receiving	_	_
initial	_	_
global	_	_
pose	_	_
from	_	_
CPU	_	_
,	_	_
GPU	_	_
modules	_	_
first	_	_
initialize	_	_
the	_	_
model	_	_
with	_	_
first	_	_
estimated	_	_
depth	_	_
.	_	_

#56
Each	_	_
time	_	_
when	_	_
new	_	_
observation	_	_
is	_	_
acquired	_	_
,	_	_
the	_	_
matched	_	_
ORB	_	_
features	_	_
are	_	_
upload	_	_
to	_	_
GPU	_	_
.	_	_

#57
Potential	_	_
visible	_	_
points	_	_
are	_	_
extracted	_	_
from	_	_
model	_	_
and	_	_
projected	_	_
into	_	_
2D	_	_
depth	_	_
images	_	_
.	_	_

#58
System	_	_
performs	_	_
a	_	_
registration	_	_
process	_	_
to	_	_
estimate	_	_
optimum	_	_
rigid	_	_
transformation	_	_
as	_	_
well	_	_
as	_	_
non-rigid	_	_
warping	_	_
field	_	_
.	_	_

#59
Live	_	_
model	_	_
is	_	_
then	_	_
deformed	_	_
to	_	_
current	_	_
state	_	_
according	_	_
to	_	_
this	_	_
transformation	_	_
and	_	_
fused	_	_
with	_	_
new	_	_
observation	_	_
.	_	_

#60
We	_	_
make	_	_
full	_	_
use	_	_
of	_	_
the	_	_
feature	_	_
called	_	_
‘Graphic	_	_
Interoperability‘	_	_
in	_	_
compute	_	_
unified	_	_
device	_	_
architecture	_	_
(	_	_
CUDA	_	_
)	_	_
to	_	_
directly	_	_
visualize	_	_
model	_	_
from	_	_
GPU	_	_
side	_	_
.	_	_

#61
Fig.	_	_
1	_	_
demonstrates	_	_
the	_	_
pipeline	_	_
of	_	_
these	_	_
processes	_	_
.	_	_

#62
Realizing	_	_
the	_	_
point	_	_
cloud	_	_
generated	_	_
from	_	_
stereo	_	_
images	_	_
are	_	_
much	_	_
less	_	_
reliable	_	_
than	_	_
depth	_	_
perception	_	_
sensors	_	_
,	_	_
we	_	_
modify	_	_
and	_	_
update	_	_
previous	_	_
point	_	_
cloud	_	_
approach	_	_
with	_	_
more	_	_
properties	_	_
.	_	_

#63
Each	_	_
point	_	_
stores	_	_
five	_	_
domains	_	_
:	_	_
coordinate	_	_
vi	_	_
,	_	_
weight	_	_
ω	_	_
(	_	_
vi	_	_
)	_	_
,	_	_
color	_	_
C	_	_
i	_	_
,	_	_
time	_	_
stamp	_	_
t	_	_
i	_	_
and	_	_
a	_	_
boolean	_	_
variable	_	_
stability	_	_
Si	_	_
.	_	_

#64
Comparing	_	_
with	_	_
conventional	_	_
TSDF	_	_
based	_	_
approach	_	_
,	_	_
point	_	_
cloud	_	_
management	_	_
enables	_	_
processing	_	_
larger	_	_
scale	_	_
because	_	_
empty	_	_
space	_	_
is	_	_
not	_	_
computed	_	_
,	_	_
no	_	_
predefined	_	_
space	_	_
is	_	_
calculated	_	_
and	_	_
marching	_	_
cube	_	_
process	_	_
in	_	_
grid-based	_	_
approach	_	_
can	_	_
be	_	_
avoided	_	_
.	_	_

#65
B	_	_
.	_	_

#66
Depth	_	_
estimation	_	_
from	_	_
stereo	_	_
images	_	_
Efficient	_	_
Large-scale	_	_
Stereo	_	_
(	_	_
ELAS	_	_
)	_	_
[	_	_
17	_	_
]	_	_
is	_	_
adopted	_	_
as	_	_
the	_	_
depth	_	_
estimation	_	_
method	_	_
.	_	_

#67
ELAS	_	_
has	_	_
been	_	_
widely	_	_
proved	_	_
to	_	_
achieve	_	_
good	_	_
result	_	_
in	_	_
surgical	_	_
vision	_	_
[	_	_
18	_	_
]	_	_
.	_	_

#68
Fig.	_	_
2	_	_
is	_	_
the	_	_
example	_	_
of	_	_
original	_	_
depth	_	_
and	_	_
fused	_	_
model	_	_
.	_	_

#69
Original	_	_
depth	_	_
Fused	_	_
model	_	_
Fig.	_	_
2	_	_
:	_	_
Examples	_	_
of	_	_
depth	_	_
and	_	_
fused	_	_
model	_	_
.	_	_

#70
C.	_	_
Sparse	_	_
key	_	_
correspondences	_	_
and	_	_
camera	_	_
pose	_	_
estimation	_	_
With	_	_
regard	_	_
to	_	_
the	_	_
main	_	_
issue	_	_
in	_	_
our	_	_
previous	_	_
work	_	_
[	_	_
12	_	_
]	_	_
,	_	_
we	_	_
figure	_	_
out	_	_
the	_	_
inaccuracy	_	_
of	_	_
global	_	_
scope	_	_
pose	_	_
leads	_	_
to	_	_
instability	_	_
of	_	_
the	_	_
pipeline	_	_
.	_	_

#71
In	_	_
order	_	_
to	_	_
improve	_	_
the	_	_
robustness	_	_
of	_	_
the	_	_
system	_	_
,	_	_
we	_	_
make	_	_
full	_	_
use	_	_
of	_	_
idled	_	_
CPU	_	_
to	_	_
implement	_	_
robust	_	_
large	_	_
scale	_	_
SLAM	_	_
system	_	_
and	_	_
couple	_	_
CPU	_	_
and	_	_
GPU	_	_
strategically	_	_
.	_	_

#72
This	_	_
was	_	_
motivated	_	_
by	_	_
the	_	_
fact	_	_
that	_	_
several	_	_
successful	_	_
large	_	_
scale	_	_
SLAM	_	_
system	_	_
has	_	_
been	_	_
deliberately	_	_
developed	_	_
,	_	_
trained	_	_
and	_	_
tuned	_	_
for	_	_
enhancing	_	_
robustness	_	_
in	_	_
multi-levels	_	_
including	_	_
architectures	_	_
,	_	_
algorithms	_	_
,	_	_
thresholds	_	_
,	_	_
tricks	_	_
and	_	_
codes	_	_
.	_	_

#73
Importantly	_	_
,	_	_
due	_	_
to	_	_
computational	_	_
power	_	_
limit	_	_
and	_	_
bandwidth	_	_
,	_	_
efforts	_	_
should	deontic	_
be	_	_
devoted	_	_
to	_	_
exploring	_	_
how	_	_
to	_	_
make	_	_
full	_	_
use	_	_
of	_	_
this	_	_
integration	_	_
.	_	_

#74
ORB-SLAM	_	_
module	_	_
provides	_	_
the	_	_
ORB	_	_
features	_	_
which	_	_
are	_	_
fully	_	_
exploited	_	_
on	_	_
GPU	_	_
.	_	_

#75
This	_	_
strategy	_	_
save	_	_
computational	_	_
powers	_	_
on	_	_
GPU	_	_
:	_	_
(	_	_
1	_	_
)	_	_
Dense	_	_
Speeded	_	_
Up	_	_
Robust	_	_
Feature	_	_
(	_	_
SURF	_	_
)	_	_
extraction	_	_
and	_	_
match	_	_
step	_	_
in	_	_
our	_	_
original	_	_
approach	_	_
[	_	_
12	_	_
]	_	_
is	_	_
therefore	_	_
substituted	_	_
.	_	_

#76
(	_	_
2	_	_
)	_	_
Visual	_	_
Odometry	_	_
(	_	_
VO	_	_
)	_	_
based	_	_
global	_	_
pose	_	_
initialization	_	_
is	_	_
abandoned	_	_
.	_	_

#77
(	_	_
3	_	_
)	_	_
Random	_	_
sample	_	_
consensus	_	_
(	_	_
RANSAC	_	_
)	_	_
is	_	_
also	_	_
not	_	_
needed	_	_
anymore	_	_
.	_	_

#78
D.	_	_
Deformation	_	_
The	_	_
basic	_	_
idea	_	_
of	_	_
deformation	_	_
description	_	_
is	_	_
weighted	_	_
average	_	_
of	_	_
locally	_	_
rigid	_	_
rotation	_	_
and	_	_
transformation	_	_
defined	_	_
by	_	_
deformation	_	_
nodes	_	_
,	_	_
which	_	_
are	_	_
sparsely	_	_
and	_	_
evenly	_	_
scattered	_	_
in	_	_
space	_	_
.	_	_

#79
Each	_	_
node	_	_
j	_	_
comes	_	_
with	_	_
affine	_	_
matrix	_	_
A	_	_
j	_	_
∈	_	_
R3×3	_	_
and	_	_
a	_	_
translation	_	_
vector	_	_
in	_	_
t	_	_
j	_	_
∈	_	_
R3	_	_
.	_	_

#80
Each	_	_
source	_	_
point	_	_
is	_	_
transformed	_	_
to	_	_
its	_	_
target	_	_
position	_	_
by	_	_
several	_	_
nearest	_	_
embedded	_	_
deformation	_	_
(	_	_
ED	_	_
)	_	_
nodes	_	_
.	_	_

#81
ED	_	_
node	_	_
j	_	_
is	_	_
described	_	_
by	_	_
a	_	_
position	_	_
g	_	_
j	_	_
∈R3	_	_
,	_	_
a	_	_
corresponding	_	_
quasi	_	_
rotation	_	_
(	_	_
affine	_	_
)	_	_
matrix	_	_
and	_	_
a	_	_
translation	_	_
vector	_	_
.	_	_

#82
For	_	_
any	_	_
given	_	_
vertex	_	_
p	_	_
,	_	_
the	_	_
new	_	_
position	_	_
p̃	_	_
is	_	_
defined	_	_
by	_	_
the	_	_
ED	_	_
node	_	_
j	_	_
as	_	_
:	_	_
ṽi	_	_
=	_	_
Ri	_	_
k	_	_
∑	_	_
j=1	_	_
w	_	_
j	_	_
(	_	_
vi	_	_
)	_	_
[	_	_
A	_	_
j	_	_
(	_	_
vi−g	_	_
j	_	_
)	_	_
+g	_	_
j	_	_
+	_	_
t	_	_
j	_	_
]	_	_
+T	_	_
i	_	_
(	_	_
1	_	_
)	_	_
where	_	_
k	_	_
denotes	_	_
number	_	_
of	_	_
neighboring	_	_
node	_	_
.	_	_

#83
w	_	_
j	_	_
(	_	_
vi	_	_
)	_	_
is	_	_
quantified	_	_
weight	_	_
for	_	_
transforming	_	_
vi	_	_
exerted	_	_
by	_	_
each	_	_
related	_	_
ED	_	_
node	_	_
.	_	_

#84
Ri	_	_
and	_	_
T	_	_
i	_	_
denote	_	_
rigid	_	_
rotation	_	_
and	_	_
translation	_	_
.	_	_

#85
We	_	_
confine	_	_
the	_	_
number	_	_
of	_	_
nearest	_	_
nodes	_	_
by	_	_
defining	_	_
the	_	_
weight	_	_
in	_	_
Eq.	_	_
2	_	_
.	_	_

#86
Deformation	_	_
of	_	_
each	_	_
point	_	_
in	_	_
the	_	_
space	_	_
is	_	_
limited	_	_
locally	_	_
by	_	_
setting	_	_
the	_	_
weight	_	_
as	_	_
:	_	_
w	_	_
j	_	_
(	_	_
vi	_	_
)	_	_
=	_	_
(	_	_
1−||vi−g	_	_
j	_	_
||/dmax	_	_
)	_	_
(	_	_
2	_	_
)	_	_
where	_	_
dmax	_	_
is	_	_
the	_	_
maximum	_	_
distance	_	_
of	_	_
the	_	_
vertex	_	_
to	_	_
k+1	_	_
nearest	_	_
ED	_	_
node	_	_
.	_	_

#87
E.	_	_
Energy	_	_
function	_	_
The	_	_
objective	_	_
function	_	_
formulated	_	_
is	_	_
composed	_	_
of	_	_
six	_	_
terms	_	_
:	_	_
Rotation	_	_
constraint	_	_
,	_	_
Regularization	_	_
,	_	_
the	_	_
point-to-plane	_	_
distances	_	_
between	_	_
the	_	_
visible	_	_
points	_	_
and	_	_
the	_	_
target	_	_
scan	_	_
,	_	_
sparse	_	_
key	_	_
points	_	_
correspondence	_	_
and	_	_
global	_	_
pose	_	_
as	_	_
:	_	_
argmin	_	_
Ri	_	_
,	_	_
T	_	_
i	_	_
,	_	_
A1	_	_
,	_	_
t1	_	_
...	_	_
Am	_	_
,	_	_
tm	_	_
wrotErot	_	_
+wregEreg	_	_
+wdataEdata	_	_
+wcorrEcorr	_	_
+wrEr	_	_
+wpEp	_	_
(	_	_
3	_	_
)	_	_
where	_	_
m	_	_
is	_	_
the	_	_
number	_	_
of	_	_
ED	_	_
nodes	_	_
.	_	_

#88
To	_	_
prevent	_	_
the	_	_
optimization	_	_
converging	_	_
to	_	_
an	_	_
unreasonable	_	_
deformation	_	_
,	_	_
we	_	_
follow	_	_
the	_	_
method	_	_
proposed	_	_
in	_	_
[	_	_
19	_	_
]	_	_
which	_	_
constrains	_	_
the	_	_
model	_	_
with	_	_
Rotation	_	_
and	_	_
Regularization	_	_
.	_	_

#89
Rotation	_	_
.	_	_

#90
Erot	_	_
sums	_	_
the	_	_
rotation	_	_
error	_	_
of	_	_
all	_	_
the	_	_
matrix	_	_
in	_	_
the	_	_
following	_	_
form	_	_
:	_	_
Erot	_	_
=	_	_
m	_	_
∑	_	_
j=1	_	_
Rot	_	_
(	_	_
A	_	_
j	_	_
)	_	_
(	_	_
4	_	_
)	_	_
Rot	_	_
(	_	_
A	_	_
)	_	_
=	_	_
(	_	_
c1	_	_
·	_	_
c2	_	_
)	_	_
2	_	_
+	_	_
(	_	_
c1	_	_
·	_	_
c3	_	_
)	_	_
2	_	_
+	_	_
(	_	_
c2	_	_
·	_	_
c3	_	_
)	_	_
2+	_	_
(	_	_
c1	_	_
·	_	_
c1−1	_	_
)	_	_
2	_	_
+	_	_
(	_	_
c2	_	_
·	_	_
c2−1	_	_
)	_	_
2	_	_
+	_	_
(	_	_
c3	_	_
·	_	_
c3−1	_	_
)	_	_
2	_	_
(	_	_
5	_	_
)	_	_
where	_	_
c1	_	_
,	_	_
c2	_	_
and	_	_
c3	_	_
are	_	_
the	_	_
column	_	_
vectors	_	_
of	_	_
the	_	_
matrix	_	_
A.	_	_
Regularization	_	_
.	_	_

#91
This	_	_
term	_	_
is	_	_
to	_	_
prevent	_	_
divergence	_	_
of	_	_
the	_	_
neighboring	_	_
nodes	_	_
exerts	_	_
on	_	_
the	_	_
overlapping	_	_
space	_	_
.	_	_

#92
For	_	_
details	_	_
,	_	_
please	_	_
refer	_	_
to	_	_
[	_	_
12	_	_
]	_	_
.	_	_

#93
Ereg	_	_
=	_	_
m	_	_
∑	_	_
j=1	_	_
∑	_	_
k∈N	_	_
(	_	_
j	_	_
)	_	_
α	_	_
jk||A	_	_
j	_	_
(	_	_
gk−g	_	_
j	_	_
)	_	_
+g	_	_
j	_	_
+t	_	_
j−	_	_
(	_	_
gk	_	_
+t	_	_
k	_	_
)	_	_
||2	_	_
(	_	_
6	_	_
)	_	_
where	_	_
α	_	_
jk	_	_
is	_	_
the	_	_
weight	_	_
calculated	_	_
by	_	_
the	_	_
Euclidean	_	_
distance	_	_
of	_	_
the	_	_
two	_	_
ED	_	_
nodes	_	_
.	_	_

#94
We	_	_
follow	_	_
[	_	_
19	_	_
]	_	_
by	_	_
uniformly	_	_
setting	_	_
α	_	_
jk	_	_
to	_	_
1	_	_
.	_	_

#95
N	_	_
(	_	_
j	_	_
)	_	_
is	_	_
the	_	_
set	_	_
of	_	_
all	_	_
neighboring	_	_
nodes	_	_
to	_	_
the	_	_
node	_	_
j	_	_
.	_	_

#96
Data	_	_
Term	_	_
.	_	_

#97
We	_	_
follow	_	_
Algorithm	_	_
1	_	_
to	_	_
find	_	_
registrations	_	_
of	_	_
model	_	_
points	_	_
and	_	_
calculate	_	_
point	_	_
to	_	_
plane	_	_
distance	_	_
of	_	_
all	_	_
the	_	_
registered	_	_
points	_	_
.	_	_

#98
Thresholds	_	_
are	_	_
used	_	_
to	_	_
extract	_	_
visible	_	_
points	_	_
vi	_	_
(	_	_
i	_	_
∈	_	_
{	_	_
1	_	_
,	_	_
...	_	_
,	_	_
N	_	_
}	_	_
)	_	_
.	_	_

#99
||vi−Γ	_	_
(	_	_
P	_	_
(	_	_
vi	_	_
)	_	_
)	_	_
||	_	_
<	_	_
εd	_	_
,	_	_
n	_	_
(	_	_
vi	_	_
)	_	_
·n	_	_
(	_	_
P	_	_
(	_	_
vi	_	_
)	_	_
)	_	_
<	_	_
εn	_	_
(	_	_
7	_	_
)	_	_
where	_	_
εd	_	_
and	_	_
εn	_	_
are	_	_
thresholds	_	_
.	_	_

#100
We	_	_
adopt	_	_
back-projection	_	_
approach	_	_
as	_	_
a	_	_
model-to-scan	_	_
registration	_	_
strategy	_	_
that	_	_
penalizes	_	_
misalignment	_	_
of	_	_
the	_	_
predicted	_	_
visible	_	_
points	_	_
vi	_	_
(	_	_
i∈	_	_
{	_	_
1	_	_
,	_	_
...	_	_
,	_	_
N	_	_
}	_	_
)	_	_
and	_	_
current	_	_
depth	_	_
scan	_	_
D.	_	_
Data	_	_
Term	_	_
is	_	_
sum	_	_
of	_	_
point-to-plane	_	_
errors	_	_
in	_	_
the	_	_
form	_	_
of	_	_
:	_	_
Edata	_	_
=	_	_
N	_	_
∑	_	_
i=1	_	_
(	_	_
n	_	_
(	_	_
P	_	_
(	_	_
ṽi	_	_
)	_	_
)	_	_
T	_	_
(	_	_
ṽi−Γ	_	_
(	_	_
P	_	_
(	_	_
ṽi	_	_
)	_	_
)	_	_
)	_	_
2	_	_
(	_	_
8	_	_
)	_	_
where	_	_
Γ	_	_
(	_	_
v	_	_
)	_	_
=	_	_
Π	_	_
(	_	_
P	_	_
(	_	_
v	_	_
)	_	_
)	_	_
and	_	_
ñ	_	_
(	_	_
u	_	_
)	_	_
is	_	_
the	_	_
corresponding	_	_
normal	_	_
to	_	_
the	_	_
pixel	_	_
u	_	_
in	_	_
the	_	_
depth	_	_
D	_	_
(	_	_
u	_	_
)	_	_
.	_	_

#101
ṽi	_	_
is	_	_
the	_	_
transformed	_	_
position	_	_
of	_	_
point	_	_
vi	_	_
.	_	_

#102
P	_	_
(	_	_
v	_	_
)	_	_
is	_	_
the	_	_
projective	_	_
(	_	_
R3	_	_
→	_	_
R2	_	_
)	_	_
function	_	_
for	_	_
projecting	_	_
visible	_	_
points	_	_
to	_	_
depth	_	_
image	_	_
.	_	_

#103
Π	_	_
(	_	_
u	_	_
)	_	_
is	_	_
the	_	_
back-projection	_	_
function	_	_
for	_	_
lifting	_	_
the	_	_
corresponding	_	_
pixel	_	_
P	_	_
(	_	_
v	_	_
)	_	_
back	_	_
into	_	_
3D	_	_
space	_	_
(	_	_
R2→	_	_
R3	_	_
)	_	_
.	_	_

#104
As	_	_
described	_	_
in	_	_
[	_	_
16	_	_
]	_	_
,	_	_
back-projection	_	_
and	_	_
point-to-plane	_	_
strategies	_	_
make	_	_
full	_	_
use	_	_
of	_	_
the	_	_
input	_	_
depth	_	_
image	_	_
so	_	_
that	_	_
the	_	_
Jacobians	_	_
can	_	_
be	_	_
calculated	_	_
in	_	_
2D	_	_
which	_	_
leads	_	_
to	_	_
fast	_	_
convergence	_	_
and	_	_
robustness	_	_
to	_	_
outliers	_	_
.	_	_

#105
Correspondence	_	_
.	_	_

#106
It	_	_
is	_	_
measured	_	_
by	_	_
the	_	_
Euclidean	_	_
distance	_	_
between	_	_
pair-wise	_	_
sparse	_	_
key	_	_
points	_	_
generated	_	_
from	_	_
dense	_	_
SURF	_	_
described	_	_
in	_	_
Section	_	_
II-C	_	_
in	_	_
the	_	_
following	_	_
form	_	_
:	_	_
Ecorr	_	_
=	_	_
||Ṽ	_	_
i−V	_	_
i||	_	_
(	_	_
9	_	_
)	_	_
where	_	_
Ṽ	_	_
i	_	_
and	_	_
V	_	_
i	_	_
are	_	_
the	_	_
new	_	_
and	_	_
old	_	_
position	_	_
of	_	_
ORB	_	_
features	_	_
.	_	_

#107
Global	_	_
Pose	_	_
.	_	_

#108
It	_	_
is	_	_
measured	_	_
by	_	_
the	_	_
variations	_	_
of	_	_
rotation	_	_
and	_	_
transformation	_	_
.	_	_

#109
The	_	_
global	_	_
pose	_	_
is	_	_
defined	_	_
by	_	_
pose	_	_
relative	_	_
to	_	_
the	_	_
first	_	_
frame	_	_
.	_	_

#110
We	_	_
use	_	_
Euclidean	_	_
distance	_	_
and	_	_
Euler	_	_
angles	_	_
to	_	_
define	_	_
the	_	_
variation	_	_
between	_	_
optimized	_	_
global	_	_
pose	_	_
and	_	_
original	_	_
global	_	_
pose	_	_
generated	_	_
by	_	_
ORB-SLAM	_	_
.	_	_

#111
It	_	_
is	_	_
presented	_	_
in	_	_
the	_	_
following	_	_
form	_	_
:	_	_
Er	_	_
=	_	_
||R̃i−Ri||	_	_
Ep	_	_
=	_	_
||P̃i−Pi||	_	_
(	_	_
10	_	_
)	_	_
where	_	_
R̃i	_	_
and	_	_
Ri	_	_
are	_	_
the	_	_
new	_	_
and	_	_
old	_	_
orientation	_	_
of	_	_
the	_	_
scope	_	_
;	_	_
P̃i	_	_
and	_	_
Pi	_	_
are	_	_
the	_	_
new	_	_
and	_	_
old	_	_
position	_	_
of	_	_
the	_	_
scope	_	_
.	_	_

#112
F.	_	_
Optimization	_	_
We	_	_
follow	_	_
our	_	_
previous	_	_
optimization	_	_
step	_	_
using	_	_
Levenberg-Marquardt	_	_
(	_	_
LM	_	_
)	_	_
to	_	_
solve	_	_
the	_	_
nonlinear	_	_
optimization	_	_
problem	_	_
.	_	_

#113
The	_	_
efficiency	_	_
is	_	_
almost	_	_
the	_	_
same	_	_
as	_	_
only	_	_
6	_	_
more	_	_
variables	_	_
(	_	_
Global	_	_
orientation	_	_
and	_	_
translation	_	_
)	_	_
are	_	_
added	_	_
.	_	_

#114
G.	_	_
Model	_	_
update	_	_
with	_	_
new	_	_
observation	_	_
For	_	_
each	_	_
point	_	_
(	_	_
vi	_	_
,	_	_
ω	_	_
(	_	_
vi	_	_
)	_	_
,	_	_
C	_	_
i	_	_
,	_	_
t	_	_
i	_	_
,	_	_
Si	_	_
)	_	_
in	_	_
one	_	_
fusion	_	_
step	_	_
,	_	_
all	_	_
the	_	_
properties	_	_
of	_	_
each	_	_
point	_	_
is	_	_
updated	_	_
.	_	_

#115
Moreover	_	_
,	_	_
inspired	_	_
by	_	_
this	_	_
approach	_	_
[	_	_
20	_	_
]	_	_
,	_	_
we	_	_
modify	_	_
map	_	_
management	_	_
module	_	_
by	_	_
adding	_	_
a	_	_
time	_	_
stamp	_	_
property	_	_
and	_	_
introduce	_	_
stability	_	_
control	_	_
.	_	_

#116
The	_	_
general	_	_
algorithm	_	_
is	_	_
described	_	_
in	_	_
Algorithm	_	_
2	_	_
.	_	_

#117
After	_	_
estimating	_	_
the	_	_
optimum	_	_
warping	_	_
field	_	_
,	_	_
we	_	_
transform	_	_
all	_	_
the	_	_
points	_	_
to	_	_
their	_	_
best	_	_
positions	_	_
and	_	_
predict	_	_
visible	_	_
points	_	_
again	_	_
(	_	_
Algorithm	_	_
1	_	_
)	_	_
.	_	_

#118
For	_	_
each	_	_
updated	_	_
point	_	_
,	_	_
truncated	_	_
signed	_	_
distance	_	_
weight	_	_
(	_	_
TSDW	_	_
)	_	_
is	_	_
assigned	_	_
to	_	_
each	_	_
pixel	_	_
of	_	_
new	_	_
depth	_	_
:	_	_
ω	_	_
(	_	_
pn	_	_
)	_	_
=	_	_
{	_	_
dmin	_	_
(	_	_
pn	_	_
)	_	_
/	_	_
(	_	_
0.5∗	_	_
ε	_	_
)	_	_
if	_	_
abs	_	_
(	_	_
p̃i|z−D	_	_
(	_	_
P	_	_
(	_	_
pn	_	_
)	_	_
)	_	_
)	_	_
<	_	_
τ	_	_
0	_	_
otherwise	_	_
(	_	_
11	_	_
)	_	_
where	_	_
dmin	_	_
(	_	_
p	_	_
)	_	_
is	_	_
the	_	_
minimum	_	_
distance	_	_
of	_	_
point	_	_
p	_	_
to	_	_
its	_	_
corresponding	_	_
nodes	_	_
and	_	_
τ	_	_
is	_	_
the	_	_
grid	_	_
size	_	_
of	_	_
nodes	_	_
.	_	_

#119
We	_	_
discard	_	_
the	_	_
z	_	_
directional	_	_
difference	_	_
if	_	_
it	_	_
is	_	_
too	_	_
large	_	_
as	_	_
this	_	_
is	_	_
probably	_	_
due	_	_
to	_	_
inaccurate	_	_
warp	_	_
field	_	_
estimation	_	_
.	_	_

#120
Algorithm	_	_
1	_	_
:	_	_
Point	_	_
to	_	_
depth	_	_
registration	_	_
Input	_	_
:	_	_
Point	_	_
cloud	_	_
state	_	_
in	_	_
last	_	_
frame	_	_
pn−1	_	_
;	_	_
Depth	_	_
map	_	_
in	_	_
current	_	_
state	_	_
Dn+1	_	_
Output	_	_
:	_	_
Point	_	_
cloud	_	_
state	_	_
in	_	_
current	_	_
state	_	_
pn	_	_
while	_	_
loop	_	_
over	_	_
each	_	_
pixel	_	_
within	_	_
Reg	_	_
do	_	_
if	_	_
D	_	_
(	_	_
P	_	_
(	_	_
p̃i	_	_
)	_	_
)	_	_
isnotempty	_	_
then	_	_
if	_	_
(	_	_
1.abs	_	_
(	_	_
ṽi|z−D	_	_
(	_	_
P	_	_
(	_	_
pn	_	_
)	_	_
)	_	_
)	_	_
<	_	_
τ	_	_
2.angle	_	_
(	_	_
ñ−N	_	_
(	_	_
N	_	_
(	_	_
nn	_	_
)	_	_
)	_	_
)	_	_
<	_	_
δ	_	_
)	_	_
then	_	_
Find	_	_
registration	_	_
end	_	_
end	_	_
end	_	_
We	_	_
fuse	_	_
current	_	_
depth	_	_
generated	_	_
from	_	_
model	_	_
with	_	_
new	_	_
depth	_	_
by	_	_
:	_	_
Dn+1	_	_
(	_	_
P	_	_
(	_	_
pn	_	_
)	_	_
)	_	_
=	_	_
ṽi|zω	_	_
(	_	_
pn−1	_	_
)	_	_
+Dn	_	_
(	_	_
P	_	_
(	_	_
pn	_	_
)	_	_
)	_	_
ω	_	_
(	_	_
pn−1	_	_
)	_	_
+1	_	_
(	_	_
12	_	_
)	_	_
Cn+1	_	_
(	_	_
P	_	_
(	_	_
pn	_	_
)	_	_
)	_	_
=	_	_
C̃	_	_
iω	_	_
(	_	_
pn−1	_	_
)	_	_
+Cn	_	_
(	_	_
P	_	_
(	_	_
pn	_	_
)	_	_
)	_	_
ω	_	_
(	_	_
pn−1	_	_
)	_	_
+1	_	_
(	_	_
13	_	_
)	_	_
Nn+1	_	_
(	_	_
N	_	_
(	_	_
nn	_	_
)	_	_
)	_	_
=	_	_
ñiω	_	_
(	_	_
pn−1	_	_
)	_	_
+Nn	_	_
(	_	_
N	_	_
(	_	_
nn	_	_
)	_	_
)	_	_
ω	_	_
(	_	_
pn−1	_	_
)	_	_
+1	_	_
(	_	_
14	_	_
)	_	_
ω	_	_
(	_	_
pn	_	_
)	_	_
=	_	_
min	_	_
(	_	_
ω	_	_
(	_	_
pn−1	_	_
)	_	_
+1	_	_
,	_	_
ωmax	_	_
)	_	_
(	_	_
15	_	_
)	_	_
where	_	_
ṽi|z	_	_
is	_	_
the	_	_
value	_	_
of	_	_
point	_	_
vi	_	_
on	_	_
the	_	_
z	_	_
direction	_	_
and	_	_
p	_	_
is	_	_
the	_	_
projected	_	_
pixel	_	_
P	_	_
(	_	_
ṽi	_	_
)	_	_
of	_	_
the	_	_
transformed	_	_
points	_	_
vi	_	_
.	_	_

#121
Dn+1	_	_
,	_	_
Cn+1	_	_
and	_	_
Nn+1	_	_
are	_	_
depth	_	_
map	_	_
,	_	_
color	_	_
map	_	_
and	_	_
normal	_	_
maps	_	_
respectively	_	_
.	_	_

#122
Different	_	_
from	_	_
rigid	_	_
transformation	_	_
where	_	_
uncertainty	_	_
of	_	_
all	_	_
the	_	_
points	_	_
in	_	_
3D	_	_
space	_	_
are	_	_
considered	_	_
as	_	_
Algorithm	_	_
2	_	_
:	_	_
Point	_	_
cloud	_	_
based	_	_
fusion	_	_
with	_	_
depth	_	_
images	_	_
in	_	_
MIS-SLAM	_	_
Input	_	_
:	_	_
Point	_	_
cloud	_	_
state	_	_
in	_	_
last	_	_
frame	_	_
pn−1	_	_
;	_	_
Depth	_	_
map	_	_
in	_	_
current	_	_
state	_	_
Dn+1	_	_
Output	_	_
:	_	_
Point	_	_
cloud	_	_
state	_	_
in	_	_
current	_	_
state	_	_
pn	_	_
Step	_	_
1	_	_
:	_	_
Register	_	_
point	_	_
cloud	_	_
with	_	_
current	_	_
depth	_	_
.	_	_

#123
Fuse	_	_
each	_	_
point	_	_
with	_	_
depth	_	_
and	_	_
lift	_	_
unregistered	_	_
depth	_	_
back	_	_
into	_	_
space	_	_
.	_	_

#124
Step	_	_
2	_	_
:	_	_
for	_	_
i=1	_	_
;	_	_
i	_	_
<	_	_
Number	_	_
of	_	_
point	_	_
cloud	_	_
;	_	_
i++	_	_
do	_	_
Deform	_	_
pn−1	_	_
according	_	_
to	_	_
estimated	_	_
warping	_	_
field	_	_
Project	_	_
deformed	_	_
point	_	_
cloud	_	_
to	_	_
depth	_	_
map	_	_
to	_	_
build	_	_
a	_	_
point	_	_
to	_	_
pixel	_	_
registration	_	_
map	_	_
Reg	_	_
.	_	_

#125
end	_	_
Step	_	_
3	_	_
:	_	_
Implement	_	_
Algorithm	_	_
1	_	_
while	_	_
loop	_	_
over	_	_
each	_	_
pixel	_	_
within	_	_
Reg	_	_
do	_	_
if	_	_
Pixel	_	_
is	_	_
registrated	_	_
then	_	_
Fuse	_	_
points	_	_
following	_	_
formulation	_	_
12	_	_
,	_	_
13	_	_
,	_	_
14	_	_
and	_	_
15	_	_
.	_	_

#126
Organize	_	_
points	_	_
to	_	_
Group1	_	_
else	_	_
Lift	_	_
new	_	_
pixel	_	_
into	_	_
3D	_	_
space	_	_
Organize	_	_
points	_	_
to	_	_
Group	_	_
2	_	_
end	_	_
end	_	_
Step	_	_
4	_	_
:	_	_
while	_	_
loop	_	_
over	_	_
each	_	_
point	_	_
pk	_	_
in	_	_
Group1	_	_
do	_	_
if	_	_
1.pktime	_	_
<	_	_
τtime	_	_
2.pkweight	_	_
<	_	_
τweight	_	_
then	_	_
Delete	_	_
pk	_	_
end	_	_
end	_	_
Step	_	_
5	_	_
:	_	_
Merge	_	_
Group	_	_
1	_	_
and	_	_
Group	_	_
2	_	_
to	_	_
new	_	_
group	_	_
.	_	_

#127
Regenerate	_	_
node	_	_
and	_	_
corresponding	_	_
rotation	_	_
and	_	_
translation	_	_
.	_	_

#128
Algorithm	_	_
3	_	_
:	_	_
Removing	_	_
unwanted	_	_
,	_	_
noisy	_	_
or	_	_
redundant	_	_
point	_	_
cloud	_	_
Input	_	_
:	_	_
Point	_	_
cloud	_	_
state	_	_
in	_	_
last	_	_
frame	_	_
pn−1	_	_
;	_	_
Depth	_	_
map	_	_
in	_	_
current	_	_
state	_	_
Dn+1	_	_
Output	_	_
:	_	_
Point	_	_
cloud	_	_
state	_	_
in	_	_
current	_	_
state	_	_
pn	_	_
Down	_	_
sample	_	_
point	_	_
cloud	_	_
according	_	_
to	_	_
grid	_	_
size	_	_
.	_	_

#129
while	_	_
loop	_	_
over	_	_
each	_	_
point	_	_
pk	_	_
in	_	_
Group1	_	_
do	_	_
if	_	_
tk	_	_
<	_	_
τtime	_	_
and	_	_
ωk	_	_
<	_	_
τweight	_	_
then	_	_
Delete	_	_
pk	_	_
else	_	_
Stamp	_	_
pk	_	_
:	_	_
tk	_	_
=	_	_
current	_	_
frame	_	_
index	_	_
end	_	_
end	_	_
equal	_	_
,	_	_
in	_	_
the	_	_
case	_	_
of	_	_
non-rigid	_	_
fusion	_	_
,	_	_
if	_	_
a	_	_
point	_	_
is	_	_
further	_	_
away	_	_
to	_	_
the	_	_
nodes	_	_
of	_	_
warping	_	_
field	_	_
,	_	_
we	_	_
are	_	_
less	_	_
likely	_	_
to	_	_
believe	_	_
the	_	_
registered	_	_
depth	_	_
[	_	_
14	_	_
]	_	_
.	_	_

#130
Therefore	_	_
,	_	_
we	_	_
practically	_	_
measure	_	_
this	_	_
certainty	_	_
by	_	_
using	_	_
the	_	_
minimum	_	_
distance	_	_
from	_	_
point	_	_
to	_	_
nodes	_	_
and	_	_
regularize	_	_
it	_	_
with	_	_
half	_	_
of	_	_
the	_	_
unified	_	_
node	_	_
distance	_	_
.	_	_

#131
The	_	_
upper	_	_
bound	_	_
of	_	_
weight	_	_
is	_	_
set	_	_
to	_	_
10	_	_
.	_	_

#132
Algorithm	_	_
2	_	_
and	_	_
Eq.	_	_
(	_	_
12	_	_
)	_	_
(	_	_
13	_	_
)	_	_
(	_	_
14	_	_
)	_	_
(	_	_
15	_	_
)	_	_
show	_	_
the	_	_
details	_	_
for	_	_
point	_	_
fusion	_	_
.	_	_

#133
In	_	_
order	_	_
to	_	_
filter	_	_
noises	_	_
,	_	_
we	_	_
apply	_	_
the	_	_
property	_	_
‘stability	_	_
Si’	_	_
to	_	_
describe	_	_
each	_	_
point	_	_
.	_	_

#134
Unstable	_	_
points	_	_
which	_	_
appear	_	_
in	_	_
few	_	_
frames	_	_
and	_	_
are	_	_
not	_	_
visible	_	_
in	_	_
recent	_	_
frame	_	_
are	_	_
abandoned	_	_
.	_	_

#135
Algorithm	_	_
3	_	_
shows	_	_
the	_	_
strategy	_	_
of	_	_
point	_	_
filtering	_	_
.	_	_

#136
Our	_	_
weighted	_	_
points	_	_
based	_	_
method	_	_
offers	_	_
numbers	_	_
of	_	_
benefits	_	_
:	_	_
(	_	_
1	_	_
)	_	_
Points	_	_
based	_	_
data	_	_
management	_	_
is	_	_
free	_	_
of	_	_
extent	_	_
limitation	_	_
in	_	_
traditional	_	_
TSDF	_	_
based	_	_
approach	_	_
.	_	_

#137
With	_	_
our	_	_
fusion	_	_
based	_	_
Algorithm	_	_
3	_	_
,	_	_
fused	_	_
geometry	_	_
can	_	_
still	_	_
keep	_	_
its	_	_
shape	_	_
smooth	_	_
.	_	_

#138
(	_	_
2	_	_
)	_	_
All	_	_
the	_	_
components	_	_
in	_	_
MIS-SLAM	_	_
,	_	_
i.e.	_	_
visible	_	_
points	_	_
prediction	_	_
,	_	_
warping	_	_
field	_	_
estimation	_	_
and	_	_
model	_	_
update	_	_
are	_	_
unified	_	_
in	_	_
points	_	_
.	_	_

#139
Process	_	_
like	_	_
conversion	_	_
between	_	_
volume	_	_
and	_	_
mesh	_	_
are	_	_
not	_	_
necessary	_	_
anymore	_	_
.	_	_

#140
III	_	_
.	_	_

#141
RESULTS	_	_
AND	_	_
DISCUSSION	_	_
We	_	_
validate	_	_
MIS-SLAM	_	_
with	_	_
publicly	_	_
available	_	_
in-vivo	_	_
stereo	_	_
video	_	_
datasets	_	_
provided	_	_
by	_	_
the	_	_
Hamlyn	_	_
Centre	_	_
for	_	_
Robotic	_	_
Surgery	_	_
[	_	_
21	_	_
]	_	_
.	_	_

#142
Three	_	_
videos	_	_
with	_	_
deformation	_	_
and	_	_
rigid	_	_
scope	_	_
movement	_	_
are	_	_
utilized	_	_
.	_	_

#143
Other	_	_
videos	_	_
either	_	_
have	_	_
no	_	_
deformation	_	_
or	_	_
scope	_	_
motion	_	_
.	_	_

#144
Please	_	_
note	_	_
that	_	_
no	_	_
extra	_	_
sensing	_	_
data	_	_
other	_	_
than	_	_
stereo	_	_
videos	_	_
from	_	_
the	_	_
scope	_	_
is	_	_
used	_	_
in	_	_
the	_	_
validation	_	_
.	_	_

#145
The	_	_
frame	_	_
rate	_	_
and	_	_
size	_	_
of	_	_
in-vivo	_	_
porcine	_	_
dataset	_	_
(	_	_
model	_	_
2	_	_
in	_	_
Fig.	_	_
3	_	_
)	_	_
is	_	_
30	_	_
frame	_	_
per	_	_
second	_	_
and	_	_
640×480	_	_
while	_	_
the	_	_
other	_	_
dataset	_	_
is	_	_
25	_	_
frame	_	_
per	_	_
second	_	_
and	_	_
720×288	_	_
.	_	_

#146
Distance	_	_
from	_	_
camera	_	_
to	_	_
surface	_	_
of	_	_
soft-tissue	_	_
is	_	_
between	_	_
40	_	_
to	_	_
70	_	_
mm	_	_
.	_	_

#147
In	_	_
our	_	_
previous	_	_
research	_	_
[	_	_
12	_	_
]	_	_
,	_	_
due	_	_
to	_	_
poor	_	_
quality	_	_
of	_	_
obtained	_	_
images	_	_
and	_	_
some	_	_
extremely	_	_
fast	_	_
movement	_	_
of	_	_
the	_	_
camera	_	_
,	_	_
videos	_	_
tested	_	_
on	_	_
porcine	_	_
with	_	_
fast	_	_
or	_	_
abrupt	_	_
motion	_	_
can	_	_
not	_	_
generate	_	_
good	_	_
results	_	_
.	_	_

#148
In	_	_
this	_	_
paper	_	_
,	_	_
however	_	_
,	_	_
MIS-SLAM	_	_
can	_	_
process	_	_
large	_	_
scale	_	_
with	_	_
much	_	_
better	_	_
robustness	_	_
.	_	_

#149
Deformations	_	_
are	_	_
caused	_	_
by	_	_
respiration	_	_
and	_	_
tissue-tool	_	_
interactions	_	_
.	_	_

#150
A.	_	_
Robustness	_	_
enhancement	_	_
The	_	_
robustness	_	_
of	_	_
MIS-SLAM	_	_
is	_	_
significantly	_	_
improved	_	_
when	_	_
global	_	_
pose	_	_
from	_	_
ORB-SLAM	_	_
is	_	_
uploaded	_	_
to	_	_
GPU	_	_
and	_	_
employed	_	_
to	_	_
be	_	_
an	_	_
initial	_	_
pose	_	_
of	_	_
the	_	_
scope	_	_
.	_	_

#151
To	_	_
demonstrate	_	_
the	_	_
effectiveness	_	_
of	_	_
this	_	_
strategy	_	_
,	_	_
we	_	_
do	_	_
experiments	_	_
by	_	_
activating	_	_
and	_	_
deactivating	_	_
this	_	_
strategy	_	_
.	_	_

#152
Fig.	_	_
4	_	_
shows	_	_
the	_	_
comparisons	_	_
of	_	_
no	_	_
global	_	_
pose	_	_
initialization	_	_
,	_	_
conventional	_	_
visual	_	_
odometry	_	_
and	_	_
initialization	_	_
with	_	_
ORB-SLAM	_	_
pose	_	_
.	_	_

#153
Due	_	_
to	_	_
no	_	_
ground	_	_
truth	_	_
is	_	_
available	_	_
,	_	_
we	_	_
compare	_	_
the	_	_
distance	_	_
between	_	_
No	_	_
initialization	_	_
,	_	_
initialized	_	_
with	_	_
VO	_	_
and	_	_
ORB-SLAM	_	_
as	_	_
ORB-SLAM	_	_
does	_	_
not	_	_
fail	_	_
on	_	_
tracking	_	_
.	_	_

#154
Graph	_	_
results	_	_
demonstrate	_	_
that	_	_
both	_	_
strategies	_	_
lost	_	_
track	_	_
when	_	_
camera	_	_
moves	_	_
fast	_	_
(	_	_
errors	_	_
increase	_	_
abruptly	_	_
)	_	_
.	_	_

#155
This	_	_
indicates	_	_
that	_	_
ORB-SLAM	_	_
does	_	_
play	_	_
an	_	_
important	_	_
role	_	_
in	_	_
deforming	_	_
scenarios	_	_
like	_	_
computer	_	_
assisted	_	_
intervention	_	_
when	_	_
scope	_	_
moves	_	_
fast	_	_
.	_	_

#156
Both	_	_
paper	_	_
and	_	_
open	_	_
source	_	_
code	_	_
from	_	_
ORB-SLAM	_	_
implies	_	_
that	_	_
author	_	_
devote	_	_
large	_	_
efforts	_	_
on	_	_
enhancing	_	_
localization	_	_
robustness	_	_
.	_	_

#157
VO	_	_
is	_	_
inferior	_	_
to	_	_
ORB-SLAM	_	_
.	_	_

#158
One	_	_
challenge	_	_
facing	_	_
reconstruction	_	_
problem	_	_
using	_	_
stereoscope	_	_
is	_	_
the	_	_
fast	_	_
movement	_	_
of	_	_
scope	_	_
[	_	_
12	_	_
]	_	_
.	_	_

#159
Configuration	_	_
without	_	_
global	_	_
pose	_	_
initialization	_	_
fails	_	_
to	_	_
track	_	_
motion	_	_
when	_	_
camera	_	_
moves	_	_
fast	_	_
.	_	_

#160
Like	_	_
traditional	_	_
SLAM	_	_
approaches	_	_
,	_	_
severe	_	_
consequences	_	_
of	_	_
fast	_	_
motion	_	_
are	_	_
the	_	_
blurry	_	_
images	_	_
and	_	_
relevant	_	_
disorder	_	_
of	_	_
depths	_	_
.	_	_

#161
These	_	_
phenomena	_	_
happen	_	_
especially	_	_
when	_	_
current	_	_
constructed	_	_
model	_	_
deforms	_	_
to	_	_
match	_	_
the	_	_
depth	_	_
with	_	_
false	_	_
edges	_	_
suffering	_	_
from	_	_
image	_	_
blurring	_	_
.	_	_

#162
Fast	_	_
motion	_	_
is	_	_
a	_	_
very	_	_
challenging	_	_
issue	_	_
because	_	_
the	_	_
only	_	_
data	_	_
source	_	_
is	_	_
the	_	_
blurry	_	_
images	_	_
.	_	_

#163
ORB-SLAM	_	_
,	_	_
however	_	_
,	_	_
is	_	_
a	_	_
feature	_	_
based	_	_
method	_	_
with	_	_
deliberately	_	_
designed	_	_
components	_	_
within	_	_
architectures	_	_
,	_	_
algorithms	_	_
,	_	_
thresholds	_	_
,	_	_
tricks	_	_
and	_	_
codes	_	_
ensuring	_	_
robustness	_	_
of	_	_
the	_	_
system	_	_
.	_	_

#164
Our	_	_
supplementary	_	_
videos	_	_
clearly	_	_
show	_	_
how	_	_
initialization	_	_
of	_	_
global	_	_
pose	_	_
prevents	_	_
the	_	_
system	_	_
from	_	_
failing	_	_
to	_	_
track	_	_
camera	_	_
pose	_	_
.	_	_

#165
B.	_	_
Deforming	_	_
the	_	_
model	_	_
and	_	_
fusing	_	_
new	_	_
depth	_	_
For	_	_
the	_	_
6th	_	_
dataset	_	_
,	_	_
the	_	_
point	_	_
cloud	_	_
density	_	_
is	_	_
set	_	_
to	_	_
0.2mm	_	_
and	_	_
node	_	_
density	_	_
is	_	_
set	_	_
to	_	_
4mm	_	_
.	_	_

#166
For	_	_
the	_	_
20/21th	_	_
dataset	_	_
,	_	_
the	_	_
point	_	_
cloud	_	_
density	_	_
is	_	_
set	_	_
to	_	_
1mm	_	_
and	_	_
node	_	_
density	_	_
is	_	_
set	_	_
to	_	_
10mm	_	_
.	_	_

#167
Point	_	_
cloud	_	_
downsampling	_	_
process	_	_
is	_	_
carried	_	_
out	_	_
by	_	_
setting	_	_
a	_	_
fixed	_	_
box	_	_
to	_	_
average	_	_
points	_	_
fill	_	_
inside	_	_
each	_	_
3D	_	_
box	_	_
.	_	_

#168
The	_	_
weights	_	_
for	_	_
optimization	_	_
are	_	_
chosen	_	_
as	_	_
wrot	_	_
=	_	_
1000	_	_
,	_	_
wreg	_	_
=	_	_
10000	_	_
,	_	_
wdata	_	_
=	_	_
1	_	_
,	_	_
wcorr	_	_
=	_	_
10	_	_
,	_	_
wcorr	_	_
=	_	_
1	_	_
,	_	_
wr	_	_
=	_	_
1000000	_	_
,	_	_
wp	_	_
=	_	_
1000	_	_
.	_	_

#169
A	_	_
threshold	_	_
is	_	_
set	_	_
to	_	_
extract	_	_
predicted	_	_
visible	_	_
points	_	_
with	_	_
point	_	_
to	_	_
plane	_	_
distance	_	_
εd	_	_
as	_	_
15mm	_	_
and	_	_
angle	_	_
threshold	_	_
εn	_	_
as	_	_
10◦	_	_
.	_	_

#170
We	_	_
measure	_	_
the	_	_
error	_	_
by	_	_
subtracting	_	_
projected	_	_
model	_	_
image	_	_
and	_	_
the	_	_
observed	_	_
depth	_	_
image	_	_
.	_	_

#171
The	_	_
maximum	_	_
weight	_	_
is	_	_
set	_	_
to	_	_
20	_	_
and	_	_
time	_	_
stamp	_	_
threshold	_	_
is	_	_
set	_	_
to	_	_
10	_	_
.	_	_

#172
Threshold	_	_
of	_	_
distance	_	_
and	_	_
angle	_	_
for	_	_
point	_	_
to	_	_
depth	_	_
registration	_	_
is	_	_
set	_	_
as	_	_
10	_	_
degree	_	_
and	_	_
10mm	_	_
(	_	_
20mm	_	_
for	_	_
dataset	_	_
20/21	_	_
)	_	_
.	_	_

#173
Truncated	_	_
distance	_	_
is	_	_
set	_	_
as	_	_
40mm	_	_
(	_	_
60mm	_	_
for	_	_
dataset	_	_
20/21	_	_
)	_	_
.	_	_

#174
Threshold	_	_
is	_	_
employed	_	_
to	_	_
discard	_	_
some	_	_
frames	_	_
when	_	_
average	_	_
errors	_	_
are	_	_
above	_	_
due	_	_
to	_	_
low-quality	_	_
depth	_	_
generated	_	_
from	_	_
blurry	_	_
images	_	_
.	_	_

#175
Different	_	_
from	_	_
previous	_	_
research	_	_
,	_	_
as	_	_
we	_	_
have	_	_
good	_	_
initialization	_	_
of	_	_
depth	_	_
image	_	_
,	_	_
we	_	_
don’t	_	_
suffer	_	_
from	_	_
lost	_	_
track	_	_
of	_	_
camera	_	_
.	_	_

#176
Fig.	_	_
3	_	_
shows	_	_
the	_	_
results	_	_
of	_	_
soft-tissue	_	_
reconstruction	_	_
of	_	_
MIS-SLAM	_	_
in	_	_
different	_	_
frames	_	_
,	_	_
using	_	_
3	_	_
in-vivo	_	_
laparoscope	_	_
datasets	_	_
[	_	_
21	_	_
]	_	_
.	_	_

#177
From	_	_
the	_	_
results	_	_
it	_	_
can	_	_
be	_	_
seen	_	_
that	_	_
the	_	_
soft-tissues	_	_
are	_	_
reconstructed	_	_
incrementally	_	_
with	_	_
texture	_	_
.	_	_

#178
The	_	_
average	_	_
distance	_	_
of	_	_
back-projection	_	_
registration	_	_
of	_	_
the	_	_
five	_	_
scenarios	_	_
are	_	_
0.18mm	_	_
(	_	_
dataset	_	_
6	_	_
)	_	_
,	_	_
0.13mm	_	_
(	_	_
dataset	_	_
20	_	_
)	_	_
and	_	_
0.12mm	_	_
(	_	_
dataset	_	_
21	_	_
)	_	_
.	_	_

#179
Dataset	_	_
with	_	_
ground	_	_
truth	_	_
still	_	_
achieves	_	_
0.08mm	_	_
,	_	_
0.21mm	_	_
.	_	_

#180
C.	_	_
GPU	_	_
implementation	_	_
and	_	_
computational	_	_
cost	_	_
Our	_	_
system	_	_
is	_	_
implemented	_	_
on	_	_
heterogeneous	_	_
computing	_	_
.	_	_

#181
The	_	_
ORB-SLAM	_	_
runs	_	_
on	_	_
CPU	_	_
and	_	_
related	_	_
CPU	_	_
memory	_	_
.	_	_

#182
The	_	_
rest	_	_
system	_	_
is	_	_
executed	_	_
on	_	_
GPU	_	_
.	_	_

#183
Initial	_	_
global	_	_
pose	_	_
and	_	_
ORB	_	_
features	_	_
are	_	_
transferred	_	_
to	_	_
GPU	_	_
for	_	_
further	_	_
analysis	_	_
.	_	_

#184
This	_	_
CPU	_	_
to	_	_
GPU	_	_
data	_	_
transferring	_	_
doesn’t	_	_
require	_	_
much	_	_
bandwidth	_	_
as	_	_
the	_	_
amount	_	_
of	_	_
data	_	_
is	_	_
fairly	_	_
small	_	_
.	_	_

#185
CPU	_	_
initialize	_	_
OpenGL	_	_
for	_	_
visualization	_	_
framework	_	_
but	_	_
we	_	_
utilize	_	_
the	_	_
interoperability	_	_
from	_	_
Nvidia’s	_	_
CUDA	_	_
to	_	_
directly	_	_
visualize	_	_
model	_	_
in	_	_
GPU	_	_
end	_	_
which	_	_
saves	_	_
huge	_	_
amount	_	_
of	_	_
Frame	_	_
1	_	_
Frame	_	_
100	_	_
Frame	_	_
200	_	_
Frame	_	_
300	_	_
Frame	_	_
400	_	_
Frame	_	_
500	_	_
Frame	_	_
600	_	_
Frame	_	_
700	_	_
Frame	_	_
800	_	_
Frame	_	_
900	_	_
Frame	_	_
1	_	_
Frame	_	_
200	_	_
Frame	_	_
400	_	_
Frame	_	_
600	_	_
Frame	_	_
800	_	_
Frame	_	_
1000	_	_
Frame	_	_
1200	_	_
Frame	_	_
1400	_	_
Frame	_	_
1600	_	_
Frame	_	_
1800	_	_
Frame	_	_
1	_	_
Frame	_	_
300	_	_
Frame	_	_
600	_	_
Frame	_	_
900	_	_
Frame	_	_
1200	_	_
Frame	_	_
1500	_	_
Frame	_	_
1800	_	_
Frame	_	_
2100	_	_
Frame	_	_
2400	_	_
Frame	_	_
2700	_	_
Fig.	_	_
3	_	_
:	_	_
MIS-SLAM	_	_
process	_	_
different	_	_
soft	_	_
tissues	_	_
using	_	_
in-vivo	_	_
datasets	_	_
.	_	_

#186
Pictures	_	_
present	_	_
the	_	_
whole	_	_
constructed	_	_
model	_	_
at	_	_
different	_	_
frames	_	_
.	_	_

#187
The	_	_
three	_	_
videos	_	_
are	_	_
(	_	_
from	_	_
top	_	_
to	_	_
bottom	_	_
)	_	_
:	_	_
Abdomen	_	_
wall	_	_
,	_	_
abdomen	_	_
example	_	_
1	_	_
and	_	_
abdomen	_	_
example	_	_
2	_	_
.	_	_

#188
Strategy	_	_
1	_	_
:	_	_
Difference	_	_
from	_	_
ORB-SLAM	_	_
Strategy	_	_
1	_	_
:	_	_
Difference	_	_
from	_	_
ORB-SLAM	_	_
Strategy	_	_
1	_	_
:	_	_
Difference	_	_
from	_	_
ORB-SLAM	_	_
Strategy	_	_
2	_	_
:	_	_
Difference	_	_
from	_	_
ORB-SLAM	_	_
Strategy	_	_
2	_	_
:	_	_
Difference	_	_
from	_	_
ORB-SLAM	_	_
Strategy	_	_
2	_	_
:	_	_
Difference	_	_
from	_	_
ORB-SLAM	_	_
Fig.	_	_
4	_	_
:	_	_
Comparisons	_	_
with	_	_
global	_	_
pose	_	_
estimation	_	_
strategy	_	_
includes	_	_
ORB-SLAM	_	_
,	_	_
no	_	_
initialization	_	_
and	_	_
conventional	_	_
visual	_	_
odometry	_	_
.	_	_

#189
Due	_	_
to	_	_
no	_	_
ground	_	_
truth	_	_
is	_	_
available	_	_
,	_	_
we	_	_
compare	_	_
the	_	_
distance	_	_
from	_	_
No	_	_
initialization	_	_
(	_	_
Strategy	_	_
1	_	_
)	_	_
and	_	_
visual	_	_
odometry	_	_
(	_	_
Strategy	_	_
2	_	_
)	_	_
to	_	_
ORB-SLAM	_	_
.	_	_

#190
Results	_	_
(	_	_
X	_	_
component	_	_
of	_	_
scope	_	_
pose	_	_
)	_	_
demonstrate	_	_
that	_	_
both	_	_
strategies	_	_
lost	_	_
track	_	_
when	_	_
cameras	_	_
move	_	_
fast	_	_
.	_	_

#191
Our	_	_
supplementary	_	_
video	_	_
demonstrate	_	_
that	_	_
ORB-SLAM	_	_
still	_	_
maintains	_	_
the	_	_
global	_	_
track	_	_
of	_	_
the	_	_
scope	_	_
.	_	_

#192
Fig.	_	_
5	_	_
:	_	_
The	_	_
Axial	_	_
,	_	_
Coronal	_	_
,	_	_
Sagittal	_	_
and	_	_
3D	_	_
views	_	_
of	_	_
the	_	_
deformed	_	_
model	_	_
and	_	_
ground	_	_
truth	_	_
at	_	_
the	_	_
last	_	_
frame	_	_
(	_	_
liver	_	_
)	_	_
.	_	_

#193
The	_	_
red	_	_
points	_	_
denote	_	_
the	_	_
scan	_	_
of	_	_
the	_	_
last	_	_
frame	_	_
.	_	_

#194
data	_	_
transferring	_	_
.	_	_

#195
Because	_	_
in	_	_
most	_	_
cases	_	_
GPU	_	_
module	_	_
is	_	_
slower	_	_
than	_	_
CPU	_	_
part	_	_
,	_	_
we	_	_
utilize	_	_
first-in-last-out	_	_
feature	_	_
in	_	_
the	_	_
‘stack‘	_	_
data	_	_
structure	_	_
to	_	_
ensure	_	_
GPU	_	_
always	_	_
process	_	_
the	_	_
latest	_	_
data	_	_
.	_	_

#196
The	_	_
open	_	_
source	_	_
software	_	_
ORB-SLAM	_	_
is	_	_
adopted	_	_
executed	_	_
on	_	_
desktop	_	_
PC	_	_
with	_	_
Intel	_	_
Core	_	_
i7-4770K	_	_
CPU	_	_
@	_	_
3.5	_	_
GHz	_	_
and	_	_
8GB	_	_
RAM	_	_
.	_	_

#197
We	_	_
follow	_	_
[	_	_
4	_	_
]	_	_
to	_	_
tune	_	_
the	_	_
parameters	_	_
and	_	_
structures	_	_
.	_	_

#198
The	_	_
average	_	_
tracking	_	_
time	_	_
is	_	_
15ms	_	_
with	_	_
640x480	_	_
image	_	_
resolution	_	_
and	_	_
12	_	_
ms	_	_
with	_	_
720x288	_	_
image	_	_
resolution	_	_
.	_	_

#199
As	_	_
the	_	_
frame	_	_
rate	_	_
of	_	_
the	_	_
three	_	_
datasets	_	_
are	_	_
25	_	_
or	_	_
30	_	_
fps	_	_
,	_	_
ORB-SLAM	_	_
can	_	_
achieve	_	_
real-time	_	_
tracking	_	_
and	_	_
sparse	_	_
mapping	_	_
.	_	_

#200
By	_	_
parallelizing	_	_
the	_	_
proposed	_	_
methods	_	_
for	_	_
General-purpose	_	_
computing	_	_
on	_	_
graphics	_	_
processing	_	_
units	_	_
(	_	_
GPGPU	_	_
)	_	_
,	_	_
MIS-SLAM	_	_
algorithm	_	_
is	_	_
currently	_	_
implemented	_	_
in	_	_
CUDA	_	_
with	_	_
the	_	_
hardware	_	_
‘Nvidia	_	_
GeForce	_	_
GTX	_	_
TITAN	_	_
X’	_	_
.	_	_

#201
All	_	_
the	_	_
process	_	_
are	_	_
implemented	_	_
on	_	_
GPU	_	_
.	_	_

#202
Current	_	_
processing	_	_
rate	_	_
for	_	_
each	_	_
sample	_	_
dataset	_	_
is	_	_
around	_	_
0.07s	_	_
per	_	_
frame	_	_
.	_	_

#203
Although	_	_
MIS-SLAM	_	_
does	_	_
not	_	_
process	_	_
the	_	_
feature	_	_
matching	_	_
,	_	_
saved	_	_
computation	_	_
need	_	_
to	_	_
be	_	_
spent	_	_
on	_	_
visualization	_	_
.	_	_

#204
D.	_	_
Validation	_	_
using	_	_
simulation	_	_
and	_	_
ex-vivo	_	_
experiments	_	_
We	_	_
also	_	_
validate	_	_
the	_	_
MIS-SLAM	_	_
based	_	_
on	_	_
simulation	_	_
and	_	_
ex-vivo	_	_
experiment	_	_
.	_	_

#205
In	_	_
simulation	_	_
validation	_	_
process	_	_
,	_	_
three	_	_
different	_	_
soft-tissue	_	_
models	_	_
(	_	_
heart	_	_
,	_	_
liver	_	_
and	_	_
right	_	_
kidney	_	_
)	_	_
are	_	_
downloaded	_	_
from	_	_
OpenHELP	_	_
[	_	_
22	_	_
]	_	_
,	_	_
which	_	_
are	_	_
segmented	_	_
from	_	_
a	_	_
CT	_	_
scan	_	_
of	_	_
a	_	_
healthy	_	_
,	_	_
young	_	_
male	_	_
undergoing	_	_
shock	_	_
room	_	_
diagnostics	_	_
.	_	_

#206
The	_	_
deformation	_	_
of	_	_
the	_	_
soft-tissue	_	_
is	_	_
simulated	_	_
by	_	_
randomly	_	_
exerting	_	_
2-3	_	_
mm	_	_
movement	_	_
on	_	_
a	_	_
random	_	_
vertex	_	_
on	_	_
the	_	_
model	_	_
with	_	_
respect	_	_
to	_	_
the	_	_
status	_	_
of	_	_
the	_	_
deformed	_	_
model	_	_
from	_	_
the	_	_
last	_	_
frame	_	_
[	_	_
23	_	_
]	_	_
.	_	_

#207
We	_	_
tested	_	_
back-projection	_	_
accuracy	_	_
either	_	_
not	_	_
initialize	_	_
global	_	_
pose	_	_
or	_	_
do	_	_
the	_	_
initialization	_	_
as	_	_
we	_	_
did	_	_
in	_	_
Fig.	_	_
4	_	_
.	_	_

#208
We	_	_
randomly	_	_
pick	_	_
up	_	_
points	_	_
in	_	_
the	_	_
model	_	_
as	_	_
the	_	_
accuracy	_	_
is	_	_
measured	_	_
by	_	_
averaging	_	_
all	_	_
the	_	_
distances	_	_
from	_	_
the	_	_
source	_	_
points	_	_
to	_	_
target	_	_
points	_	_
.	_	_

#209
Fig.	_	_
5	_	_
shows	_	_
the	_	_
final	_	_
result	_	_
of	_	_
the	_	_
simulation	_	_
presented	_	_
in	_	_
the	_	_
form	_	_
of	_	_
axial	_	_
,	_	_
coronal	_	_
,	_	_
sagittal	_	_
and	_	_
3D	_	_
maps	_	_
(	_	_
heart	_	_
)	_	_
.	_	_

#210
We	_	_
also	_	_
tested	_	_
the	_	_
MIS-SLAM	_	_
on	_	_
two	_	_
ex-vivo	_	_
phantom	_	_
based	_	_
validation	_	_
dataset	_	_
from	_	_
Hamlyn	_	_
[	_	_
21	_	_
]	_	_
.	_	_

#211
As	_	_
the	_	_
phantom	_	_
deforms	_	_
periodically	_	_
,	_	_
we	_	_
do	_	_
the	_	_
whole	_	_
process	_	_
and	_	_
compare	_	_
it	_	_
with	_	_
the	_	_
ground	_	_
truth	_	_
generated	_	_
from	_	_
CT	_	_
scan	_	_
.	_	_

#212
The	_	_
average	_	_
accuracies	_	_
are	_	_
0.28mm	_	_
and	_	_
0.35mm	_	_
.	_	_

#213
TABLE	_	_
I	_	_
:	_	_
Accuracy	_	_
(	_	_
mm	_	_
)	_	_
comparisons	_	_
of	_	_
back-projection	_	_
with	_	_
and	_	_
without	_	_
global	_	_
pose	_	_
initialization	_	_
.	_	_

#214
Tested	_	_
on	_	_
three	_	_
models	_	_
.	_	_

#215
Heart	_	_
Liver	_	_
Right	_	_
kidney	_	_
Pose	_	_
initialization	_	_
0.41	_	_
0.66	_	_
0.62	_	_
Without	_	_
pose	_	_
initialization	_	_
0.46	_	_
0.68	_	_
0.82	_	_
E.	_	_
Limitations	_	_
and	_	_
discussions	_	_
One	_	_
of	_	_
the	_	_
biggest	_	_
problem	_	_
in	_	_
MIS-SLAM	_	_
is	_	_
texture	_	_
blending	_	_
.	_	_

#216
Results	_	_
(	_	_
Fig.	_	_
3	_	_
and	_	_
supplementary	_	_
video	_	_
)	_	_
indicate	_	_
that	_	_
when	_	_
camera	_	_
moves	_	_
,	_	_
the	_	_
brightness	_	_
of	_	_
visible	_	_
region	_	_
shows	_	_
significant	_	_
illumination	_	_
differences	_	_
from	_	_
other	_	_
invisible	_	_
region	_	_
.	_	_

#217
Few	_	_
tissues	_	_
even	_	_
indicates	_	_
blurry	_	_
textures	_	_
.	_	_

#218
The	_	_
texture	_	_
blending	_	_
procedure	_	_
involves	_	_
pixel	_	_
selection	_	_
and	_	_
blending	_	_
described	_	_
in	_	_
Fig.	_	_
1	_	_
.	_	_

#219
If	_	_
the	_	_
current	_	_
images	_	_
are	_	_
in	_	_
perfect	_	_
registration	_	_
and	_	_
identically	_	_
exposed	_	_
,	_	_
the	_	_
only	_	_
significant	_	_
issue	_	_
involved	_	_
in	_	_
large	_	_
scale	_	_
rigid	_	_
reconstruction	_	_
is	_	_
illuminations	_	_
from	_	_
different	_	_
angles	_	_
of	_	_
light	_	_
.	_	_

#220
This	_	_
illumination	_	_
problem	_	_
cause	_	_
systematic	_	_
difference	_	_
between	_	_
two	_	_
images	_	_
.	_	_

#221
In	_	_
MISSLAM	_	_
,	_	_
creating	_	_
clean	_	_
,	_	_
pleasing	_	_
looking	_	_
texture	_	_
map	_	_
in	_	_
our	_	_
non-rigid	_	_
situation	_	_
is	_	_
more	_	_
difficult	_	_
.	_	_

#222
There	_	_
are	_	_
many	_	_
challenges	_	_
in	_	_
MIS-SLAM	_	_
:	_	_
the	_	_
model	_	_
has	_	_
to	_	_
deform	_	_
according	_	_
to	_	_
the	_	_
moving	_	_
tissue	_	_
,	_	_
which	_	_
introduce	_	_
ghosting	_	_
in	_	_
color	_	_
compositing	_	_
;	_	_
the	_	_
camera	_	_
is	_	_
very	_	_
close	_	_
to	_	_
the	_	_
tissue	_	_
and	_	_
the	_	_
exposure	_	_
differs	_	_
much	_	_
as	_	_
it	_	_
moves	_	_
,	_	_
which	_	_
resulting	_	_
in	_	_
visible	_	_
seams	_	_
in	_	_
final	_	_
model	_	_
;	_	_
image	_	_
motion	_	_
blurring	_	_
is	_	_
another	_	_
problem	_	_
due	_	_
to	_	_
the	_	_
camera	_	_
moves	_	_
fast	_	_
.	_	_

#223
We	_	_
will	_	_
improve	_	_
color	_	_
blending	_	_
scheme	_	_
in	_	_
the	_	_
future	_	_
work	_	_
.	_	_

#224
Another	_	_
improvement	_	_
will	_	_
be	_	_
how	_	_
to	_	_
design	_	_
a	_	_
better	_	_
close	_	_
loop	_	_
module	_	_
.	_	_

#225
ORB-SLAM	_	_
uses	_	_
sparse	_	_
features	_	_
to	_	_
relocate	_	_
camera	_	_
based	_	_
on	_	_
presumption	_	_
that	_	_
no	_	_
relative	_	_
motion	_	_
exist	_	_
in	_	_
environment	_	_
.	_	_

#226
In	_	_
surgical	_	_
vision	_	_
,	_	_
however	_	_
,	_	_
the	_	_
scenario	_	_
is	_	_
deforming	_	_
which	_	_
make	_	_
the	_	_
case	_	_
even	_	_
more	_	_
difficult	_	_
.	_	_

#227
IV	_	_
.	_	_

#228
CONCLUSION	_	_
We	_	_
propose	_	_
MIS-SLAM	_	_
:	_	_
a	_	_
complete	_	_
real-time	_	_
large	_	_
scale	_	_
dense	_	_
deformable	_	_
SLAM	_	_
system	_	_
with	_	_
stereoscope	_	_
in	_	_
Minimal	_	_
Invasive	_	_
Surgery	_	_
based	_	_
on	_	_
heterogeneous	_	_
computing	_	_
by	_	_
making	_	_
full	_	_
use	_	_
of	_	_
CPU	_	_
and	_	_
GPU	_	_
.	_	_

#229
We	_	_
significantly	_	_
improved	_	_
the	_	_
robustness	_	_
by	_	_
solving	_	_
unstableness	_	_
caused	_	_
by	_	_
fast	_	_
movement	_	_
of	_	_
scope	_	_
and	_	_
blurry	_	_
images	_	_
.	_	_

#230
Benefiting	_	_
from	_	_
robustness	_	_
,	_	_
MIS-SLAM	_	_
is	_	_
the	_	_
first	_	_
SLAM	_	_
system	_	_
which	_	_
can	_	_
achieve	_	_
large	_	_
scale	_	_
scope	_	_
localization	_	_
and	_	_
dense	_	_
mapping	_	_
in	_	_
real-time	_	_
.	_	_

#231
MIS-SLAM	_	_
is	_	_
suitable	_	_
for	_	_
clinical	_	_
AR	_	_
or	_	_
VR	_	_
applications	_	_
when	_	_
camera	_	_
is	_	_
moving	_	_
relatively	_	_
fast	_	_
.	_	_

#232
Future	_	_
work	_	_
will	_	_
be	_	_
concentrated	_	_
on	_	_
exploring	_	_
an	_	_
approach	_	_
to	_	_
balance	_	_
textures	_	_
from	_	_
different	_	_
illumination	_	_
.	_	_

#233
We	_	_
will	_	_
also	_	_
find	_	_
a	_	_
way	_	_
to	_	_
do	_	_
better	_	_
close	_	_
loop	_	_
when	_	_
previous	_	_
shape	_	_
is	_	_
re-discovered	_	_
.	_	_