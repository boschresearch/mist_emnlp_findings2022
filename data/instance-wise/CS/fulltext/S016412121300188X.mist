#12
Cluster	_	_
visualization	_	_
also	_	_
brings	_	_
out	_	_
subtle	_	_
deficiencies	_	_
in	_	_
program	_	_
structure	_	_
and	_	_
identifies	_	_
potential	_	_
refactoring	_	_
candidates	_	_
.	_	_

#13
A	_	_
study	_	_
of	_	_
inter-cluster	_	_
dependence	_	_
is	_	_
used	_	_
to	_	_
highlight	_	_
how	_	_
coherent	_	_
clusters	_	_
are	_	_
connected	_	_
to	_	_
each	_	_
other	_	_
,	_	_
revealing	_	_
higher-level	_	_
structures	_	_
,	_	_
which	_	_
can	feasibility	_
be	_	_
used	_	_
in	_	_
reverse	_	_
engineering	_	_
.	_	_

#14
Finally	_	_
,	_	_
studies	_	_
are	_	_
presented	_	_
to	_	_
illustrate	_	_
how	_	_
clusters	_	_
are	_	_
not	_	_
correlated	_	_
with	_	_
program	_	_
faults	_	_
as	_	_
they	_	_
remain	_	_
stable	_	_
during	_	_
most	_	_
system	_	_
evolution	_	_
.	_	_

#17
This	_	_
has	_	_
led	_	_
to	_	_
both	_	_
static	_	_
(	_	_
Yau	_	_
and	_	_
Collofello	_	_
,	_	_
1985	_	_
;	_	_
Black	_	_
,	_	_
2001	_	_
)	_	_
and	_	_
blended	_	_
(	_	_
static	_	_
and	_	_
dynamic	_	_
)	_	_
(	_	_
Ren	_	_
et	_	_
al.	_	_
,	_	_
2006	_	_
,	_	_
2005	_	_
)	_	_
dependence	_	_
analyses	_	_
of	_	_
the	_	_
relationships	_	_
between	_	_
dependence	_	_
and	_	_
impact	_	_
.	_	_

#18
One	_	_
important	_	_
property	_	_
of	_	_
dependence	_	_
is	_	_
the	_	_
way	_	_
in	_	_
which	_	_
it	_	_
may	capability-options	_
cluster	_	_
.	_	_

#19
This	_	_
occurs	_	_
when	_	_
a	_	_
set	_	_
of	_	_
statements	_	_
all	_	_
depend	_	_
upon	_	_
one	_	_
another	_	_
,	_	_
forming	_	_
a	_	_
dependence	_	_
cluster	_	_
.	_	_

#28
There	_	_
has	_	_
been	_	_
interesting	_	_
work	_	_
on	_	_
the	_	_
relationship	_	_
between	_	_
faults	_	_
,	_	_
program	_	_
size	_	_
,	_	_
and	_	_
dependence	_	_
clusters	_	_
(	_	_
Black	_	_
et	_	_
al.	_	_
,	_	_
2006	_	_
)	_	_
,	_	_
and	_	_
between	_	_
impact	_	_
analysis	_	_
and	_	_
dependence	_	_
clusters	_	_
(	_	_
Acharya	_	_
and	_	_
Robinson	_	_
,	_	_
2011	_	_
;	_	_
Harman	_	_
et	_	_
al.	_	_
,	_	_
2009	_	_
)	_	_
.	_	_

#29
Large	_	_
dependence	_	_
clusters	_	_
can	capability	_
be	_	_
thought	_	_
of	_	_
as	_	_
dependence	_	_
'anti-patterns	_	_
'	_	_
because	_	_
of	_	_
the	_	_
high	_	_
impact	_	_
that	_	_
a	_	_
change	_	_
anywhere	_	_
in	_	_
the	_	_
cluster	_	_
has	_	_
.	_	_

#30
For	_	_
example	_	_
,	_	_
it	_	_
may	options	_
lead	_	_
to	_	_
problems	_	_
for	_	_
on-going	_	_
software	_	_
maintenance	_	_
and	_	_
evolution	_	_
(	_	_
Acharya	_	_
and	_	_
Robinson	_	_
,	_	_
2011	_	_
;	_	_
Binkley	_	_
et	_	_
al.	_	_
,	_	_
2008	_	_
;	_	_
Savernik	_	_
,	_	_
2007	_	_
)	_	_
.	_	_

#31
As	_	_
a	_	_
result	_	_
,	_	_
refactoring	_	_
has	_	_
been	_	_
proposed	_	_
as	_	_
a	_	_
technique	_	_
for	_	_
breaking	_	_
larger	_	_
clusters	_	_
of	_	_
dependence	_	_
into	_	_
smaller	_	_
clusters	_	_
(	_	_
Binkley	_	_
and	_	_
Harman	_	_
,	_	_
2005	_	_
;	_	_
Black	_	_
et	_	_
al.	_	_
,	_	_
2009	_	_
)	_	_
.	_	_

#32
Dependence	_	_
cluster	_	_
analysis	_	_
is	_	_
complicated	_	_
by	_	_
the	_	_
fact	_	_
that	_	_
inter-procedural	_	_
program	_	_
dependence	_	_
is	_	_
non-transitive	_	_
,	_	_
which	_	_
means	_	_
that	_	_
the	_	_
statements	_	_
in	_	_
a	_	_
traditional	_	_
dependence	_	_
cluster	_	_
,	_	_
though	_	_
they	_	_
all	_	_
depend	_	_
on	_	_
each	_	_
other	_	_
,	_	_
may	options	negation
not	_	_
each	_	_
depend	_	_
on	_	_
the	_	_
same	_	_
set	_	_
of	_	_
statements	_	_
,	_	_
nor	_	_
need	_	_
they	_	_
necessarily	_	_
affect	_	_
the	_	_
same	_	_
set	_	_
of	_	_
statements	_	_
external	_	_
to	_	_
the	_	_
cluster	_	_
.	_	_

#33
This	_	_
paper	_	_
introduces	_	_
and	_	_
empirically	_	_
studies11	_	_
Preliminary	_	_
results	_	_
were	_	_
presented	_	_
at	_	_
PASTE	_	_
(	_	_
Islam	_	_
et	_	_
al.	_	_
,	_	_
2010b	_	_
)	_	_
.	_	_

#36
A	_	_
coherent	_	_
dependence	_	_
cluster	_	_
is	_	_
thus	_	_
more	_	_
constrained	_	_
than	_	_
a	_	_
general	_	_
dependence	_	_
cluster	_	_
.	_	_

#37
A	_	_
coherent	_	_
dependence	_	_
cluster	_	_
retains	_	_
the	_	_
essential	_	_
property	_	_
that	_	_
all	_	_
statements	_	_
within	_	_
the	_	_
cluster	_	_
are	_	_
mutually	_	_
dependent	_	_
,	_	_
but	_	_
adds	_	_
the	_	_
constraint	_	_
that	_	_
all	_	_
incoming	_	_
dependence	_	_
must	deontic	_
be	_	_
identical	_	_
and	_	_
all	_	_
outgoing	_	_
dependence	_	_
must	deontic	_
also	_	_
be	_	_
identical	_	_
.	_	_

#38
That	_	_
is	_	_
,	_	_
all	_	_
statements	_	_
within	_	_
a	_	_
coherent	_	_
cluster	_	_
depend	_	_
upon	_	_
the	_	_
same	_	_
set	_	_
of	_	_
statements	_	_
outside	_	_
the	_	_
cluster	_	_
and	_	_
all	_	_
statements	_	_
within	_	_
a	_	_
coherent	_	_
cluster	_	_
affect	_	_
the	_	_
same	_	_
set	_	_
of	_	_
statements	_	_
outside	_	_
the	_	_
cluster	_	_
.	_	_

#39
This	_	_
means	_	_
that	_	_
,	_	_
when	_	_
studying	_	_
a	_	_
coherent	_	_
cluster	_	_
,	_	_
we	_	_
need	_	_
to	_	_
understand	_	_
only	_	_
a	_	_
single	_	_
external	_	_
dependence	_	_
context	_	_
in	_	_
order	_	_
to	_	_
understand	_	_
the	_	_
behavior	_	_
of	_	_
the	_	_
entire	_	_
cluster	_	_
.	_	_

#40
For	_	_
a	_	_
dependence	_	_
cluster	_	_
that	_	_
fails	_	_
to	_	_
meet	_	_
the	_	_
external	_	_
constraint	_	_
,	_	_
statements	_	_
of	_	_
the	_	_
cluster	_	_
may	options	_
have	_	_
a	_	_
different	_	_
external	_	_
dependence	_	_
context	_	_
.	_	_

#41
This	_	_
is	_	_
possible	_	_
because	_	_
inter-procedural	_	_
dependence	_	_
is	_	_
non-transitive	_	_
.	_	_

#42
It	_	_
might	speculation	_
be	_	_
thought	_	_
that	_	_
very	_	_
few	_	_
sets	_	_
of	_	_
statements	_	_
would	_	_
meet	_	_
these	_	_
additional	_	_
coherence	_	_
constraints	_	_
,	_	_
or	_	_
that	_	_
,	_	_
where	_	_
such	_	_
sets	_	_
of	_	_
statements	_	_
do	_	_
meet	_	_
the	_	_
constraints	_	_
,	_	_
there	_	_
would	_	_
be	_	_
relatively	_	_
few	_	_
statements	_	_
in	_	_
the	_	_
coherent	_	_
cluster	_	_
so-formed	_	_
.	_	_

#43
Our	_	_
empirical	_	_
findings	_	_
provide	_	_
evidence	_	_
that	_	_
this	_	_
is	_	_
not	_	_
the	_	_
case	_	_
:	_	_
coherent	_	_
dependence	_	_
clusters	_	_
are	_	_
common	_	_
and	_	_
they	_	_
can	options	_
be	_	_
very	_	_
large	_	_
.	_	_

#44
This	_	_
paper	_	_
is	_	_
part	_	_
of	_	_
a	_	_
series	_	_
of	_	_
work	_	_
that	_	_
we	_	_
have	_	_
conducted	_	_
in	_	_
the	_	_
area	_	_
of	_	_
dependence	_	_
clusters	_	_
.	_	_

#48
We	_	_
rather	_	_
show	_	_
that	_	_
these	_	_
clusters	_	_
map	_	_
to	_	_
logical	_	_
program	_	_
structures	_	_
which	_	_
will	_	_
aid	_	_
developers	_	_
in	_	_
program	_	_
comprehension	_	_
and	_	_
understanding	_	_
.	_	_

#49
Furthermore	_	_
,	_	_
this	_	_
paper	_	_
extends	_	_
the	_	_
current	_	_
knowledge	_	_
in	_	_
the	_	_
area	_	_
and	_	_
motivates	_	_
future	_	_
work	_	_
by	_	_
presenting	_	_
initial	_	_
results	_	_
of	_	_
inter-cluster	_	_
dependence	_	_
which	_	_
can	capability-feasibility	_
be	_	_
used	_	_
as	_	_
a	_	_
foundation	_	_
for	_	_
reverse	_	_
engineering	_	_
.	_	_

#50
We	_	_
answer	_	_
several	_	_
representative	_	_
open	_	_
questions	_	_
such	_	_
as	_	_
whether	_	_
clusters	_	_
are	_	_
related	_	_
to	_	_
program	_	_
faults	_	_
and	_	_
how	_	_
clusters	_	_
change	_	_
over	_	_
time	_	_
during	_	_
system	_	_
evolution	_	_
.	_	_

#54
3	_	_
A	_	_
series	_	_
of	_	_
four	_	_
case	_	_
studies	_	_
shows	_	_
how	_	_
coherent	_	_
clusters	_	_
map	_	_
to	_	_
logical	_	_
program	_	_
structures	_	_
.	_	_

#55
4	_	_
A	_	_
study	_	_
of	_	_
inter-cluster	_	_
dependence	_	_
highlights	_	_
how	_	_
coherent	_	_
clusters	_	_
form	_	_
the	_	_
building	_	_
blocks	_	_
of	_	_
larger	_	_
dependence	_	_
structures	_	_
where	_	_
identification	_	_
can	capability	_
support	_	_
,	_	_
as	_	_
an	_	_
example	_	_
,	_	_
reverse	_	_
engineering	_	_
.	_	_

#56
5	_	_
A	_	_
study	_	_
of	_	_
bug	_	_
fixes	_	_
finds	_	_
no	_	_
relationship	_	_
between	_	_
program	_	_
faults	_	_
and	_	_
coherent	_	_
clusters	_	_
implying	_	_
that	_	_
dependence	_	_
clusters	_	_
are	_	_
not	_	_
responsible	_	_
for	_	_
program	_	_
faults	_	_
.	_	_

#74
A	_	_
well	_	_
known	_	_
approximation	_	_
is	_	_
based	_	_
on	_	_
Weiser	_	_
's	_	_
program	_	_
slice	_	_
(	_	_
Weiser	_	_
,	_	_
1984	_	_
)	_	_
:	_	_
a	_	_
slice	_	_
is	_	_
the	_	_
set	_	_
of	_	_
program	_	_
statements	_	_
that	_	_
affect	_	_
the	_	_
values	_	_
computed	_	_
at	_	_
a	_	_
particular	_	_
statement	_	_
of	_	_
interest	_	_
(	_	_
referred	_	_
to	_	_
as	_	_
a	_	_
slicing	_	_
criterion	_	_
)	_	_
.	_	_

#75
While	_	_
its	_	_
computation	_	_
is	_	_
undecidable	_	_
,	_	_
a	_	_
minimal	_	_
(	_	_
or	_	_
precise	_	_
)	_	_
slice	_	_
includes	_	_
exactly	_	_
those	_	_
program	_	_
elements	_	_
that	_	_
affect	_	_
the	_	_
criterion	_	_
and	_	_
thus	_	_
can	capability-feasibility	_
be	_	_
used	_	_
to	_	_
define	_	_
an	_	_
MDS	_	_
in	_	_
which	_	_
t	_	_
depends	_	_
on	_	_
s	_	_
iff	_	_
s	_	_
is	_	_
in	_	_
the	_	_
minimal	_	_
slice	_	_
taken	_	_
with	_	_
respect	_	_
to	_	_
slicing	_	_
criterion	_	_
t.	_	_
The	_	_
slice-based	_	_
definition	_	_
is	_	_
useful	_	_
because	_	_
algorithms	_	_
to	_	_
compute	_	_
approximations	_	_
to	_	_
minimal	_	_
slices	_	_
can	capability-feasibility	_
be	_	_
used	_	_
to	_	_
define	_	_
and	_	_
compute	_	_
approximations	_	_
to	_	_
mutually-dependent	_	_
clusters	_	_
.	_	_

#76
One	_	_
such	_	_
algorithm	_	_
computes	_	_
a	_	_
slice	_	_
as	_	_
the	_	_
solution	_	_
to	_	_
a	_	_
reachability	_	_
problem	_	_
over	_	_
a	_	_
program	_	_
's	_	_
System	_	_
Dependence	_	_
Graph	_	_
(	_	_
SDG	_	_
)	_	_
(	_	_
Horwitz	_	_
et	_	_
al.	_	_
,	_	_
1990	_	_
)	_	_
.	_	_

#78
A	_	_
data	_	_
dependence	_	_
connects	_	_
a	_	_
definition	_	_
of	_	_
a	_	_
variable	_	_
with	_	_
each	_	_
use	_	_
of	_	_
the	_	_
variable	_	_
reached	_	_
by	_	_
the	_	_
definition	_	_
(	_	_
Ferrante	_	_
et	_	_
al.	_	_
,	_	_
1987	_	_
)	_	_
.	_	_

#79
Control	_	_
dependence	_	_
connects	_	_
a	_	_
predicate	_	_
p	_	_
to	_	_
a	_	_
vertex	_	_
v	_	_
when	_	_
p	_	_
has	_	_
at	_	_
least	_	_
two	_	_
control-flow-graph	_	_
successors	_	_
,	_	_
one	_	_
of	_	_
which	_	_
can	options	_
lead	_	_
to	_	_
the	_	_
exit	_	_
vertex	_	_
without	_	_
encountering	_	_
v	_	_
and	_	_
the	_	_
other	_	_
always	_	_
leads	_	_
eventually	_	_
to	_	_
v	_	_
(	_	_
Ferrante	_	_
et	_	_
al.	_	_
,	_	_
1987	_	_
)	_	_
.	_	_

#80
Thus	_	_
p	_	_
controls	_	_
the	_	_
possible	_	_
future	_	_
execution	_	_
of	_	_
v.	_	_
For	_	_
structured	_	_
code	_	_
,	_	_
control	_	_
dependence	_	_
reflects	_	_
the	_	_
nesting	_	_
structure	_	_
of	_	_
the	_	_
program	_	_
.	_	_

#107
These	_	_
vertices	_	_
also	_	_
satisfy	_	_
the	_	_
definition	_	_
of	_	_
a	_	_
forward-slice	_	_
cluster	_	_
as	_	_
they	_	_
are	_	_
also	_	_
in	_	_
each	_	_
others	_	_
forward	_	_
slices	_	_
.	_	_

#108
As	_	_
dependence	_	_
is	_	_
not	_	_
transitive	_	_
,	_	_
a	_	_
statement	_	_
can	deontic-options	_
be	_	_
in	_	_
multiple	_	_
slice-based	_	_
clusters	_	_
.	_	_

#109
For	_	_
example	_	_
,	_	_
in	_	_
Fig	_	_
.	_	_
2	_	_
the	_	_
statements	_	_
d	_	_
and	_	_
e	_	_
are	_	_
mutually	_	_
dependent	_	_
upon	_	_
each	_	_
other	_	_
and	_	_
thus	_	_
satisfy	_	_
the	_	_
definition	_	_
of	_	_
a	_	_
slice-based	_	_
cluster	_	_
.	_	_

#134
The	_	_
combination	_	_
has	_	_
the	_	_
advantage	_	_
that	_	_
the	_	_
entire	_	_
cluster	_	_
is	_	_
both	_	_
affected	_	_
by	_	_
the	_	_
same	_	_
set	_	_
of	_	_
vertices	_	_
(	_	_
as	_	_
in	_	_
the	_	_
case	_	_
of	_	_
same-backward-slice	_	_
clusters	_	_
)	_	_
and	_	_
also	_	_
affects	_	_
the	_	_
same	_	_
set	_	_
of	_	_
vertices	_	_
(	_	_
as	_	_
in	_	_
the	_	_
case	_	_
of	_	_
same-forward-slice	_	_
clusters	_	_
)	_	_
.	_	_

#135
In	_	_
the	_	_
slice-based	_	_
instantiation	_	_
,	_	_
a	_	_
set	_	_
of	_	_
vertices	_	_
V	_	_
forms	_	_
a	_	_
coherent	_	_
MDS	_	_
if	_	_
∀x	_	_
,	_	_
y∈V	_	_
:	_	_
x∈BSlice	_	_
(	_	_
y	_	_
)	_	_
the	_	_
internal	_	_
requirement	_	_
of	_	_
an	_	_
MDS∧a∈BSlice	_	_
(	_	_
x	_	_
)	_	_
⇒a∈BSlice	_	_
(	_	_
y	_	_
)	_	_
x	_	_
and	_	_
y	_	_
depend	_	_
on	_	_
same	_	_
external	_	_
a∧a∈FSlice	_	_
(	_	_
x	_	_
)	_	_
⇒a∈FSlice	_	_
(	_	_
y	_	_
)	_	_
x	_	_
and	_	_
y	_	_
impact	_	_
on	_	_
same	_	_
external	_	_
a	_	_
Because	_	_
x	_	_
and	_	_
y	_	_
are	_	_
interchangeable	_	_
∀x	_	_
,	_	_
y∈V	_	_
:	_	_
x∈BSlice	_	_
(	_	_
y	_	_
)	_	_
∧	_	_
a∈BSlice	_	_
(	_	_
x	_	_
)	_	_
⇒	_	_
a∈BSlice	_	_
(	_	_
y	_	_
)	_	_
∧	_	_
a∈FSlice	_	_
(	_	_
x	_	_
)	_	_
⇒	_	_
a∈FSlice	_	_
(	_	_
y	_	_
)	_	_
∧	_	_
y∈BSlice	_	_
(	_	_
x	_	_
)	_	_
∧	_	_
a∈BSlice	_	_
(	_	_
y	_	_
)	_	_
⇒	_	_
a∈BSlice	_	_
(	_	_
x	_	_
)	_	_
∧	_	_
a∈FSlice	_	_
(	_	_
y	_	_
)	_	_
⇒	_	_
a∈FSlice	_	_
(	_	_
x	_	_
)	_	_
This	_	_
is	_	_
equivalent	_	_
to	_	_
∀x	_	_
,	_	_
y∈V	_	_
:	_	_
x∈BSlice	_	_
(	_	_
y	_	_
)	_	_
∧y∈BSlice	_	_
(	_	_
x	_	_
)	_	_
∧	_	_
(	_	_
a∈BSlice	_	_
(	_	_
x	_	_
)	_	_
⇔a∈BSlice	_	_
(	_	_
y	_	_
)	_	_
)	_	_
∧	_	_
(	_	_
a∈FSlice	_	_
(	_	_
x	_	_
)	_	_
⇔a∈FSlice	_	_
(	_	_
y	_	_
)	_	_
)	_	_
which	_	_
simplifies	_	_
to	_	_
∀x	_	_
,	_	_
y∈V	_	_
:	_	_
BSlice	_	_
(	_	_
x	_	_
)	_	_
=BSlice	_	_
(	_	_
y	_	_
)	_	_
∧FSlice	_	_
(	_	_
x	_	_
)	_	_
=FSlice	_	_
(	_	_
y	_	_
)	_	_
and	_	_
can	capability-feasibility	_
be	_	_
used	_	_
to	_	_
define	_	_
coherent-slice	_	_
MDS	_	_
and	_	_
clusters	_	_
:	_	_
Definition	_	_
2.5	_	_
Coherent-slice	_	_
MDS	_	_
and	_	_
cluster	_	_
(	_	_
Islam	_	_
et	_	_
al.	_	_
,	_	_
2010b	_	_
)	_	_
A	_	_
coherent-slice	_	_
MDS	_	_
is	_	_
a	_	_
set	_	_
of	_	_
SDG	_	_
vertices	_	_
,	_	_
V	_	_
,	_	_
such	_	_
that	_	_
∀x	_	_
,	_	_
y∈V	_	_
:	_	_
BSlice	_	_
(	_	_
x	_	_
)	_	_
=BSlice	_	_
(	_	_
y	_	_
)	_	_
∧FSlice	_	_
(	_	_
x	_	_
)	_	_
=FSlice	_	_
(	_	_
y	_	_
)	_	_
A	_	_
coherent-slice	_	_
cluster	_	_
is	_	_
a	_	_
coherent-slice	_	_
MDS	_	_
contained	_	_
within	_	_
no	_	_
other	_	_
coherent-slice	_	_
MDS	_	_
.	_	_

#136
At	_	_
first	_	_
glance	_	_
the	_	_
use	_	_
of	_	_
both	_	_
backward	_	_
and	_	_
forward	_	_
slices	_	_
might	speculation	_
seem	_	_
redundant	_	_
because	_	_
x∈BSlice	_	_
(	_	_
y	_	_
)	_	_
⇔y∈FSlice	_	_
(	_	_
x	_	_
)	_	_
.	_	_

#137
This	_	_
is	_	_
true	_	_
up	_	_
to	_	_
a	_	_
point	_	_
:	_	_
for	_	_
the	_	_
internal	_	_
requirement	_	_
of	_	_
a	_	_
coherent-slice	_	_
cluster	_	_
,	_	_
the	_	_
use	_	_
of	_	_
either	_	_
BSlice	_	_
or	_	_
FSlice	_	_
would	_	_
suffice	_	_
.	_	_

#180
Surprisingly	_	_
,	_	_
the	_	_
larger	_	_
same-backward-slice	_	_
cluster	_	_
is	_	_
composed	_	_
of	_	_
smaller	_	_
slices	_	_
than	_	_
the	_	_
smaller	_	_
same-backward-slice	_	_
cluster	_	_
;	_	_
thus	_	_
,	_	_
the	_	_
smaller	_	_
cluster	_	_
has	_	_
a	_	_
bigger	_	_
impact	_	_
(	_	_
slice	_	_
size	_	_
)	_	_
than	_	_
the	_	_
larger	_	_
cluster	_	_
.	_	_

#181
In	_	_
addition	_	_
,	_	_
the	_	_
presence	_	_
of	_	_
three	_	_
coherent	_	_
clusters	_	_
spanning	_	_
approximately	_	_
15	_	_
%	_	_
,	_	_
20	_	_
%	_	_
and	_	_
30	_	_
%	_	_
of	_	_
the	_	_
program	_	_
's	_	_
statements	_	_
can	rhetorical	_
also	_	_
be	_	_
seen	_	_
.	_	_

#182
Fig	_	_
.	_	_
3c	_	_
shows	_	_
two	_	_
box	_	_
plots	_	_
depicting	_	_
the	_	_
distribution	_	_
of	_	_
(	_	_
backward	_	_
and	_	_
forward	_	_
)	_	_
slice	_	_
sizes	_	_
for	_	_
bc	_	_
.	_	_

#183
The	_	_
average	_	_
size	_	_
of	_	_
the	_	_
slices	_	_
is	_	_
also	_	_
displayed	_	_
in	_	_
the	_	_
box	_	_
plot	_	_
using	_	_
a	_	_
solid	_	_
square	_	_
box	_	_
.	_	_

#184
Comparing	_	_
the	_	_
box	_	_
plot	_	_
information	_	_
to	_	_
the	_	_
information	_	_
provided	_	_
by	_	_
the	_	_
MSGs	_	_
,	_	_
we	_	_
can	rhetorical	_
see	_	_
that	_	_
all	_	_
the	_	_
information	_	_
available	_	_
from	_	_
the	_	_
box	_	_
plots	_	_
can	feasibility	_
be	_	_
derived	_	_
from	_	_
the	_	_
MSGs	_	_
itself	_	_
(	_	_
except	_	_
for	_	_
the	_	_
average	_	_
)	_	_
.	_	_

#185
However	_	_
,	_	_
MSGs	_	_
show	_	_
a	_	_
landscape	_	_
(	_	_
slice	_	_
profile	_	_
)	_	_
which	_	_
can	feasibility	negation
not	_	_
be	_	_
obtained	_	_
from	_	_
the	_	_
box	_	_
plots	_	_
.	_	_

#186
Similarly	_	_
,	_	_
the	_	_
box	_	_
plots	_	_
in	_	_
Fig	_	_
.	_	_
4c	_	_
show	_	_
the	_	_
size	_	_
distributions	_	_
of	_	_
the	_	_
various	_	_
clusters	_	_
(	_	_
i.e	_	_
.	_	_
a	_	_
vertex	_	_
is	_	_
in	_	_
a	_	_
cluster	_	_
of	_	_
size	_	_
x	_	_
)	_	_
in	_	_
addition	_	_
to	_	_
the	_	_
slice	_	_
size	_	_
distributions	_	_
.	_	_

#187
Although	_	_
the	_	_
information	_	_
from	_	_
these	_	_
box	_	_
plots	_	_
can	feasibility	negation
not	_	_
be	_	_
derived	_	_
from	_	_
the	_	_
SCGs	_	_
shown	_	_
in	_	_
Fig	_	_
.	_	_
4a	_	_
and	_	_
b	_	_
directly	_	_
,	_	_
the	_	_
profiles	_	_
(	_	_
landscapes	_	_
)	_	_
give	_	_
a	_	_
better	_	_
intuition	_	_
about	_	_
the	_	_
clusters	_	_
,	_	_
the	_	_
number	_	_
of	_	_
major	_	_
clusters	_	_
and	_	_
their	_	_
sizes	_	_
.	_	_

#188
For	_	_
our	_	_
empirical	_	_
study	_	_
we	_	_
use	_	_
the	_	_
size	_	_
of	_	_
individual	_	_
clusters	_	_
and	_	_
the	_	_
cluster	_	_
profile	_	_
to	_	_
find	_	_
mappings	_	_
between	_	_
the	_	_
clusters	_	_
and	_	_
program	_	_
components	_	_
.	_	_

#193
The	_	_
section	_	_
then	_	_
quantitatively	_	_
considers	_	_
the	_	_
existence	_	_
of	_	_
coherent	_	_
dependence	_	_
clusters	_	_
and	_	_
identifies	_	_
patterns	_	_
of	_	_
clustering	_	_
within	_	_
the	_	_
programs	_	_
.	_	_

#194
This	_	_
is	_	_
followed	_	_
by	_	_
a	_	_
series	_	_
of	_	_
four	_	_
case	_	_
studies	_	_
,	_	_
where	_	_
qualitative	_	_
analysis	_	_
,	_	_
aided	_	_
by	_	_
the	_	_
decluvi	_	_
cluster	_	_
visualization	_	_
tool	_	_
(	_	_
Islam	_	_
et	_	_
al.	_	_
,	_	_
2010a	_	_
)	_	_
,	_	_
highlight	_	_
how	_	_
knowledge	_	_
of	_	_
clusters	_	_
can	capability	_
aid	_	_
a	_	_
software	_	_
engineer	_	_
.	_	_

#195
The	_	_
section	_	_
then	_	_
presents	_	_
studies	_	_
on	_	_
inter-cluster	_	_
dependence	_	_
,	_	_
and	_	_
the	_	_
relationship	_	_
of	_	_
program	_	_
faults	_	_
and	_	_
system	_	_
evolution	_	_
to	_	_
coherent	_	_
clusters	_	_
.	_	_

#198
RQ2	_	_
How	_	_
precise	_	_
is	_	_
hashing	_	_
as	_	_
a	_	_
proxy	_	_
for	_	_
comparing	_	_
slices	_	_
?	_	_

#199
RQ3	_	_
How	_	_
large	_	_
are	_	_
the	_	_
coherent	_	_
clusters	_	_
that	_	_
exist	_	_
in	_	_
production	_	_
source	_	_
code	_	_
and	_	_
which	_	_
patterns	_	_
of	_	_
clustering	_	_
can	feasibility	_
be	_	_
identified	_	_
?	_	_

#200
RQ4	_	_
Which	_	_
structures	_	_
within	_	_
a	_	_
program	_	_
can	capability	_
coherent	_	_
cluster	_	_
analysis	_	_
reveal	_	_
?	_	_

#201
RQ5	_	_
What	_	_
are	_	_
the	_	_
implications	_	_
of	_	_
inter-cluster	_	_
dependence	_	_
between	_	_
coherent	_	_
clusters	_	_
?	_	_

#216
RQ4	_	_
studies	_	_
the	_	_
underlying	_	_
logical	_	_
structure	_	_
of	_	_
programs	_	_
revealed	_	_
by	_	_
these	_	_
clusters	_	_
.	_	_

#217
RQ5	_	_
looks	_	_
explicitly	_	_
at	_	_
inter-cluster	_	_
dependency	_	_
and	_	_
considers	_	_
areas	_	_
of	_	_
software	_	_
engineering	_	_
where	_	_
it	_	_
may	options	_
be	_	_
of	_	_
interest	_	_
.	_	_

#218
RQ6	_	_
presents	_	_
a	_	_
study	_	_
of	_	_
how	_	_
program	_	_
faults	_	_
relate	_	_
to	_	_
coherent	_	_
clusters	_	_
,	_	_
and	_	_
,	_	_
finally	_	_
,	_	_
RQ7	_	_
studies	_	_
the	_	_
effect	_	_
of	_	_
system	_	_
evolution	_	_
on	_	_
clustering	_	_
.	_	_

#223
Cluster	_	_
sizes	_	_
are	_	_
also	_	_
measured	_	_
in	_	_
terms	_	_
of	_	_
source-code	_	_
representing	_	_
SDG	_	_
vertices	_	_
,	_	_
which	_	_
is	_	_
more	_	_
consistent	_	_
than	_	_
using	_	_
lines	_	_
of	_	_
code	_	_
as	_	_
it	_	_
is	_	_
not	_	_
influenced	_	_
by	_	_
blank	_	_
lines	_	_
,	_	_
comments	_	_
,	_	_
statements	_	_
spanning	_	_
multiple	_	_
lines	_	_
,	_	_
multiple	_	_
statements	_	_
on	_	_
one	_	_
line	_	_
,	_	_
or	_	_
compound	_	_
statements	_	_
.	_	_

#224
The	_	_
decluvi	_	_
system	_	_
along	_	_
with	_	_
scheme	_	_
scripts	_	_
for	_	_
data	_	_
acquisition	_	_
and	_	_
pre-compiled	_	_
datasets	_	_
for	_	_
several	_	_
open-source	_	_
programs	_	_
can	feasibility	_
be	_	_
downloaded	_	_
from	_	_
http	_	_
:	_	_
//www.cs.ucl.ac.uk/staff/s.islam/decluvi.html	_	_
.	_	_

#225
The	_	_
study	_	_
considers	_	_
the	_	_
30	_	_
C	_	_
programs	_	_
shown	_	_
in	_	_
Table	_	_
1	_	_
,	_	_
which	_	_
provides	_	_
a	_	_
brief	_	_
description	_	_
of	_	_
each	_	_
program	_	_
alongside	_	_
seven	_	_
measures	_	_
:	_	_
number	_	_
of	_	_
files	_	_
containing	_	_
executable	_	_
C	_	_
code	_	_
,	_	_
LoC	_	_
-	_	_
lines	_	_
of	_	_
code	_	_
(	_	_
as	_	_
counted	_	_
by	_	_
the	_	_
Unix	_	_
utility	_	_
wc	_	_
)	_	_
,	_	_
SLoC	_	_
-	_	_
the	_	_
non-comment	_	_
non-blank	_	_
lines	_	_
of	_	_
code	_	_
(	_	_
as	_	_
counted	_	_
by	_	_
the	_	_
utility	_	_
sloccount	_	_
(	_	_
Wheeler	_	_
,	_	_
2004	_	_
)	_	_
)	_	_
,	_	_
ELoC	_	_
-	_	_
the	_	_
number	_	_
of	_	_
source	_	_
code	_	_
lines	_	_
that	_	_
CodeSurfer	_	_
considers	_	_
to	_	_
contain	_	_
executable	_	_
code	_	_
,	_	_
the	_	_
number	_	_
of	_	_
SDG	_	_
vertices	_	_
,	_	_
the	_	_
number	_	_
of	_	_
SDG	_	_
edges	_	_
,	_	_
the	_	_
number	_	_
of	_	_
slices	_	_
produced	_	_
,	_	_
and	_	_
finally	_	_
the	_	_
size	_	_
(	_	_
as	_	_
a	_	_
percentage	_	_
of	_	_
the	_	_
program	_	_
's	_	_
SDG	_	_
vertex	_	_
count	_	_
)	_	_
of	_	_
the	_	_
largest	_	_
coherent	_	_
cluster	_	_
.	_	_

#228
The	_	_
runtimes	_	_
reported	_	_
are	_	_
wall	_	_
clock	_	_
times	_	_
captured	_	_
by	_	_
the	_	_
Unix	_	_
time	_	_
utility	_	_
while	_	_
running	_	_
the	_	_
experiments	_	_
on	_	_
a	_	_
64-bit	_	_
Linux	_	_
machine	_	_
(	_	_
CentOS	_	_
5	_	_
)	_	_
with	_	_
eight	_	_
Intel	_	_
(	_	_
R	_	_
)	_	_
Xeon	_	_
(	_	_
R	_	_
)	_	_
CPU	_	_
E5450	_	_
@	_	_
3.00GHz	_	_
processors	_	_
and	_	_
32GB	_	_
of	_	_
RAM	_	_
.	_	_

#229
It	_	_
should	deontic-rhetorical	_
be	_	_
noted	_	_
that	_	_
this	_	_
machine	_	_
acts	_	_
as	_	_
a	_	_
group	_	_
server	_	_
and	_	_
is	_	_
accessed	_	_
by	_	_
multiple	_	_
users	_	_
.	_	_

#230
There	_	_
were	_	_
other	_	_
CPU	_	_
intensive	_	_
processes	_	_
intermittently	_	_
running	_	_
on	_	_
the	_	_
machine	_	_
while	_	_
these	_	_
runtimes	_	_
were	_	_
collected	_	_
,	_	_
and	_	_
thus	_	_
the	_	_
runtimes	_	_
are	_	_
only	_	_
indicative	_	_
.	_	_

#233
Column	_	_
11	_	_
shows	_	_
the	_	_
time	_	_
needed	_	_
for	_	_
the	_	_
clustering	_	_
algorithm	_	_
to	_	_
perform	_	_
the	_	_
clustering	_	_
and	_	_
create	_	_
all	_	_
the	_	_
data	_	_
dumps	_	_
for	_	_
decluvi	_	_
to	_	_
create	_	_
cluster	_	_
visualizations	_	_
.	_	_

#234
The	_	_
process	_	_
completes	_	_
in	_	_
minutes	_	_
for	_	_
small	_	_
programs	_	_
and	_	_
can	options	_
take	_	_
hours	_	_
and	_	_
longer	_	_
for	_	_
larger	_	_
programs	_	_
.	_	_

#235
It	_	_
should	deontic-rhetorical	_
be	_	_
noted	_	_
that	_	_
the	_	_
runtime	_	_
includes	_	_
both	_	_
the	_	_
slicing	_	_
phase	_	_
which	_	_
runs	_	_
in	_	_
O	_	_
(	_	_
ne	_	_
)	_	_
,	_	_
where	_	_
n	_	_
is	_	_
the	_	_
number	_	_
of	_	_
SDG	_	_
vertices	_	_
and	_	_
e	_	_
is	_	_
the	_	_
number	_	_
of	_	_
edges	_	_
,	_	_
and	_	_
the	_	_
hashing	_	_
and	_	_
clustering	_	_
algorithm	_	_
which	_	_
runs	_	_
in	_	_
O	_	_
(	_	_
n2	_	_
)	_	_
.	_	_

#236
Therefore	_	_
the	_	_
overall	_	_
complexity	_	_
is	_	_
O	_	_
(	_	_
ne	_	_
)	_	_
.	_	_

#238
In	_	_
the	_	_
future	_	_
we	_	_
plan	_	_
to	_	_
upgrade	_	_
the	_	_
tooling	_	_
with	_	_
optimizations	_	_
for	_	_
fast	_	_
and	_	_
massive	_	_
slicing	_	_
(	_	_
Binkley	_	_
et	_	_
al.	_	_
,	_	_
2007	_	_
)	_	_
and	_	_
to	_	_
merge	_	_
the	_	_
clustering	_	_
phase	_	_
into	_	_
the	_	_
slicing	_	_
to	_	_
reduce	_	_
the	_	_
runtime	_	_
significantly	_	_
.	_	_

#239
Although	_	_
the	_	_
clustering	_	_
and	_	_
building	_	_
the	_	_
visualization	_	_
data	_	_
can	options	_
take	_	_
a	_	_
long	_	_
time	_	_
for	_	_
large	_	_
projects	_	_
,	_	_
it	_	_
is	_	_
still	_	_
useful	_	_
because	_	_
the	_	_
clustering	_	_
only	_	_
needs	_	_
to	_	_
be	_	_
done	_	_
once	_	_
(	_	_
for	_	_
example	_	_
during	_	_
a	_	_
nightly	_	_
build	_	_
)	_	_
and	_	_
can	capability-feasibility	_
then	_	_
be	_	_
visualised	_	_
and	_	_
reused	_	_
as	_	_
many	_	_
times	_	_
as	_	_
needed	_	_
.	_	_

#240
During	_	_
further	_	_
study	_	_
of	_	_
the	_	_
visualization	_	_
and	_	_
the	_	_
clustering	_	_
we	_	_
have	_	_
also	_	_
found	_	_
that	_	_
small	_	_
changes	_	_
to	_	_
the	_	_
system	_	_
does	_	_
not	_	_
show	_	_
a	_	_
change	_	_
in	_	_
the	_	_
clustering	_	_
,	_	_
therefore	_	_
once	_	_
the	_	_
clustering	_	_
is	_	_
created	_	_
it	_	_
still	_	_
remains	_	_
viable	_	_
through	_	_
small	_	_
code	_	_
changes	_	_
as	_	_
the	_	_
clustering	_	_
is	_	_
found	_	_
to	_	_
represent	_	_
the	_	_
core	_	_
program	_	_
architecture	_	_
(	_	_
Section	_	_
3.9	_	_
)	_	_
.	_	_

#244
Other	_	_
tools	_	_
such	_	_
as	_	_
CCVisu	_	_
(	_	_
Beyer	_	_
,	_	_
2008	_	_
)	_	_
which	_	_
were	_	_
able	_	_
to	_	_
handle	_	_
the	_	_
large	_	_
data	_	_
set	_	_
simply	_	_
produced	_	_
a	_	_
blob	_	_
as	_	_
a	_	_
visualization	_	_
which	_	_
was	_	_
not	_	_
at	_	_
all	_	_
useful	_	_
.	_	_

#245
The	_	_
underlying	_	_
problem	_	_
is	_	_
that	_	_
the	_	_
is-in-the-slice-of	_	_
graph	_	_
is	_	_
dense	_	_
and	_	_
no	_	_
traditional	_	_
clustering	_	_
can	capability	_
handle	_	_
such	_	_
dense	_	_
graphs	_	_
.	_	_

#246
Impact	_	_
of	_	_
pointer	_	_
analysis	_	_
precision	_	_
Recall	_	_
that	_	_
the	_	_
definition	_	_
of	_	_
a	_	_
coherent	_	_
dependence	_	_
cluster	_	_
is	_	_
based	_	_
on	_	_
an	_	_
underlying	_	_
depends-on	_	_
relation	_	_
,	_	_
which	_	_
is	_	_
approximated	_	_
using	_	_
program	_	_
slicing	_	_
.	_	_

#248
To	_	_
understand	_	_
how	_	_
pointer	_	_
analysis	_	_
precision	_	_
impacts	_	_
the	_	_
clustering	_	_
of	_	_
the	_	_
programs	_	_
we	_	_
study	_	_
the	_	_
effect	_	_
in	_	_
this	_	_
section	_	_
.	_	_

#249
Usually	_	_
,	_	_
one	_	_
would	_	_
choose	_	_
the	_	_
pointer	_	_
analysis	_	_
with	_	_
the	_	_
highest	_	_
precision	_	_
but	_	_
there	_	_
may	options	_
be	_	_
situations	_	_
where	_	_
this	_	_
is	_	_
not	_	_
possible	_	_
and	_	_
one	_	_
has	_	_
to	_	_
revert	_	_
to	_	_
lower	_	_
precision	_	_
analysis	_	_
.	_	_

#250
This	_	_
section	_	_
presents	_	_
a	_	_
study	_	_
on	_	_
the	_	_
effect	_	_
of	_	_
various	_	_
levels	_	_
of	_	_
pointer	_	_
analysis	_	_
precision	_	_
on	_	_
the	_	_
size	_	_
of	_	_
slices	_	_
and	_	_
subsequently	_	_
on	_	_
coherent	_	_
clusters	_	_
.	_	_

#252
CodeSurfer	_	_
provides	_	_
three	_	_
levels	_	_
of	_	_
pointer	_	_
analysis	_	_
precision	_	_
(	_	_
Low	_	_
,	_	_
Medium	_	_
,	_	_
and	_	_
High	_	_
)	_	_
that	_	_
provide	_	_
increasingly	_	_
precise	_	_
points-to	_	_
information	_	_
at	_	_
the	_	_
expense	_	_
of	_	_
additional	_	_
memory	_	_
and	_	_
analysis	_	_
time	_	_
.	_	_

#253
The	_	_
Low	_	_
setting	_	_
uses	_	_
a	_	_
minimal	_	_
pointer	_	_
analysis	_	_
that	_	_
assumes	_	_
every	_	_
pointer	_	_
may	capability-deontic-options	_
point	_	_
to	_	_
every	_	_
object	_	_
that	_	_
has	_	_
its	_	_
address	_	_
taken	_	_
(	_	_
variable	_	_
or	_	_
function	_	_
)	_	_
.	_	_

#254
At	_	_
the	_	_
Medium	_	_
and	_	_
High	_	_
settings	_	_
,	_	_
CodeSurfer	_	_
performs	_	_
extensive	_	_
pointer	_	_
analysis	_	_
using	_	_
the	_	_
algorithm	_	_
proposed	_	_
by	_	_
Fahndrich	_	_
et	_	_
al	_	_
.	_	_
(	_	_
1998	_	_
)	_	_
,	_	_
which	_	_
implements	_	_
a	_	_
variant	_	_
of	_	_
Andersen	_	_
's	_	_
pointer	_	_
analysis	_	_
algorithm	_	_
(	_	_
Andersen	_	_
,	_	_
1994	_	_
)	_	_
(	_	_
this	_	_
includes	_	_
parameter	_	_
aliasing	_	_
)	_	_
.	_	_

#255
At	_	_
the	_	_
medium	_	_
setting	_	_
,	_	_
fields	_	_
of	_	_
a	_	_
structure	_	_
are	_	_
not	_	_
distinguished	_	_
while	_	_
the	_	_
High	_	_
level	_	_
distinguishes	_	_
structure	_	_
fields	_	_
.	_	_

#256
The	_	_
High	_	_
setting	_	_
should	deontic	_
produce	_	_
the	_	_
most	_	_
precise	_	_
slices	_	_
but	_	_
requires	_	_
more	_	_
memory	_	_
and	_	_
time	_	_
during	_	_
SDG	_	_
construction	_	_
,	_	_
which	_	_
puts	_	_
a	_	_
functional	_	_
limit	_	_
on	_	_
the	_	_
size	_	_
and	_	_
complexity	_	_
of	_	_
the	_	_
programs	_	_
that	_	_
can	capability	_
be	_	_
handled	_	_
by	_	_
CodeSurfer	_	_
.	_	_

#257
There	_	_
is	_	_
no	_	_
automatic	_	_
way	_	_
to	_	_
determine	_	_
whether	_	_
the	_	_
slices	_	_
are	_	_
correct	_	_
and	_	_
precise	_	_
.	_	_

#267
Program	_	_
userv	_	_
has	_	_
the	_	_
largest	_	_
deviation	_	_
of	_	_
37	_	_
%	_	_
when	_	_
using	_	_
the	_	_
Low	_	_
setting	_	_
.	_	_

#268
For	_	_
example	_	_
,	_	_
in	_	_
userv	_	_
the	_	_
minimal	_	_
pointer	_	_
analysis	_	_
fails	_	_
to	_	_
recognize	_	_
that	_	_
the	_	_
function	_	_
pointer	_	_
oip	_	_
can	capability	negation
never	_	_
point	_	_
to	_	_
functions	_	_
sighandler_alrm	_	_
and	_	_
sighandler_child	_	_
and	_	_
includes	_	_
them	_	_
as	_	_
called	_	_
functions	_	_
at	_	_
call	_	_
sites	_	_
using	_	_
*oip	_	_
,	_	_
increasing	_	_
slice	_	_
size	_	_
significantly	_	_
.	_	_

#269
In	_	_
all	_	_
30	_	_
programs	_	_
,	_	_
the	_	_
Low	_	_
setting	_	_
yields	_	_
larger	_	_
slices	_	_
compared	_	_
to	_	_
the	_	_
High	_	_
setting	_	_
.	_	_

#295
Fig	_	_
.	_	_
7c	_	_
shows	_	_
the	_	_
B-SCGs	_	_
for	_	_
acm	_	_
which	_	_
falls	_	_
in	_	_
this	_	_
category	_	_
.	_	_

#296
This	_	_
counter-intuitive	_	_
result	_	_
is	_	_
seen	_	_
only	_	_
when	_	_
the	_	_
more	_	_
precise	_	_
analysis	_	_
determines	_	_
that	_	_
certain	_	_
functions	_	_
can	capability	negation
not	_	_
be	_	_
called	_	_
and	_	_
thus	_	_
excludes	_	_
them	_	_
from	_	_
the	_	_
slice	_	_
.	_	_

#297
Although	_	_
in	_	_
all	_	_
such	_	_
instances	_	_
slices	_	_
get	_	_
smaller	_	_
,	_	_
the	_	_
clusters	_	_
may	capability-options	_
grow	_	_
if	_	_
the	_	_
smaller	_	_
slices	_	_
match	_	_
other	_	_
slices	_	_
already	_	_
forming	_	_
a	_	_
cluster	_	_
.	_	_

#298
For	_	_
example	_	_
,	_	_
consider	_	_
replacing	_	_
function	_	_
f6	_	_
in	_	_
Fig	_	_
.	_	_
1	_	_
with	_	_
the	_	_
code	_	_
shown	_	_
in	_	_
Fig	_	_
.	_	_
8	_	_
,	_	_
where	_	_
f	_	_
depends	_	_
on	_	_
a	_	_
function	_	_
call	_	_
to	_	_
a	_	_
function	_	_
referenced	_	_
through	_	_
the	_	_
function	_	_
pointer	_	_
p.	_	_
Assume	_	_
that	_	_
the	_	_
highest	_	_
precision	_	_
pointer	_	_
analysis	_	_
determines	_	_
that	_	_
p	_	_
does	_	_
not	_	_
point	_	_
to	_	_
f2	_	_
and	_	_
therefore	_	_
there	_	_
is	_	_
no	_	_
call	_	_
to	_	_
f2	_	_
or	_	_
any	_	_
other	_	_
function	_	_
from	_	_
f6	_	_
.	_	_

#299
The	_	_
higher	_	_
precision	_	_
analysis	_	_
would	_	_
therefore	_	_
determine	_	_
that	_	_
the	_	_
forward	_	_
slices	_	_
and	_	_
backward	_	_
slices	_	_
of	_	_
a	_	_
,	_	_
b	_	_
and	_	_
c	_	_
are	_	_
equal	_	_
,	_	_
hence	_	_
grouping	_	_
these	_	_
three	_	_
vertices	_	_
in	_	_
a	_	_
coherent	_	_
cluster	_	_
.	_	_

#300
Whereas	_	_
the	_	_
lower	_	_
precision	_	_
is	_	_
unable	_	_
to	_	_
determine	_	_
that	_	_
p	_	_
can	capability	negation
not	_	_
point	_	_
to	_	_
f2	_	_
,	_	_
the	_	_
backward	_	_
slice	_	_
on	_	_
f	_	_
will	_	_
conservatively	_	_
include	_	_
b.	_	_
This	_	_
will	_	_
lead	_	_
the	_	_
higher	_	_
precision	_	_
analysis	_	_
to	_	_
determine	_	_
that	_	_
the	_	_
set	_	_
of	_	_
vertices	_	_
{	_	_
a	_	_
,	_	_
b	_	_
,	_	_
c	_	_
}	_	_
is	_	_
one	_	_
coherent	_	_
cluster	_	_
whereas	_	_
the	_	_
lower	_	_
precision	_	_
analysis	_	_
include	_	_
only	_	_
the	_	_
set	_	_
of	_	_
vertices	_	_
{	_	_
a	_	_
,	_	_
c	_	_
}	_	_
in	_	_
the	_	_
same	_	_
coherent	_	_
cluster	_	_
.	_	_

#301
Although	_	_
we	_	_
do	_	_
not	_	_
explicitly	_	_
report	_	_
the	_	_
project	_	_
build	_	_
times	_	_
on	_	_
CodeSurfer	_	_
and	_	_
the	_	_
clustering	_	_
runtimes	_	_
for	_	_
the	_	_
lower	_	_
settings	_	_
,	_	_
it	_	_
has	_	_
been	_	_
our	_	_
experience	_	_
that	_	_
in	_	_
the	_	_
majority	_	_
of	_	_
the	_	_
cases	_	_
the	_	_
build	_	_
times	_	_
for	_	_
the	_	_
lower	_	_
settings	_	_
were	_	_
smaller	_	_
.	_	_

#304
As	_	_
an	_	_
answer	_	_
to	_	_
RQ1	_	_
,	_	_
we	_	_
find	_	_
that	_	_
in	_	_
the	_	_
majority	_	_
of	_	_
the	_	_
cases	_	_
the	_	_
Medium	_	_
and	_	_
Low	_	_
settings	_	_
result	_	_
in	_	_
larger	_	_
coherent	_	_
clusters	_	_
when	_	_
compared	_	_
to	_	_
the	_	_
High	_	_
setting	_	_
.	_	_

#305
For	_	_
the	_	_
remaining	_	_
cases	_	_
we	_	_
have	_	_
identified	_	_
valid	_	_
scenarios	_	_
where	_	_
more	_	_
precise	_	_
pointer	_	_
analysis	_	_
can	capability-options	_
result	_	_
in	_	_
larger	_	_
coherent	_	_
clusters	_	_
.	_	_

#306
The	_	_
results	_	_
also	_	_
confirm	_	_
that	_	_
a	_	_
more	_	_
precise	_	_
pointer	_	_
analysis	_	_
leads	_	_
to	_	_
more	_	_
precise	_	_
(	_	_
smaller	_	_
)	_	_
slices	_	_
.	_	_

#341
Five	_	_
of	_	_
the	_	_
programs	_	_
show	_	_
total	_	_
agreement	_	_
,	_	_
furthermore	_	_
for	_	_
every	_	_
program	_	_
HCP	_	_
is	_	_
over	_	_
99	_	_
%	_	_
,	_	_
except	_	_
for	_	_
userv	_	_
,	_	_
which	_	_
has	_	_
the	_	_
lowest	_	_
precision	_	_
of	_	_
97.76	_	_
%	_	_
.	_	_

#342
This	_	_
can	feasibility	_
be	_	_
attributed	_	_
to	_	_
the	_	_
large	_	_
percentage	_	_
(	_	_
96	_	_
%	_	_
)	_	_
of	_	_
single	_	_
vertex	_	_
clusters	_	_
in	_	_
userv	_	_
.	_	_

#343
The	_	_
hash	_	_
values	_	_
for	_	_
slices	_	_
taken	_	_
with	_	_
respect	_	_
to	_	_
these	_	_
single-vertex	_	_
clusters	_	_
have	_	_
a	_	_
higher	_	_
potential	_	_
for	_	_
collision	_	_
leading	_	_
to	_	_
a	_	_
reduction	_	_
in	_	_
overall	_	_
precision	_	_
.	_	_

#344
In	_	_
summary	_	_
,	_	_
as	_	_
an	_	_
answer	_	_
to	_	_
RQ2	_	_
,	_	_
the	_	_
hash-based	_	_
approximation	_	_
is	_	_
found	_	_
to	_	_
be	_	_
sufficiently	_	_
accurate	_	_
at	_	_
94.97	_	_
%	_	_
for	_	_
slices	_	_
and	_	_
at	_	_
99.72	_	_
%	_	_
for	_	_
clusters	_	_
(	_	_
for	_	_
the	_	_
studied	_	_
programs	_	_
)	_	_
.	_	_

#345
Thus	_	_
,	_	_
comparing	_	_
hash	_	_
values	_	_
can	feasibility	_
replace	_	_
the	_	_
need	_	_
to	_	_
compare	_	_
actual	_	_
slices	_	_
.	_	_

#346
Do	_	_
large	_	_
coherent	_	_
clusters	_	_
occur	_	_
in	_	_
practice	_	_
?	_	_

#347
Having	_	_
demonstrated	_	_
that	_	_
hash	_	_
function	_	_
H	_	_
can	capability-feasibility	_
be	_	_
used	_	_
to	_	_
effectively	_	_
approximate	_	_
slice	_	_
contents	_	_
,	_	_
this	_	_
section	_	_
and	_	_
the	_	_
following	_	_
section	_	_
consider	_	_
the	_	_
validation	_	_
research	_	_
question	_	_
,	_	_
RQ3	_	_
:	_	_
How	_	_
large	_	_
are	_	_
coherent	_	_
clusters	_	_
that	_	_
exist	_	_
in	_	_
production	_	_
source	_	_
code	_	_
and	_	_
which	_	_
patterns	_	_
of	_	_
clustering	_	_
can	feasibility	_
be	_	_
identified	_	_
?	_	_

#348
The	_	_
question	_	_
is	_	_
first	_	_
answered	_	_
quantitatively	_	_
using	_	_
the	_	_
size	_	_
of	_	_
the	_	_
largest	_	_
coherent	_	_
cluster	_	_
in	_	_
each	_	_
program	_	_
and	_	_
then	_	_
through	_	_
visual	_	_
analysis	_	_
of	_	_
the	_	_
SCGs	_	_
.	_	_

#354
These	_	_
programs	_	_
are	_	_
archimedes	_	_
,	_	_
time	_	_
,	_	_
wdiff	_	_
,	_	_
byacc	_	_
,	_	_
a2ps	_	_
,	_	_
cflow	_	_
and	_	_
userv	_	_
.	_	_

#355
Although	_	_
it	_	_
may	speculation	_
be	_	_
interesting	_	_
to	_	_
study	_	_
why	_	_
large	_	_
clusters	_	_
are	_	_
not	_	_
present	_	_
in	_	_
these	_	_
programs	_	_
,	_	_
this	_	_
paper	_	_
focuses	_	_
on	_	_
studying	_	_
the	_	_
existence	_	_
and	_	_
implications	_	_
of	_	_
large	_	_
coherent	_	_
clusters	_	_
.	_	_

#356
Large	_	_
:	_	_
This	_	_
group	_	_
consists	_	_
of	_	_
programs	_	_
that	_	_
have	_	_
at	_	_
least	_	_
one	_	_
cluster	_	_
with	_	_
size	_	_
10	_	_
%	_	_
or	_	_
larger	_	_
.	_	_

#376
Furthermore	_	_
,	_	_
the	_	_
choice	_	_
of	_	_
10	_	_
%	_	_
as	_	_
a	_	_
threshold	_	_
for	_	_
classifying	_	_
a	_	_
cluster	_	_
as	_	_
large	_	_
is	_	_
a	_	_
relatively	_	_
conservative	_	_
choice	_	_
.	_	_

#377
Thus	_	_
,	_	_
the	_	_
results	_	_
presented	_	_
in	_	_
this	_	_
section	_	_
can	feasibility-rhetorical	_
be	_	_
thought	_	_
of	_	_
as	_	_
a	_	_
lower	_	_
bound	_	_
to	_	_
the	_	_
existence	_	_
question	_	_
.	_	_

#378
Patterns	_	_
of	_	_
clustering	_	_
This	_	_
section	_	_
presents	_	_
a	_	_
visual	_	_
study	_	_
of	_	_
SCGs	_	_
for	_	_
the	_	_
three	_	_
program	_	_
groups	_	_
and	_	_
addresses	_	_
the	_	_
second	_	_
part	_	_
of	_	_
RQ3	_	_
.	_	_

#404
Coherent	_	_
cluster	_	_
and	_	_
program	_	_
decomposition	_	_
This	_	_
section	_	_
presents	_	_
four	_	_
case	_	_
studies	_	_
using	_	_
acct	_	_
,	_	_
indent	_	_
,	_	_
bc	_	_
and	_	_
copia	_	_
.	_	_

#405
The	_	_
case	_	_
studies	_	_
form	_	_
a	_	_
major	_	_
contribution	_	_
of	_	_
the	_	_
paper	_	_
and	_	_
collectively	_	_
address	_	_
research	_	_
question	_	_
RQ4	_	_
:	_	_
Which	_	_
structures	_	_
within	_	_
a	_	_
program	_	_
can	capability	_
coherent	_	_
cluster	_	_
analysis	_	_
reveal	_	_
?	_	_

#406
As	_	_
coherent	_	_
clusters	_	_
consist	_	_
of	_	_
program	_	_
vertices	_	_
that	_	_
are	_	_
mutually	_	_
inter-dependent	_	_
and	_	_
share	_	_
extra-cluster	_	_
properties	_	_
we	_	_
consider	_	_
such	_	_
vertices	_	_
of	_	_
the	_	_
cluster	_	_
to	_	_
be	_	_
tightly	_	_
coupled	_	_
.	_	_

#421
The	_	_
cluster	_	_
sizes	_	_
range	_	_
from	_	_
11.4	_	_
%	_	_
to	_	_
2.4	_	_
%	_	_
.	_	_

#422
These	_	_
five	_	_
clusters	_	_
can	capability-feasibility	_
be	_	_
readily	_	_
identified	_	_
in	_	_
the	_	_
Heat-Map	_	_
visualization	_	_
(	_	_
not	_	_
shown	_	_
)	_	_
of	_	_
decluvi	_	_
.	_	_

#423
The	_	_
rest	_	_
of	_	_
the	_	_
clusters	_	_
are	_	_
very	_	_
small	_	_
(	_	_
less	_	_
than	_	_
2	_	_
%	_	_
or	_	_
30	_	_
vertices	_	_
)	_	_
in	_	_
size	_	_
and	_	_
are	_	_
thus	_	_
of	_	_
little	_	_
interest	_	_
.	_	_

#449
Finally	_	_
,	_	_
it	_	_
is	_	_
interesting	_	_
to	_	_
note	_	_
that	_	_
functions	_	_
from	_	_
the	_	_
same	_	_
file	_	_
or	_	_
with	_	_
similar	_	_
names	_	_
do	_	_
not	_	_
necessarily	_	_
belong	_	_
to	_	_
the	_	_
same	_	_
cluster	_	_
.	_	_

#450
Intuitively	_	_
,	_	_
it	_	_
can	feasibility-rhetorical	_
be	_	_
presumed	_	_
that	_	_
functions	_	_
that	_	_
have	_	_
similar	_	_
names	_	_
or	_	_
prefixes	_	_
work	_	_
together	_	_
to	_	_
provide	_	_
some	_	_
common	_	_
functionality	_	_
.	_	_

#451
In	_	_
this	_	_
case	_	_
,	_	_
six	_	_
functions	_	_
that	_	_
have	_	_
the	_	_
same	_	_
common	_	_
prefix	_	_
"	_	_
hashtab	_	_
"	_	_
all	_	_
perform	_	_
operations	_	_
on	_	_
the	_	_
hash	_	_
table	_	_
.	_	_

#474
For	_	_
example	_	_
,	_	_
the	_	_
handling	_	_
of	_	_
each	_	_
individual	_	_
token	_	_
is	_	_
dictated	_	_
by	_	_
operations	_	_
of	_	_
indent	_	_
and	_	_
closely	_	_
depends	_	_
on	_	_
the	_	_
parsing	_	_
.	_	_

#475
This	_	_
code	_	_
can	feasibility	negation
not	_	_
easily	_	_
be	_	_
decoupled	_	_
and	_	_
,	_	_
for	_	_
example	_	_
,	_	_
reused	_	_
.	_	_

#476
Similarly	_	_
the	_	_
memory	_	_
management	_	_
code	_	_
is	_	_
specific	_	_
to	_	_
the	_	_
data	_	_
structures	_	_
used	_	_
by	_	_
indent	_	_
resulting	_	_
in	_	_
these	_	_
many	_	_
logical	_	_
constructs	_	_
to	_	_
become	_	_
part	_	_
of	_	_
the	_	_
same	_	_
cluster	_	_
.	_	_

#484
Cluster	_	_
5	_	_
consists	_	_
of	_	_
a	_	_
single	_	_
function	_	_
that	_	_
reinitializes	_	_
the	_	_
parser	_	_
and	_	_
associated	_	_
data	_	_
structures	_	_
.	_	_

#485
The	_	_
case	_	_
study	_	_
of	_	_
indent	_	_
further	_	_
illustrates	_	_
that	_	_
coherent	_	_
clusters	_	_
can	capability	_
capture	_	_
the	_	_
program	_	_
's	_	_
logical	_	_
structure	_	_
as	_	_
an	_	_
answer	_	_
to	_	_
research	_	_
question	_	_
RQ4	_	_
.	_	_

#486
However	_	_
,	_	_
in	_	_
cases	_	_
such	_	_
as	_	_
this	_	_
where	_	_
the	_	_
internal	_	_
functionality	_	_
is	_	_
tightly	_	_
knit	_	_
,	_	_
a	_	_
single	_	_
large	_	_
coherent	_	_
cluster	_	_
maps	_	_
to	_	_
the	_	_
program	_	_
's	_	_
core	_	_
functionality	_	_
.	_	_

#488
The	_	_
program	_	_
has	_	_
nine	_	_
C	_	_
files	_	_
from	_	_
which	_	_
CodeSurfer	_	_
produced	_	_
15,076	_	_
slices	_	_
(	_	_
backward	_	_
and	_	_
forward	_	_
)	_	_
.	_	_

#489
Analyzing	_	_
bc	_	_
's	_	_
SCG	_	_
(	_	_
row	_	_
3	_	_
,	_	_
Fig	_	_
.	_	_
11	_	_
)	_	_
,	_	_
two	_	_
interesting	_	_
observations	_	_
can	rhetorical	_
be	_	_
made	_	_
.	_	_

#490
First	_	_
,	_	_
bc	_	_
contains	_	_
two	_	_
large	_	_
same-backward-slice	_	_
clusters	_	_
visible	_	_
in	_	_
the	_	_
light	_	_
gray	_	_
landscapes	_	_
as	_	_
opposed	_	_
to	_	_
the	_	_
three	_	_
large	_	_
coherent	_	_
clusters	_	_
.	_	_

#491
Second	_	_
,	_	_
looking	_	_
at	_	_
the	_	_
B-SCG	_	_
,	_	_
it	_	_
can	rhetorical	_
be	_	_
seen	_	_
that	_	_
the	_	_
x-axis	_	_
range	_	_
spanned	_	_
by	_	_
the	_	_
largest	_	_
same-backward-slice	_	_
cluster	_	_
is	_	_
occupied	_	_
by	_	_
the	_	_
top	_	_
two	_	_
coherent	_	_
clusters	_	_
shown	_	_
in	_	_
the	_	_
dashed	_	_
red	_	_
(	_	_
dark	_	_
gray	_	_
)	_	_
landscape	_	_
.	_	_

#492
This	_	_
indicates	_	_
that	_	_
the	_	_
same-backward-slice	_	_
cluster	_	_
splits	_	_
into	_	_
the	_	_
two	_	_
coherent	_	_
clusters	_	_
.	_	_

#511
This	_	_
aids	_	_
an	_	_
engineer	_	_
in	_	_
understanding	_	_
how	_	_
the	_	_
artifacts	_	_
(	_	_
e.g.	_	_
,	_	_
functions	_	_
and	_	_
files	_	_
)	_	_
of	_	_
the	_	_
program	_	_
interact	_	_
,	_	_
thus	_	_
aiding	_	_
in	_	_
program	_	_
comprehension	_	_
.	_	_

#512
The	_	_
remainder	_	_
of	_	_
this	_	_
subsection	_	_
illustrates	_	_
a	_	_
side-effect	_	_
of	_	_
decluvi	_	_
's	_	_
multi-level	_	_
visualization	_	_
,	_	_
how	_	_
it	_	_
can	capability	_
help	_	_
find	_	_
potential	_	_
problems	_	_
with	_	_
the	_	_
structure	_	_
of	_	_
a	_	_
program	_	_
.	_	_

#513
Util.c	_	_
consists	_	_
of	_	_
small	_	_
utility	_	_
functions	_	_
called	_	_
from	_	_
various	_	_
parts	_	_
of	_	_
the	_	_
program	_	_
.	_	_

#520
This	_	_
would	_	_
make	_	_
the	_	_
code	_	_
easier	_	_
to	_	_
understand	_	_
and	_	_
maintain	_	_
at	_	_
the	_	_
expense	_	_
of	_	_
a	_	_
very	_	_
simple	_	_
refactoring	_	_
.	_	_

#521
In	_	_
general	_	_
,	_	_
this	_	_
example	_	_
illustrates	_	_
how	_	_
decluvi	_	_
visualization	_	_
can	capability	_
provide	_	_
an	_	_
indicator	_	_
of	_	_
potential	_	_
points	_	_
of	_	_
code	_	_
degradation	_	_
during	_	_
evolution	_	_
.	_	_

#522
Finally	_	_
,	_	_
the	_	_
Code	_	_
View	_	_
for	_	_
function	_	_
init_gen	_	_
shown	_	_
in	_	_
Fig	_	_
.	_	_
15	_	_
includes	_	_
Lines	_	_
244	_	_
,	_	_
251	_	_
,	_	_
254	_	_
,	_	_
and	_	_
255	_	_
in	_	_
red	_	_
(	_	_
dark	_	_
gray	_	_
)	_	_
from	_	_
Cluster	_	_
1	_	_
and	_	_
Lines	_	_
247	_	_
,	_	_
248	_	_
,	_	_
249	_	_
,	_	_
and	_	_
256	_	_
in	_	_
blue	_	_
(	_	_
medium	_	_
gray	_	_
)	_	_
from	_	_
Cluster	_	_
2	_	_
.	_	_

#523
Other	_	_
lines	_	_
,	_	_
shown	_	_
in	_	_
light	_	_
gray	_	_
,	_	_
belong	_	_
to	_	_
smaller	_	_
clusters	_	_
and	_	_
lines	_	_
containing	_	_
no	_	_
executable	_	_
code	_	_
.	_	_

#524
Ideally	_	_
,	_	_
clusters	_	_
should	deontic	_
capture	_	_
a	_	_
particular	_	_
functionality	_	_
;	_	_
thus	_	_
,	_	_
functions	_	_
should	deontic	negation
generally	_	_
not	_	_
contain	_	_
code	_	_
from	_	_
multiple	_	_
clusters	_	_
(	_	_
unless	_	_
perhaps	_	_
the	_	_
clusters	_	_
are	_	_
completely	_	_
contained	_	_
within	_	_
the	_	_
function	_	_
)	_	_
.	_	_

#525
Functions	_	_
with	_	_
code	_	_
from	_	_
multiple	_	_
clusters	_	_
reduce	_	_
code	_	_
separation	_	_
(	_	_
hindering	_	_
comprehension	_	_
)	_	_
and	_	_
increase	_	_
the	_	_
likelihood	_	_
of	_	_
ripple-effects	_	_
(	_	_
Black	_	_
,	_	_
2001	_	_
)	_	_
.	_	_

#550
The	_	_
primary	_	_
reason	_	_
for	_	_
the	_	_
high	_	_
level	_	_
of	_	_
dependence	_	_
in	_	_
the	_	_
program	_	_
lies	_	_
with	_	_
the	_	_
statement	_	_
switch	_	_
(	_	_
next_state	_	_
)	_	_
,	_	_
which	_	_
controls	_	_
the	_	_
calls	_	_
to	_	_
the	_	_
smaller	_	_
functions	_	_
.	_	_

#551
This	_	_
causes	_	_
what	_	_
might	feasibility-speculation	_
be	_	_
termed	_	_
'conservative	_	_
dependence	_	_
analysis	_	_
collateral	_	_
damage	_	_
'	_	_
because	_	_
the	_	_
static	_	_
analysis	_	_
can	capability	negation
not	_	_
determine	_	_
that	_	_
when	_	_
function	_	_
f	_	_
(	_	_
)	_	_
returns	_	_
the	_	_
constant	_	_
value	_	_
5	_	_
this	_	_
leads	_	_
the	_	_
switch	_	_
statement	_	_
to	_	_
eventually	_	_
invoke	_	_
function	_	_
g	_	_
(	_	_
)	_	_
.	_	_

#552
Instead	_	_
,	_	_
the	_	_
analysis	_	_
makes	_	_
the	_	_
conservative	_	_
assumption	_	_
that	_	_
a	_	_
call	_	_
to	_	_
f	_	_
(	_	_
)	_	_
might	options	_
be	_	_
followed	_	_
by	_	_
a	_	_
call	_	_
to	_	_
any	_	_
of	_	_
the	_	_
functions	_	_
called	_	_
in	_	_
the	_	_
switch	_	_
statement	_	_
,	_	_
resulting	_	_
in	_	_
a	_	_
mutual	_	_
recursion	_	_
involving	_	_
most	_	_
of	_	_
the	_	_
program	_	_
.	_	_

#553
Although	_	_
the	_	_
coherent	_	_
cluster	_	_
still	_	_
shows	_	_
the	_	_
structure	_	_
of	_	_
the	_	_
program	_	_
and	_	_
includes	_	_
all	_	_
these	_	_
stub	_	_
functions	_	_
that	_	_
work	_	_
together	_	_
,	_	_
this	_	_
is	_	_
a	_	_
clear	_	_
case	_	_
of	_	_
dependence	_	_
pollution	_	_
(	_	_
Binkley	_	_
and	_	_
Harman	_	_
,	_	_
2005	_	_
)	_	_
,	_	_
which	_	_
is	_	_
avoidable	_	_
.	_	_

#557
This	_	_
is	_	_
even	_	_
further	_	_
amplified	_	_
for	_	_
automatic	_	_
static	_	_
analysis	_	_
tools	_	_
such	_	_
as	_	_
CodeSurfer	_	_
.	_	_

#558
Of	_	_
course	_	_
,	_	_
in	_	_
order	_	_
to	_	_
do	_	_
a	_	_
proper	_	_
re-factoring	_	_
,	_	_
the	_	_
programmer	_	_
will	_	_
have	_	_
to	_	_
consider	_	_
ways	_	_
in	_	_
which	_	_
the	_	_
program	_	_
can	feasibility	_
be	_	_
re-written	_	_
to	_	_
change	_	_
the	_	_
flow	_	_
of	_	_
control	_	_
.	_	_

#559
Whether	_	_
such	_	_
a	_	_
re-factoring	_	_
is	_	_
deemed	_	_
cost-effective	_	_
is	_	_
a	_	_
decision	_	_
that	_	_
can	feasibility	_
only	_	_
be	_	_
taken	_	_
by	_	_
the	_	_
engineers	_	_
and	_	_
managers	_	_
responsible	_	_
for	_	_
maintaining	_	_
the	_	_
program	_	_
in	_	_
question	_	_
.	_	_

#560
This	_	_
case	_	_
study	_	_
reiterates	_	_
the	_	_
answer	_	_
for	_	_
RQ4	_	_
by	_	_
showing	_	_
the	_	_
structure	_	_
and	_	_
dependency	_	_
within	_	_
the	_	_
program	_	_
.	_	_

#561
It	_	_
also	_	_
identifies	_	_
potential	_	_
refactoring	_	_
points	_	_
which	_	_
can	capability	_
improve	_	_
the	_	_
performance	_	_
of	_	_
static	_	_
analysis	_	_
tools	_	_
and	_	_
make	_	_
the	_	_
program	_	_
easier	_	_
to	_	_
understand	_	_
.	_	_

#562
Inter-cluster	_	_
dependence	_	_
This	_	_
section	_	_
addresses	_	_
research	_	_
question	_	_
RQ5	_	_
:	_	_
What	_	_
are	_	_
the	_	_
implications	_	_
of	_	_
inter-cluster	_	_
dependence	_	_
between	_	_
coherent	_	_
clusters	_	_
?	_	_

#564
A	_	_
slice	_	_
inclusion	_	_
relationship	_	_
between	_	_
two	_	_
clusters	_	_
X	_	_
and	_	_
Y	_	_
exist	_	_
,	_	_
if	_	_
∃x∈X	_	_
:	_	_
BSlice	_	_
(	_	_
x	_	_
)	_	_
∩Y≠∅	_	_
.	_	_

#565
If	_	_
such	_	_
containment	_	_
occurs	_	_
,	_	_
it	_	_
must	inference	_
be	_	_
a	_	_
strict	_	_
containment	_	_
relationship	_	_
(	_	_
BSlice	_	_
(	_	_
x	_	_
)	_	_
∩Y=Y	_	_
,	_	_
see	_	_
Eq	_	_
.	_	_
1	_	_
)	_	_
.	_	_

#566
Defining	_	_
this	_	_
relation	_	_
using	_	_
forward	_	_
slices	_	_
produces	_	_
the	_	_
inverse	_	_
relation	_	_
.	_	_

#567
In	_	_
the	_	_
series	_	_
of	_	_
case	_	_
studies	_	_
presented	_	_
earlier	_	_
we	_	_
have	_	_
seen	_	_
that	_	_
coherent	_	_
clusters	_	_
map	_	_
to	_	_
logical	_	_
components	_	_
of	_	_
a	_	_
system	_	_
and	_	_
can	feasibility	_
be	_	_
used	_	_
to	_	_
gain	_	_
an	_	_
understanding	_	_
of	_	_
the	_	_
architecture	_	_
of	_	_
the	_	_
program	_	_
.	_	_

#568
If	_	_
such	_	_
dependencies	_	_
exist	_	_
that	_	_
allows	_	_
entire	_	_
clusters	_	_
to	_	_
depend	_	_
on	_	_
other	_	_
clusters	_	_
,	_	_
then	_	_
this	_	_
dependence	_	_
relationship	_	_
can	feasibility	_
be	_	_
used	_	_
to	_	_
group	_	_
clusters	_	_
to	_	_
form	_	_
a	_	_
hierarchical	_	_
decomposition	_	_
of	_	_
the	_	_
system	_	_
where	_	_
coherent	_	_
clusters	_	_
are	_	_
regarded	_	_
as	_	_
sub-systems	_	_
,	_	_
opening	_	_
up	_	_
the	_	_
potential	_	_
use	_	_
of	_	_
coherent	_	_
clusters	_	_
in	_	_
reverse	_	_
engineering	_	_
.	_	_

#569
Secondly	_	_
,	_	_
if	_	_
there	_	_
are	_	_
mutual	_	_
dependency	_	_
relations	_	_
between	_	_
clusters	_	_
then	_	_
such	_	_
mutual	_	_
dependency	_	_
relationships	_	_
can	feasibility	_
be	_	_
used	_	_
to	_	_
provide	_	_
a	_	_
better	_	_
estimate	_	_
of	_	_
slice-based	_	_
clusters	_	_
.	_	_

#570
All	_	_
vertices	_	_
of	_	_
a	_	_
coherent	_	_
cluster	_	_
share	_	_
the	_	_
same	_	_
external	_	_
and	_	_
internal	_	_
dependence	_	_
,	_	_
that	_	_
is	_	_
,	_	_
all	_	_
vertices	_	_
have	_	_
the	_	_
same	_	_
backward	_	_
slice	_	_
and	_	_
also	_	_
the	_	_
same	_	_
forward	_	_
slice	_	_
.	_	_

#588
The	_	_
rest	_	_
of	_	_
this	_	_
section	_	_
uses	_	_
bcas	_	_
an	_	_
example	_	_
where	_	_
this	_	_
mutual	_	_
dependence	_	_
is	_	_
used	_	_
to	_	_
identify	_	_
larger	_	_
dependence	_	_
structures	_	_
by	_	_
grouping	_	_
of	_	_
the	_	_
inter-dependent	_	_
coherent	_	_
clusters	_	_
.	_	_

#589
At	_	_
first	_	_
glance	_	_
it	_	_
may	options	_
seem	_	_
that	_	_
the	_	_
grouping	_	_
of	_	_
the	_	_
coherent	_	_
clusters	_	_
is	_	_
simply	_	_
reversing	_	_
the	_	_
splitting	_	_
of	_	_
same-backward-slice	_	_
or	_	_
same-forward-slice	_	_
clusters	_	_
observed	_	_
earlier	_	_
in	_	_
Section	_	_
3.6.3	_	_
.	_	_

#590
However	_	_
,	_	_
examining	_	_
the	_	_
sizes	_	_
of	_	_
the	_	_
top	_	_
five	_	_
same-backward-slice	_	_
clusters	_	_
,	_	_
same-forward-slice	_	_
clusters	_	_
and	_	_
coherent	_	_
clusters	_	_
for	_	_
bcillustrates	_	_
that	_	_
it	_	_
is	_	_
not	_	_
the	_	_
case	_	_
.	_	_

#594
As	_	_
an	_	_
answer	_	_
to	_	_
RQ5	_	_
,	_	_
this	_	_
section	_	_
shows	_	_
that	_	_
there	_	_
are	_	_
dependence	_	_
relationships	_	_
between	_	_
coherent	_	_
clusters	_	_
and	_	_
in	_	_
some	_	_
cases	_	_
there	_	_
are	_	_
mutual	_	_
dependences	_	_
between	_	_
large	_	_
coherent	_	_
clusters	_	_
.	_	_

#595
It	_	_
also	_	_
shows	_	_
that	_	_
it	_	_
may	speculation	_
be	_	_
possible	_	_
to	_	_
leverage	_	_
this	_	_
inter-cluster	_	_
relationship	_	_
to	_	_
build	_	_
a	_	_
hierarchical	_	_
system	_	_
decomposition	_	_
.	_	_

#596
Furthermore	_	_
,	_	_
groups	_	_
of	_	_
inter-dependent	_	_
coherent	_	_
clusters	_	_
form	_	_
larger	_	_
dependence	_	_
structures	_	_
than	_	_
same-slice	_	_
clusters	_	_
and	_	_
provides	_	_
a	_	_
better	_	_
approximation	_	_
for	_	_
slice-based	_	_
clusters	_	_
.	_	_

#597
This	_	_
indicates	_	_
that	_	_
the	_	_
sizes	_	_
of	_	_
dependence	_	_
clusters	_	_
reported	_	_
by	_	_
previous	_	_
studies	_	_
(	_	_
Binkley	_	_
et	_	_
al.	_	_
,	_	_
2008	_	_
;	_	_
Binkley	_	_
and	_	_
Harman	_	_
,	_	_
2005	_	_
,	_	_
2009	_	_
;	_	_
Harman	_	_
et	_	_
al.	_	_
,	_	_
2009	_	_
;	_	_
Islam	_	_
et	_	_
al.	_	_
,	_	_
2010b	_	_
)	_	_
maybe	_	_
conservative	_	_
and	_	_
mutual	_	_
dependence	_	_
clusters	_	_
are	_	_
larger	_	_
and	_	_
more	_	_
prevalent	_	_
than	_	_
previously	_	_
reported	_	_
.	_	_

#598
Dependence	_	_
clusters	_	_
and	_	_
bug	_	_
fixes	_	_
Initial	_	_
work	_	_
on	_	_
dependence	_	_
clusters	_	_
advised	_	_
that	_	_
they	_	_
might	capability-speculation	_
cause	_	_
problems	_	_
in	_	_
software	_	_
maintenance	_	_
,	_	_
and	_	_
thus	_	_
even	_	_
be	_	_
considered	_	_
harmful	_	_
,	_	_
because	_	_
they	_	_
represent	_	_
an	_	_
intricate	_	_
interweaving	_	_
of	_	_
mutual	_	_
dependencies	_	_
between	_	_
program	_	_
elements	_	_
.	_	_

#599
Thus	_	_
a	_	_
large	_	_
dependence	_	_
cluster	_	_
might	feasibility	_
be	_	_
thought	_	_
of	_	_
as	_	_
a	_	_
bad	_	_
code	_	_
smell	_	_
(	_	_
Elssamadisy	_	_
and	_	_
Schalliol	_	_
,	_	_
2002	_	_
)	_	_
or	_	_
a	_	_
anti-pattern	_	_
(	_	_
Binkley	_	_
et	_	_
al.	_	_
,	_	_
2008	_	_
)	_	_
.	_	_

#600
Black	_	_
et	_	_
al	_	_
.	_	_
(	_	_
2006	_	_
)	_	_
suggested	_	_
that	_	_
dependence	_	_
clusters	_	_
are	_	_
potentially	_	_
where	_	_
bugs	_	_
may	speculation	_
be	_	_
located	_	_
and	_	_
suggested	_	_
the	_	_
possibility	_	_
of	_	_
a	_	_
link	_	_
between	_	_
clusters	_	_
and	_	_
program	_	_
faults	_	_
.	_	_

#601
This	_	_
section	_	_
further	_	_
investigates	_	_
this	_	_
issue	_	_
using	_	_
a	_	_
study	_	_
that	_	_
explores	_	_
the	_	_
relationship	_	_
between	_	_
program	_	_
faults	_	_
and	_	_
dependence	_	_
clusters	_	_
.	_	_

#633
This	_	_
is	_	_
why	_	_
in	_	_
the	_	_
later	_	_
stages	_	_
of	_	_
the	_	_
evolution	_	_
we	_	_
see	_	_
an	_	_
increase	_	_
in	_	_
the	_	_
size	_	_
of	_	_
the	_	_
largest	_	_
cluster	_	_
,	_	_
but	_	_
not	_	_
the	_	_
smaller	_	_
one	_	_
.	_	_

#634
However	_	_
,	_	_
we	_	_
do	_	_
not	_	_
see	_	_
any	_	_
significant	_	_
changes	_	_
in	_	_
the	_	_
slice	_	_
and	_	_
cluster	_	_
profile	_	_
of	_	_
the	_	_
program	_	_
that	_	_
can	feasibility	_
be	_	_
attributed	_	_
to	_	_
bug	_	_
fixes	_	_
.	_	_

#635
For	_	_
example	_	_
,	_	_
the	_	_
single	_	_
bug	_	_
fixed	_	_
between	_	_
revisions	_	_
0.93	_	_
and	_	_
0.94	_	_
was	_	_
on	_	_
a	_	_
single	_	_
line	_	_
of	_	_
code	_	_
from	_	_
the	_	_
file	_	_
code128.c	_	_
.	_	_

#639
The	_	_
SCGs	_	_
for	_	_
program	_	_
barcode	_	_
(	_	_
Fig	_	_
.	_	_
20	_	_
)	_	_
show	_	_
no	_	_
change	_	_
in	_	_
their	_	_
profile	_	_
when	_	_
faults	_	_
within	_	_
the	_	_
program	_	_
are	_	_
fixed	_	_
.	_	_

#640
This	_	_
provides	_	_
evidence	_	_
that	_	_
faults	_	_
may	speculation	negation
not	_	_
be	_	_
dictated	_	_
by	_	_
the	_	_
presence	_	_
or	_	_
absence	_	_
of	_	_
dependence	_	_
clusters	_	_
.	_	_

#641
As	_	_
an	_	_
answer	_	_
to	_	_
RQ6	_	_
,	_	_
the	_	_
study	_	_
of	_	_
barcode	_	_
finds	_	_
no	_	_
correlation	_	_
between	_	_
the	_	_
existence	_	_
of	_	_
dependence	_	_
clusters	_	_
and	_	_
program	_	_
faults	_	_
and	_	_
their	_	_
fix	_	_
.	_	_

#694
In	_	_
addition	_	_
,	_	_
all	_	_
of	_	_
the	_	_
programs	_	_
studied	_	_
were	_	_
C	_	_
programs	_	_
,	_	_
so	_	_
there	_	_
is	_	_
greater	_	_
uncertainty	_	_
that	_	_
the	_	_
results	_	_
will	_	_
hold	_	_
for	_	_
other	_	_
programming	_	_
paradigms	_	_
such	_	_
as	_	_
object-oriented	_	_
or	_	_
aspect-oriented	_	_
programming	_	_
.	_	_

#695
Internal	_	_
validity	_	_
is	_	_
the	_	_
degree	_	_
to	_	_
which	_	_
conclusions	_	_
can	feasibility	_
be	_	_
drawn	_	_
about	_	_
the	_	_
causal	_	_
effect	_	_
of	_	_
the	_	_
independent	_	_
variables	_	_
on	_	_
the	_	_
dependent	_	_
variable	_	_
.	_	_

#696
The	_	_
use	_	_
of	_	_
hash	_	_
values	_	_
to	_	_
approximate	_	_
slice	_	_
content	_	_
during	_	_
clustering	_	_
is	_	_
a	_	_
source	_	_
of	_	_
potential	_	_
internal	_	_
threat	_	_
.	_	_

#697
The	_	_
approach	_	_
assumes	_	_
that	_	_
hash	_	_
values	_	_
uniquely	_	_
identify	_	_
slice	_	_
contents	_	_
.	_	_

#698
Hash	_	_
functions	_	_
are	_	_
prone	_	_
to	_	_
hash	_	_
collision	_	_
which	_	_
in	_	_
our	_	_
approach	_	_
can	capability-options	_
cause	_	_
clustering	_	_
errors	_	_
.	_	_

#699
The	_	_
hash	_	_
function	_	_
used	_	_
is	_	_
carefully	_	_
crafted	_	_
to	_	_
minimize	_	_
collision	_	_
and	_	_
its	_	_
use	_	_
is	_	_
validated	_	_
in	_	_
Section	_	_
3.3	_	_
.	_	_

#713
In	_	_
software	_	_
maintenance	_	_
,	_	_
dependence	_	_
analysis	_	_
is	_	_
used	_	_
to	_	_
protect	_	_
a	_	_
software	_	_
maintainer	_	_
against	_	_
the	_	_
potentially	_	_
unforeseen	_	_
side	_	_
effects	_	_
of	_	_
a	_	_
maintenance	_	_
change	_	_
.	_	_

#714
This	_	_
can	feasibility	_
be	_	_
achieved	_	_
by	_	_
measuring	_	_
the	_	_
impact	_	_
of	_	_
the	_	_
proposed	_	_
change	_	_
(	_	_
Black	_	_
,	_	_
2001	_	_
)	_	_
or	_	_
by	_	_
attempting	_	_
to	_	_
identify	_	_
portions	_	_
of	_	_
code	_	_
for	_	_
which	_	_
a	_	_
change	_	_
can	feasibility	_
be	_	_
safely	_	_
performed	_	_
free	_	_
from	_	_
side	_	_
effects	_	_
(	_	_
Gallagher	_	_
and	_	_
Lyle	_	_
,	_	_
1991	_	_
;	_	_
Tonella	_	_
,	_	_
2003	_	_
)	_	_
.	_	_

#715
A	_	_
recently	_	_
proposed	_	_
impact	_	_
analysis	_	_
framework	_	_
(	_	_
Acharya	_	_
and	_	_
Robinson	_	_
,	_	_
2011	_	_
)	_	_
reports	_	_
that	_	_
impact	_	_
sets	_	_
are	_	_
often	_	_
part	_	_
of	_	_
large	_	_
dependence	_	_
clusters	_	_
when	_	_
using	_	_
time	_	_
consuming	_	_
but	_	_
high	_	_
precision	_	_
slicing	_	_
.	_	_

#730
The	_	_
coherent	_	_
cluster	_	_
existence	_	_
study	_	_
is	_	_
extended	_	_
to	_	_
empirically	_	_
validate	_	_
the	_	_
results	_	_
by	_	_
considering	_	_
30	_	_
production	_	_
programs	_	_
.	_	_

#731
Additional	_	_
case	_	_
studies	_	_
show	_	_
that	_	_
coherent	_	_
clusters	_	_
can	capability	_
help	_	_
reveal	_	_
the	_	_
structure	_	_
of	_	_
a	_	_
program	_	_
and	_	_
identify	_	_
structural	_	_
defects	_	_
.	_	_

#732
We	_	_
also	_	_
introduce	_	_
the	_	_
notion	_	_
of	_	_
inter-cluster	_	_
dependence	_	_
which	_	_
will	_	_
form	_	_
the	_	_
base	_	_
of	_	_
reverse	_	_
engineering	_	_
efforts	_	_
in	_	_
future	_	_
.	_	_

#735
Further	_	_
reflection	_	_
and	_	_
analysis	_	_
revealed	_	_
that	_	_
these	_	_
code	_	_
clone	_	_
structures	_	_
were	_	_
a	_	_
widespread	_	_
phenomena	_	_
that	_	_
deserved	_	_
study	_	_
and	_	_
consideration	_	_
.	_	_

#736
While	_	_
engineers	_	_
needed	_	_
to	_	_
be	_	_
aware	_	_
of	_	_
them	_	_
,	_	_
it	_	_
remains	_	_
a	_	_
subject	_	_
of	_	_
much	_	_
debate	_	_
as	_	_
to	_	_
whether	_	_
or	_	_
not	_	_
they	_	_
should	deontic	_
be	_	_
refactored	_	_
,	_	_
tolerated	_	_
or	_	_
even	_	_
nurtured	_	_
(	_	_
Bouktif	_	_
et	_	_
al.	_	_
,	_	_
2006	_	_
;	_	_
Kapser	_	_
and	_	_
Godfrey	_	_
,	_	_
2008	_	_
)	_	_
.	_	_

#737
We	_	_
believe	_	_
the	_	_
same	_	_
kind	_	_
of	_	_
discussion	_	_
may	speculation	_
apply	_	_
to	_	_
dependence	_	_
clusters	_	_
.	_	_

#738
While	_	_
dependence	_	_
clusters	_	_
may	options	concessive
have	_	_
significant	_	_
impact	_	_
on	_	_
comprehension	_	_
and	_	_
maintenance	_	_
and	_	_
though	_	_
there	_	_
is	_	_
evidence	_	_
that	_	_
these	_	_
clusters	_	_
are	_	_
a	_	_
widespread	_	_
phenomena	_	_
,	_	_
it	_	_
is	_	_
not	_	_
always	_	_
obvious	_	_
whether	_	_
they	_	_
can	feasibility	_
be	_	_
or	_	_
should	deontic	_
be	_	_
removed	_	_
or	_	_
refactored	_	_
.	_	_

#739
There	_	_
may	options	_
be	_	_
a	_	_
(	_	_
good	_	_
)	_	_
reason	_	_
for	_	_
the	_	_
presence	_	_
of	_	_
a	_	_
cluster	_	_
and/or	_	_
it	_	_
may	options	negation
not	_	_
be	_	_
obvious	_	_
how	_	_
it	_	_
can	feasibility	_
be	_	_
removed	_	_
(	_	_
though	_	_
its	_	_
presence	_	_
should	deontic	_
surely	_	_
be	_	_
brought	_	_
to	_	_
the	_	_
attention	_	_
of	_	_
the	_	_
software	_	_
maintainer	_	_
)	_	_
.	_	_

#740
These	_	_
observations	_	_
motivate	_	_
further	_	_
study	_	_
to	_	_
investigate	_	_
and	_	_
understand	_	_
dependence	_	_
clusters	_	_
,	_	_
and	_	_
to	_	_
provide	_	_
tools	_	_
to	_	_
support	_	_
software	_	_
engineers	_	_
in	_	_
their	_	_
analysis	_	_
.	_	_

#741
In	_	_
support	_	_
of	_	_
future	_	_
research	_	_
,	_	_
we	_	_
make	_	_
available	_	_
all	_	_
data	_	_
from	_	_
our	_	_
study	_	_
at	_	_
the	_	_
website	_	_
http	_	_
:	_	_
//www.cs.ucl.ac.uk/staff/s.islam/decluvi.html	_	_
.	_	_

#742
The	_	_
reader	_	_
can	feasibility	_
obtain	_	_
the	_	_
slices	_	_
for	_	_
each	_	_
program	_	_
studied	_	_
and	_	_
the	_	_
clusters	_	_
they	_	_
form	_	_
,	_	_
facilitating	_	_
replication	_	_
of	_	_
our	_	_
results	_	_
and	_	_
other	_	_
studies	_	_
of	_	_
dependence	_	_
and	_	_
dependence	_	_
clusters	_	_
.	_	_

#743
The	_	_
visualizations	_	_
used	_	_
in	_	_
this	_	_
paper	_	_
are	_	_
similar	_	_
to	_	_
those	_	_
used	_	_
for	_	_
program	_	_
comprehension	_	_
.	_	_

#757
Such	_	_
clusters	_	_
have	_	_
vertices	_	_
that	_	_
share	_	_
the	_	_
same	_	_
internal	_	_
and	_	_
external	_	_
dependencies	_	_
.	_	_

#758
The	_	_
paper	_	_
shows	_	_
that	_	_
such	_	_
clusters	_	_
are	_	_
not	_	_
necessarily	_	_
problems	_	_
but	_	_
rather	_	_
can	capability	_
aid	_	_
an	_	_
engineer	_	_
understand	_	_
program	_	_
components	_	_
and	_	_
their	_	_
interactions	_	_
.	_	_

#759
Developers	_	_
can	capability-feasibility	_
exploit	_	_
knowledge	_	_
of	_	_
coherent	_	_
clusters	_	_
as	_	_
they	_	_
aid	_	_
in	_	_
program	_	_
comprehension	_	_
as	_	_
the	_	_
clusters	_	_
bring	_	_
out	_	_
interactions	_	_
between	_	_
logical	_	_
constructs	_	_
of	_	_
the	_	_
system	_	_
.	_	_

#760
We	_	_
also	_	_
lay	_	_
a	_	_
foundation	_	_
for	_	_
research	_	_
into	_	_
this	_	_
new	_	_
application	_	_
area	_	_
and	_	_
encourage	_	_
further	_	_
research	_	_
.	_	_

#761
Moreover	_	_
,	_	_
future	_	_
research	_	_
could	feasibility-options	_
compare	_	_
the	_	_
aspects	_	_
of	_	_
various	_	_
definitions	_	_
of	_	_
dependence	_	_
clusters	_	_
and	_	_
the	_	_
properties	_	_
they	_	_
capture	_	_
.	_	_

#762
This	_	_
paper	_	_
presents	_	_
new	_	_
approximations	_	_
that	_	_
support	_	_
the	_	_
efficient	_	_
and	_	_
accurate	_	_
identification	_	_
of	_	_
coherent	_	_
clusters	_	_
.	_	_

#763
Empirical	_	_
evaluation	_	_
finds	_	_
that	_	_
23	_	_
of	_	_
the	_	_
30	_	_
subject	_	_
programs	_	_
have	_	_
at	_	_
least	_	_
one	_	_
large	_	_
coherent	_	_
cluster	_	_
.	_	_

#764
A	_	_
series	_	_
of	_	_
four	_	_
case	_	_
studies	_	_
illustrate	_	_
that	_	_
coherent	_	_
clusters	_	_
map	_	_
to	_	_
a	_	_
logical	_	_
functional	_	_
decomposition	_	_
and	_	_
can	capability-feasibility	_
be	_	_
used	_	_
to	_	_
depict	_	_
the	_	_
structure	_	_
of	_	_
a	_	_
program	_	_
.	_	_

#765
In	_	_
all	_	_
four	_	_
case	_	_
studies	_	_
,	_	_
coherent	_	_
clusters	_	_
map	_	_
to	_	_
subsystems	_	_
,	_	_
each	_	_
of	_	_
which	_	_
is	_	_
responsible	_	_
for	_	_
implementing	_	_
concise	_	_
functionality	_	_
.	_	_

#766
As	_	_
side-effects	_	_
of	_	_
the	_	_
study	_	_
,	_	_
we	_	_
find	_	_
that	_	_
the	_	_
visualization	_	_
of	_	_
coherent	_	_
clusters	_	_
can	capability-feasibility	_
identify	_	_
potential	_	_
structural	_	_
problems	_	_
as	_	_
well	_	_
as	_	_
refactoring	_	_
opportunities	_	_
.	_	_

#767
The	_	_
paper	_	_
also	_	_
discusses	_	_
inter-cluster	_	_
dependence	_	_
and	_	_
how	_	_
mutual	_	_
dependencies	_	_
between	_	_
clusters	_	_
may	feasibility-options	_
be	_	_
exploited	_	_
to	_	_
reveal	_	_
large	_	_
dependence	_	_
structure	_	_
that	_	_
form	_	_
the	_	_
basis	_	_
of	_	_
reverse	_	_
engineering	_	_
efforts	_	_
.	_	_

#768
Furthermore	_	_
,	_	_
the	_	_
paper	_	_
presents	_	_
a	_	_
study	_	_
on	_	_
how	_	_
bug	_	_
fixes	_	_
relate	_	_
to	_	_
the	_	_
presence	_	_
of	_	_
coherent	_	_
clusters	_	_
,	_	_
and	_	_
finds	_	_
no	_	_
relationship	_	_
between	_	_
program	_	_
faults	_	_
and	_	_
coherent	_	_
clusters	_	_
in	_	_
barcode	_	_
.	_	_

#773
There	_	_
is	_	_
also	_	_
room	_	_
for	_	_
further	_	_
research	_	_
aimed	_	_
at	_	_
understanding	_	_
the	_	_
formation	_	_
and	_	_
impact	_	_
of	_	_
coherent	_	_
clusters	_	_
on	_	_
software	_	_
quality	_	_
.	_	_

#774
For	_	_
example	_	_
,	_	_
by	_	_
studying	_	_
how	_	_
well	_	_
dependence	_	_
clusters	_	_
can	capability	_
capture	_	_
functionality	_	_
.	_	_

#775
Furthermore	_	_
,	_	_
application	_	_
of	_	_
dynamic	_	_
slicing	_	_
in	_	_
formation	_	_
of	_	_
dependence	_	_
clusters	_	_
might	feasibility	_
by	_	_
considered	_	_
as	_	_
static	_	_
analysis	_	_
can	options	_
suffer	_	_
from	_	_
over	_	_
approximation	_	_
caused	_	_
by	_	_
its	_	_
conservative	_	_
nature	_	_
.	_	_

#776
Acknowledgements	_	_
This	_	_
work	_	_
is	_	_
supported	_	_
by	_	_
EPSRC	_	_
(	_	_
EP/G060525/2	_	_
,	_	_
EP/F059442/2	_	_
)	_	_
,	_	_
EU	_	_
(	_	_
ICT-2009.1.2	_	_
no	_	_
257574	_	_
)	_	_
,	_	_
and	_	_
NSF	_	_
(	_	_
CCF	_	_
0916081	_	_
)	_	_
.	_	_

#777
Data	_	_
from	_	_
the	_	_
EPSRC-funded	_	_
portions	_	_
of	_	_
this	_	_
work	_	_
may	deontic-options	_
be	_	_
available	_	_
by	_	_
contacting	_	_
Dr	_	_
.	_	_

#778
Krinke	_	_
.	_	_

#779
Please	_	_
note	_	_
that	_	_
intellectual	_	_
property	_	_
or	_	_
other	_	_
restrictions	_	_
may	options	_
prevent	_	_
the	_	_
full	_	_
disclosure	_	_
of	_	_
this	_	_
data	_	_
.	_	_